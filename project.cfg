import plpproject as plp
import os

ProjectConfig = c = {}

if os.environ.get('PULP_GITHUB_SSH') is None:
  github = 'https://github.com/'
else:
  github = 'git@github.com:'

has_gw_gitlab = os.environ.get('PULP_GW_GITLAB') is not None

#
# MODULES
#

json_tools = plp.Module(
  name  = 'json-tools',
  path  = 'json-tools',
  deps  = [],
  steps = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('build', 'make all install'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

pulp_tools = plp.Module(
  name  = 'pulp-tools',
  path  = 'pulp-tools',
  deps  = [json_tools],
  steps = [
    plp.BuildStep('prepare', 'make header'),
    plp.BuildStep('build', 'make build'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

pulp_configs = plp.Module(
  name  = 'pulp-configs',
  path  = 'pulp-configs',
  deps  = [pulp_tools],
  steps = [
    plp.BuildStep('build', 'make all'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

rules = plp.Module(
  name  = 'pulp-rules',
  url   = github + 'pulp-platform/pulp-rules.git',
  path  = 'tools/pulp-rules',
  deps  = [pulp_tools],
  steps = [
    plp.BuildStep('prepare', 'make all'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

runner = plp.Module(
  name  = 'runner',
  url   = github + 'pulp-platform/runner.git',
  path  = 'tools/runner',
  steps = [
    plp.BuildStep('build', 'make sdk.build'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)





archi = plp.Module(
  name  = 'archi',
  url   = github + 'pulp-platform/archi.git',
  path  = 'runtime/archi',
  deps  = [rules],
  steps = [
    plp.BuildStep('clean',   'make fullclean'),
    plp.BuildStep('prepare', 'make header'),
  ],
  parameters = ['pulp_chip', 'install_name'],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

archi_host = plp.Module(
  name  = 'archi-host',
  url   = github + 'pulp-platform/archi-host.git',
  path  = 'runtime/archi-host',
  deps  = [rules],  # `pulp_rt` is also a dependency, but this would result in a dependency circle,
                    # which the SDK currently cannot resolve.  Thus, you have to manually ensure
                    # that the headers of `pulp_rt` are installed before this module is compiled.
  steps = [
    plp.BuildStep('clean',   'make fullclean'),
    plp.BuildStep('prepare', 'make header'),
    plp.BuildStep('build',   'make build install'),
  ],
  parameters = ['pulp_chip', 'install_name'],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  },
  restrict='(config.get("pulp_chip").find("bigpulp") != -1 or config.get("pulp_chip").find("hero") != -1) and config.get("pulp_chip") not in "bigpulp-standalone"'
)

archi_analog = plp.Module(
  name  = 'archi-analog',
  url   = 'git@iis-git.ee.ethz.ch:vivosoc/archi_analog.git',
  path  = 'runtime/archi-analog',
  deps  = [rules],
  restrict   = "config.get('pulp_chip').find('vivosoc') != -1",
  steps = [
    plp.BuildStep('clean',   'make fullclean'),
    plp.BuildStep('prepare', 'make header'),
  ],
  parameters = ['pulp_chip', 'install_name'],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

hal_analog = plp.Module(
  name  = 'hal-analog',
  url   = 'git@iis-git.ee.ethz.ch:vivosoc/hal_analog.git',
  path  = 'runtime/hal-analog',
  deps  = [rules],
  restrict   = "config.get('pulp_chip').find('vivosoc') != -1",
  steps = [
    plp.BuildStep('clean',   'make fullclean'),
    plp.BuildStep('prepare', 'make header'),
  ],
  parameters = ['pulp_chip', 'install_name'],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

pulp_debug_bridge = plp.Module(
  name  = 'debug-bridge2',
  url   = github + 'pulp-platform/pulp-debug-bridge.git',
  path  = 'tools/pulp-debug-bridge',
  deps  = [json_tools],
  steps = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('build',   'make build'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

hal = plp.Module(
  name  = 'hal',
  url   = github + 'pulp-platform/hal.git',
  path  = 'runtime/hal',
  deps  = [rules, pulp_debug_bridge],
  steps = [
    plp.BuildStep('clean',   'make fullclean'),
    plp.BuildStep('prepare', 'make header'),
  ],
  parameters = ['pulp_chip', 'install_name'],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

jtag_bridge = plp.Module(
  name  = 'jtag-bridge',
  url   = 'git@iis-git.ee.ethz.ch:pulp-tools/riscv_jtag_server.git',
  path  = 'tools/jtag-bridge',
  deps  = [],
  steps = [
    plp.BuildStep('clean',   'make -f Makefile.sdk clean'),
    plp.BuildStep('build',   'make -f Makefile.sdk all'),
  ],
  restrict   = "config.get('pulp_chip') != 'pulpissimo' and config.get('pulp_chip') != 'pulp'",
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

debug_bridge = plp.Module(
  name  = 'debug-bridge',
  url   = 'git@iis-git.ee.ethz.ch:pulp-tools/riscv_debug_bridge.git',
  path  = 'tools/debug-bridge',
  deps  = [jtag_bridge, archi, hal, json_tools, pulp_debug_bridge],
  steps = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('checkout',   'make checkout'),
    plp.BuildStep('build',   'make sdk'),
  ],
  restrict   = "config.get('pulp_chip') != 'pulpissimo' and config.get('pulp_chip') != 'pulp'",
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

pulp_rt = plp.Module(
  name       = 'pulp-rt',
  url        = github + 'pulp-platform/pulp-rt.git',
  path       = 'runtime/pulp-rt',
  deps       = [rules,archi,archi_analog,hal_analog,hal, archi_host],
  parameters = ['pulp_chip', 'pulp_compiler', 'pulp_rt_version', 'pulp_chip_version', 'install_name'],
  steps      = [
    plp.BuildStep('clean',   'make fullclean'),
    plp.BuildStep('prepare', 'make header'),
    plp.BuildStep('build',   'make build install'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

pulp_rt_bare = plp.Module(
  name       = 'pulp-rt-bare',
  url        = github + 'pulp-platform/pulp-rt.git',
  path       = 'runtime/pulp-rt-bare',
  deps       = [rules,archi,archi_analog,hal_analog,hal, archi_host],
  parameters = ['pulp_chip', 'pulp_compiler', 'pulp_rt_version', 'pulp_chip_version', 'install_name'],
  steps      = [
    plp.BuildStep('clean',   'make fullclean PULP_RT_CONFIG=configs/bare.mk'),
    plp.BuildStep('prepare', 'make header PULP_RT_CONFIG=configs/bare.mk'),
    plp.BuildStep('build',   'make build install PULP_RT_CONFIG=configs/bare.mk'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

pulp_rt_tiny = plp.Module(
  name       = 'pulp-rt-tiny',
  url        = github + 'pulp-platform/pulp-rt.git',
  path       = 'runtime/pulp-rt-tiny',
  deps       = [rules,archi,archi_analog,hal_analog,hal, archi_host],
  parameters = ['pulp_chip', 'pulp_compiler', 'pulp_rt_version', 'pulp_chip_version', 'install_name'],
  steps      = [
    plp.BuildStep('clean',   'make -f Makefile fullclean PULP_RT_CONFIG=configs/tiny.mk'),
    plp.BuildStep('prepare', 'make -f Makefile header PULP_RT_CONFIG=configs/tiny.mk'),
    plp.BuildStep('build',   'make -f Makefile build install PULP_RT_CONFIG=configs/tiny.mk'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

pulp_rt_analog = plp.Module(
  name       = 'pulp-rt-analog',
  url        = 'git@iis-git.ee.ethz.ch:vivosoc/pulp-rt_analog.git',
  path       = 'runtime/pulp-rt-analog',
  deps       = [ archi_analog, hal_analog, pulp_rt],
  parameters = ['pulp_chip', 'pulp_compiler', 'pulp_rt_version', 'pulp_chip_version', 'install_name'],
  restrict   = "config.get('pulp_chip').find('vivosoc') != -1",
  steps      = [
    plp.BuildStep('clean',   'make fullclean'),
    plp.BuildStep('prepare', 'make header'),
    plp.BuildStep('build',   'make build install'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

pc_analyzer = plp.Module(
  name  = 'pc_analyzer',
  url   = 'git@iis-git.ee.ethz.ch:pulp-tools/pc_analyzer.git',
  path  = 'tools/pc_analyzer',
  restrict   = "config.get('pulp_chip') != 'pulpissimo' and config.get('pulp_chip') != 'pulp'",
  steps = [
    plp.BuildStep('build',   'make sdk.build'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)


dpi_models = plp.Module(
  name  = 'dpi-models',
  url   = github + 'pulp-platform/dpi-models.git',
  path  = 'platform/dpi_models',
  deps  = [json_tools, pulp_debug_bridge],
  steps = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('checkout',   'make checkout'),
    plp.BuildStep('build',   'make build install'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

periph_models = plp.Module(
  name  = 'periph_models',
  url   = 'git@iis-git.ee.ethz.ch:pulp-sim/periph_models.git',
  path  = 'platform/periph_models',
  deps  = [debug_bridge, json_tools],
  restrict   = "config.get('pulp_chip') != 'pulpissimo' and config.get('pulp_chip') != 'pulp' and config.get('pulp_chip') != 'honey'",
  steps = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('checkout',   'make checkout'),
    plp.BuildStep('build',   'make build install'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

gvsoc = plp.Module(
  name  = 'gvsoc',
  url   = 'git@iis-git.ee.ethz.ch:pulp-sim/gvsoc.git',
  path  = 'platform/gvsoc',
  deps  = [archi, hal, debug_bridge, periph_models, pulp_debug_bridge],
  restrict   = "config.get('pulp_chip') != 'pulpissimo' and config.get('pulp_chip') != 'pulp' and config.get('pulp_chip') != 'honey'",
  steps = [
    plp.BuildStep('clean',   'make sdk.clean'),
    plp.BuildStep('checkout',   'make checkout'),
    plp.BuildStep('prepare', 'make sdk.header'),
    plp.BuildStep('build',   'make sdk.build'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

vp = plp.Module(
  name  = 'vp',
  url   = github + 'pulp-platform/gvsoc.git',
  path  = 'platform/vp',
  deps  = [ archi, dpi_models, json_tools ],
  parameters = ['pulp_chip', 'install_name'],
  steps = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('build',   'make build'),
    plp.BuildStep('checkout',   'make checkout'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

rtl_checker = plp.Module(
  name  = 'rtl_checker',
  url   = 'git@iis-git.ee.ethz.ch:pulp-sim/gvsoc.git',
  path  = 'platform/rtl_checker',
  deps  = [archi, hal, debug_bridge, periph_models],
  restrict   = "config.get('pulp_chip') != 'pulpissimo' and config.get('pulp_chip') != 'pulp'",
  steps = [
    plp.BuildStep('clean',   'make -C comps/cpu/or1k/iss clean SHARED_LIB=1'),
    plp.BuildStep('build',   'make -C comps/cpu/or1k/iss all SHARED_LIB=1'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

gap_models = plp.Module(
  name  = 'gap-models',
  url   = 'git@iis-git.ee.ethz.ch:greenwaves-technologies/models.git',
  path  = 'platform/gap-models',
  deps  = [gvsoc],
  steps = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('build',   'make build'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  },
  restrict   = "config.get('pulp_chip') == 'gap'"
)

libgomp = plp.Module(
  name       = 'libgomp',
  url        = 'git@iis-git.ee.ethz.ch:pulp-rt/omp_runtime.git',
  path       = 'runtime/libgomp',
  deps       = [pulp_rt],
  parameters = ['pulp_chip', 'pulp_compiler', 'pulp_rt_version', 'pulp_chip_version', 'install_name'],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('prepare', 'make header'),
    plp.BuildStep('build',   'make build install'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  },
  restrict   = 'config.get("pulp_chip") not in ["vivosoc2", "vivosoc2_1", "fulmine", "honey", "pulpissimo", "pulp"]'
)

libvmm = plp.Module(
  name       = 'libvmm',
  url        = github + 'pulp-platform/libvmm.git',
  path       = 'runtime/libvmm',
  deps       = [pulp_rt, archi_host],
  parameters = ['pulp_chip', 'pulp_compiler', 'pulp_rt_version', 'pulp_chip_version', 'install_name'],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('prepare', 'make header'),
    plp.BuildStep('build',   'make build install'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  },
  restrict='(config.get("pulp_chip").find("bigpulp") != -1 or config.get("pulp_chip").find("hero") != -1) and config.get("pulp_chip") not in ["bigpulp-standalone"]'
)

boot_code = plp.Module(
  name       = 'boot_code',
  url        = 'git@iis-git.ee.ethz.ch:pulp-sw/boot_code_new.git',
  path       = 'runtime/boot_code',
  deps       = [rules, archi, hal, pulp_rt],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('build',   'make build install'),
  ],
  parameters = ['pulp_chip', 'pulp_compiler', 'pulp_rt_version', 'pulp_chip_version', 'install_name'],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  },
  restrict   = 'config.get("rom") is not None and config.get("pulp_chip") in  ["gap", "wolfe", "vivosoc3"]'
)

boot_code_vega = plp.Module(
  name       = 'boot_code_vega',
  url        = 'git@iis-git.ee.ethz.ch:pulp-sw/boot_code_new.git',
  path       = 'runtime/boot_code_vega',
  deps       = [rules, archi, hal, pulp_rt],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('build',   'make build install'),
  ],
  parameters = ['pulp_chip', 'pulp_compiler', 'pulp_rt_version', 'pulp_chip_version', 'install_name'],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  },
  restrict   = 'config.get("pulp_chip") == "vega" '
)

boot_code_multino = plp.Module(
  name       = 'boot_code_multino',
  url        = 'git@iis-git.ee.ethz.ch:pulp-sw/boot_code_new.git',
  path       = 'runtime/boot_code_multino',
  deps       = [rules, archi, hal, pulp_rt],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('build',   'make build install'),
  ],
  parameters = ['pulp_chip', 'pulp_compiler', 'pulp_rt_version', 'pulp_chip_version', 'install_name'],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  },
  restrict   = 'config.get("pulp_chip") == "multino" '
)

plplib = plp.Module(
  name       = 'plplib',
  url        = 'git@iis-git.ee.ethz.ch:pulp-apps/plplib.git',
  path       = 'libs/plplib',
  deps       = [pulp_rt],
  parameters = ['pulp_chip', 'pulp_compiler', 'pulp_rt_version', 'pulp_chip_version', 'install_name'],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('prepare', 'make header'),
    plp.BuildStep('build',   'make build install'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  },
  restrict   = "config.get('pulp_chip') not in ['gap', 'pulpissimo', 'pulp']"
)

oprecomp_capi = plp.Module(
  name       = 'oprecomp_capi',
  url        = 'git@iis-git.ee.ethz.ch:oprecomp/oprecomp.git',
  path       = 'runtime/oprecomp_capi',
  deps       = [vp, pulp_rt],
  parameters = ['pulp_chip', 'pulp_compiler', 'pulp_rt_version', 'pulp_chip_version', 'install_name'],
  steps      = [
    plp.BuildStep('clean',   'make -C kw clean'),
    plp.BuildStep('build',   'make -C kw all'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  },
  restrict   = "config.get('pulp_chip').find('oprecompkw') != -1"
)



auto_tiler = plp.Module(
  name  = 'auto-tiler',
  url   = 'git@gitlab.greenwaves-tech.com:gwt-property-sw/auto-tiler.git',
  path  = 'tools/auto-tiler',
  steps = [
    plp.BuildStep('checkout',   'make -f Makefile.pulp checkout'),
    plp.BuildStep('clean',   'make -f Makefile.pulp clean'),
    plp.BuildStep('build',   'make -f Makefile.pulp build'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  },
  restrict   = "config.get('pulp_chip') == 'gap'"
)



sdk_install = plp.Module(
  name       = 'sdk_install',
  path       = 'install',
  deps       = [pulp_tools],
  steps      = [
    plp.BuildStep('build',   'make all'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

doc = plp.Module(
  name       = 'doc',
  path       = 'doc',
  deps       = [pulp_rt],
  steps      = [
    plp.BuildStep('build',   'make all'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

hw_doc = plp.Module(
  name       = 'hw_doc',
  url        = 'git@iis-git.ee.ethz.ch:pulp-restricted/hw-doc.git',
  path       = 'misc/hw_doc',
  restrict   = "config.get('pulp_chip') != 'pulpissimo' and config.get('pulp_chip') != 'pulp'",
  deps       = [],
  steps      = [
    plp.BuildStep('build',   'make build'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

or10nv2_gcc = plp.Module(
  name  = 'or10nv2_gcc',
  url   = 'git@iis-git.ee.ethz.ch:pulp/or1k-gcc-toolchain-wrapper.git',
  path  = 'tools/or10nv2_gcc',
  steps = [
    plp.BuildStep('clean',   'make sdk.clean'),
    plp.BuildStep('prepare', 'make sdk.header'),
    plp.BuildStep('build',   'make sdk.build'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

riscv_gcc = plp.Module(
  name  = 'riscv_gcc',
  url   = 'git@iis-git.ee.ethz.ch:pulp-tools/riscv-pulp-gnu-toolchain.git',
  path  = 'tools/riscv_gcc',
  steps = [
    plp.BuildStep('build',   'make build RISCVV0=1'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

pulp_riscv_gcc = plp.Module(
  name  = 'pulp_riscv_gcc',
  url   = github + 'pulp-platform/pulp-riscv-gnu-toolchain.git',
  path  = 'tools/pulp-riscv-gcc',
  steps = [
    plp.BuildStep('checkout','make -f Makefile.pulp checkout'),
    plp.BuildStep('build',   'make -f Makefile.pulp build'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

quentin = plp.Module(
  name       = 'quentin',
  url        = 'git@iis-git.ee.ethz.ch:pulp-platform/quentin.git',
  path       = 'rtl/quentin',
  deps       = [],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('checkout','make checkout'),
    plp.BuildStep('build',   'make build install'),
  ]
)

pulpissimo = plp.Module(
  name       = 'pulpissimo',
  url        = github + 'pulp-platform/pulpissimo.git',
  path       = 'rtl/pulpissimo',
  deps       = [],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('checkout','make checkout'),
    plp.BuildStep('build',   'make build install'),
  ]
)

multino = plp.Module(
  name       = 'multino',
  url        = 'git@iis-git.ee.ethz.ch:akurth/multino',
  path       = 'rtl/multino',
  deps       = [],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('checkout','make checkout'),
    plp.BuildStep('build',   'make build install'),
  ]
) 

pulp = plp.Module(
  name       = 'pulp',
  url        = github + 'pulp-platform/pulp.git',
  path       = 'rtl/pulp',
  deps       = [],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('checkout','make checkout'),
    plp.BuildStep('build',   'make build install'),
  ]
)

wolfe = plp.Module(
  name       = 'wolfe',
  url        = 'git@iis-git.ee.ethz.ch:pulp-platform/mr-wolf.git',
  path       = 'rtl/wolfe',
  deps       = [],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('checkout','make checkout'),
    plp.BuildStep('build',   'make build install'),
  ]
)

devchip = plp.Module(
  name       = 'devchip',
  url        = 'git@iis-git.ee.ethz.ch:greenwaves-technologies/nextGAP.git',
  path       = 'rtl/devchip',
  deps       = [],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('checkout','make checkout'),
    plp.BuildStep('build',   'make build install'),
  ]
)

vega = plp.Module(
  name       = 'vega',
  url        = 'git@iis-git.ee.ethz.ch:pulp-restricted/vincent_vega.git',
  path       = 'rtl/vega',
  deps       = [],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('checkout','make checkout'),
    plp.BuildStep('build',   'make build install'),
  ]
)

gap = plp.Module(
  name       = 'gap',
  url        = 'git@iis-git.ee.ethz.ch:greenwaves-technologies/GAP.git',
  path       = 'rtl/gap',
  deps       = [],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('checkout','make checkout'),
    plp.BuildStep('build',   'make install_pre build install_post'),
  ]
)

fulmine = plp.Module(
  name       = 'fulmine',
  url        = 'git@iis-git.ee.ethz.ch:pulp-platform/fulmine.git',
  path       = 'rtl/fulmine',
  deps       = [],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('checkout','make checkout'),
    plp.BuildStep('build',   'make build install'),
  ]
)

vivosoc2 = plp.Module(
  name       = 'vivosoc2',
  url        = 'git@iis-git.ee.ethz.ch:pulp-platform/vivosoc2-fulmine.git',
  path       = 'rtl/vivosoc2',
  deps       = [],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('checkout','make checkout'),
    plp.BuildStep('build',   'make build'),
  ]
)

honey = plp.Module(
  name       = 'honey',
  url        = 'git@iis-git.ee.ethz.ch:pulp-platform/honey.git',
  path       = 'rtl/honey',
  deps       = [],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('checkout','make checkout'),
    plp.BuildStep('build',   'make build'),
  ]
)

vivosoc3 = plp.Module(
  name       = 'vivosoc3',
  url        = 'git@iis-git.ee.ethz.ch:pulp-platform/vivosoc3.git',
  path       = 'rtl/vivosoc3',
  deps       = [],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('checkout','make checkout'),
    plp.BuildStep('build',   'make build install'),
  ]
)



riscv_tests = plp.Module(
  name     = 'riscv_tests',
  url      = 'git@iis-git.ee.ethz.ch:pulp-sw/riscv_tests.git',
  path     = 'tests/riscv_tests',
  testsets = ['testset.cfg']
)

sequential_bare_tests = plp.Module(
  name     = 'sequential_bare_tests',
  url      = 'git@iis-git.ee.ethz.ch:pulp-sw/sequential_bare_tests.git',
  path     = 'tests/sequential_bare_tests',
  testsets = ['testset.cfg']
)

parallel_bare_tests = plp.Module(
  name     = 'parallel_bare_tests',
  url      = 'git@iis-git.ee.ethz.ch:pulp-sw/parallel_bare_tests.git',
  path     = 'tests/parallel_bare_tests',
  testsets = ['testset.cfg']
)

rt_tests = plp.Module(
  name     = 'rt-tests',
  url      = 'git@iis-git.ee.ethz.ch:pulp-tests/rt-tests.git',
  path     = 'tests/rt-tests',
  testsets = ['testset.cfg']
)

oprecomp_tests = plp.Module(
  name     = 'oprecomp-tests',
  url      = 'git@iis-git.ee.ethz.ch:oprecomp/oprecomp.git',
  path     = 'tests/oprecomp-tests',
  testsets = ['testset.cfg'],
  restrict   = "config.get('pulp_chip').find('oprecompkw') != -1"
)

rt_examples = plp.Module(
  name     = 'pulp-rt-examples',
  url      = github + 'pulp-platform/pulp-rt-examples.git',
  path     = 'examples/pulp-rt-examples',
  testsets = ['testset.cfg']
)

pulp_tests = plp.Module(
  name     = 'pulp_tests',
  url      = 'git@iis-git.ee.ethz.ch:pulp-sw/pulp_tests.git',
  path     = 'tests/pulp_tests',
  testsets = ['testset.cfg']
)

ml_tests = plp.Module(
  name     = 'ml_tests',
  url      = 'git@iis-git.ee.ethz.ch:pulp-tests/ml_tests.git',
  path     = 'tests/ml_tests',
  testsets = ['testset.cfg']
)

gomp_tests = plp.Module(
  name     = 'gomp_tests',
  url      = 'git@iis-git.ee.ethz.ch:pulp-apps/gomp_tests.git',
  path     = 'apps/gomp_tests',
  #testsets = ['testset.cfg']
)


autotiler_examples = plp.Module(
  name     = 'autotiler_examples',
  url      = 'git@gitlab.greenwaves-tech.com:gwt_app_developer/autotiler_examples.git',
  path     = 'examples/autotiler_examples',
  restrict   = "config.get('pulp_chip') == 'gap'",
  steps      = [
    plp.BuildStep('build', 'make build'),
  ]
)



#
# GROUPS
#

tools_modules    = [pulp_tools, pulp_configs, pc_analyzer]
examples_modules = [ ]

if has_gw_gitlab:
  tools_modules    += [ auto_tiler ]
  examples_modules += [ autotiler_examples ]


platform = plp.Group('platform', [pulp_tools, pulp_configs, rules, archi, vp, jtag_bridge, json_tools, pulp_debug_bridge, dpi_models, runner] )
runtime  = plp.Group('runtime',  [pulp_tools, pulp_configs, rules, json_tools, pulp_debug_bridge, archi, archi_host, archi_analog, hal_analog, hal, boot_code, boot_code_vega, boot_code_multino, pulp_rt, pulp_rt_analog, pulp_rt_bare, pulp_rt_tiny, libgomp, libvmm, oprecomp_capi, runner] )
tools  = plp.Group('tools',  tools_modules )
pkg    = plp.Group('pkg',  [doc, sdk_install] )
libs   = plp.Group('libs',  [] )
examples = plp.Group('examples', examples_modules )


#
# PACKAGES
#

or10nv2_gcc = plp.Package(
  name       = 'or10nv2_gcc',
  path       = 'or10nv2_gcc',
  modules    = [ or10nv2_gcc ],
  artifact   = True,
  restrict   = "config.get('pulp_compiler') == 'gcc' and (config.get('fc/version') == 'or10nv2' or config.get('pe/version') == 'or10nv2')",
  env        = { 'OR10NV2_GCC_TOOLCHAIN' : 'self.get_absolute_path()'},
  sourceme   = [ [ 'property_eval', 'OR10NV2_GCC_TOOLCHAIN', 'self.get_absolute_path()', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))' ] ]
)

riscv_gcc = plp.Package(
  name       = 'riscv_gcc',
  path       = 'riscv_gcc',
  modules    = [ riscv_gcc ],
  artifact   = True,
  restrict   = "config.get('pulp_compiler') == 'gcc' and (config.get('pe/version') == 'ri5cyv1' or config.get('pe/version') == 'ri5cy')",
  env        = { 'RISCV_GCC_TOOLCHAIN' : 'self.get_absolute_path()'},
  sourceme   = [ [ 'property_eval', 'RISCV_GCC_TOOLCHAIN', 'self.get_absolute_path()', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'] ],
)

pulp_riscv_gcc = plp.Package(
  name       = 'pulp_riscv_gcc',
  path       = 'pulp_riscv_gcc',
  modules    = [ pulp_riscv_gcc ],
  artifact   = True,
  restrict   = "config.get('pulp_compiler') == 'gcc' and (config.get('fc/archi') == 'riscv' or config.get('pe/archi') == 'riscv')",
  env        = { 'PULP_RISCV_GCC_TOOLCHAIN_CI' : 'self.get_absolute_path()', 'PULP_RISCV_GCC_VERSION': '"3"' },
  sourceme   = [ [ 'property_eval', 'PULP_RISCV_GCC_TOOLCHAIN_CI', 'self.get_absolute_path()', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'],
                 [ 'property', 'PULP_RISCV_GCC_VERSION', '3' ] ],
)

riscv64_gcc = plp.Package(
  name       = 'riscv64_gcc',
  path       = 'riscv64_gcc',
  modules    = [ ],
  artifact   = True,
  restrict   = "config.get('pulp_compiler') == 'gcc' and config.get('host/version') == 'ariane'",
  env        = { 'RISCV64_GCC_TOOLCHAIN' : 'self.get_absolute_path()'},
  sourceme   = [ [ 'property_eval', 'RISCV64_GCC_TOOLCHAIN', 'self.get_absolute_path()', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'] ],
)

quentin = plp.Package(
  name       = 'quentin',
  path       = 'rtl/quentin',
  modules    = [ quentin ],
  artifact   = False,
  env        = { 'PULP_RTL_QUENTIN' : 'self.get_absolute_path()'},
  sourceme   = [ [ 'property_eval', 'PULP_RTL_QUENTIN', 'self.get_absolute_path()', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'] ],
  restrict   = "config.get('platform') == 'rtl' and config.get('pulp_chip') == 'quentin'"
)

pulpissimo = plp.Package(
  name       = 'pulpissimo',
  path       = 'rtl/pulpissimo',
  modules    = [ pulpissimo ],
  artifact   = False,
  env        = { 'PULP_RTL_PULPISSIMO' : 'self.get_absolute_path()'},
  sourceme   = [ [ 'property_eval', 'PULP_RTL_PULPISSIMO', 'self.get_absolute_path()', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'] ],
  restrict   = "config.get('platform') == 'rtl' and config.get('pulp_chip') == 'pulpissimo'"
)

multino = plp.Package(
  name       = 'multino',
  path       = 'rtl/multino',
  modules    = [ multino ],
  artifact   = False,
  env        = { 'PULP_RTL_MULTINO' : 'self.get_absolute_path()'},
  sourceme   = [ [ 'property_eval', 'PULP_RTL_MULTINO', 'self.get_absolute_path()', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'] ],
  restrict   = "config.get('platform') == 'rtl' and config.get('pulp_chip') == 'multino'"
)

pulp = plp.Package(
  name       = 'pulp',
  path       = 'rtl/pulp',
  modules    = [ pulp ],
  artifact   = False,
  env        = { 'PULP_RTL_PULP' : 'self.get_absolute_path()'},
  sourceme   = [ [ 'property_eval', 'PULP_RTL_PULP', 'self.get_absolute_path()', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'] ],
  restrict   = "config.get('platform') == 'rtl' and config.get('pulp_chip') == 'pulp'"
)

wolfe = plp.Package(
  name       = 'wolfe',
  path       = 'rtl/wolfe',
  modules    = [ wolfe ],
  artifact   = False,
  env        = { 'PULP_RTL_WOLFE' : 'os.path.join(self.get_absolute_path(), "wolfe")'},
  sourceme   = [ [ 'property_eval', 'PULP_RTL_WOLFE', 'os.path.join(self.get_absolute_path(), "wolfe")', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'] ],
  restrict   = "config.get('platform') == 'rtl' and config.get('pulp_chip') == 'wolfe'"
)

devchip = plp.Package(
  name       = 'devchip',
  path       = 'rtl/devchip',
  modules    = [ devchip ],
  artifact   = False,
  env        = { 'PULP_RTL_DEVCHIP' : 'os.path.join(self.get_absolute_path(), "devchip")'},
  sourceme   = [ [ 'property_eval', 'PULP_RTL_DEVCHIP', 'os.path.join(self.get_absolute_path(), "devchip")', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'] ],
  restrict   = "config.get('platform') == 'rtl' and config.get('pulp_chip') == 'devchip'"
)

vega = plp.Package(
  name       = 'vega',
  path       = 'rtl/vega',
  modules    = [ vega ],
  artifact   = False,
  env        = { 'PULP_RTL_VEGA' : 'os.path.join(self.get_absolute_path(), "vega")'},
  sourceme   = [ [ 'property_eval', 'PULP_RTL_VEGA', 'os.path.join(self.get_absolute_path(), "vega")', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'] ],
  restrict   = "config.get('platform') == 'rtl' and config.get('pulp_chip') == 'vega'"
)

gap = plp.Package(
  name       = 'gap',
  path       = 'rtl/gap',
  modules    = [ gap ],
  artifact   = False,
  env        = { 'PULP_RTL_GAP' : 'os.path.join(self.get_absolute_path(), "gap")'},
  sourceme   = [ [ 'property_eval', 'PULP_RTL_GAP', 'os.path.join(self.get_absolute_path(), "gap")', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'] ],
  restrict   = "config.get('platform') == 'rtl' and config.get('pulp_chip') == 'gap'"
)

vivosoc2 = plp.Package(
  name       = 'vivosoc2',
  path       = 'rtl/vivosoc2',
  modules    = [ vivosoc2 ],
  artifact   = False,
  env        = { 'PULP_RTL_VIVOSOC2' : 'os.path.join(self.get_absolute_path(), "vivosoc2")'},
  sourceme   = [ [ 'property_eval', 'PULP_RTL_VIVOSOC2', 'os.path.join(self.get_absolute_path(), "vivosoc2")', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'] ],
  restrict   = "config.get('platform') == 'rtl' and config.get('pulp_chip') == 'vivosoc2'"
)

fulmine = plp.Package(
  name       = 'fulmine',
  path       = 'rtl/fulmine',
  modules    = [ fulmine ],
  artifact   = False,
  env        = { 'PULP_RTL_FULMINE' : 'os.path.join(self.get_absolute_path(), "fulmine")'},
  sourceme   = [ [ 'property_eval', 'PULP_RTL_FULMINE', 'os.path.join(self.get_absolute_path(), "fulmine")', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'] ],
  restrict   = "config.get('platform') == 'rtl' and config.get('pulp_chip') == 'fulmine'"
)

honey = plp.Package(
  name       = 'honey',
  path       = 'rtl/honey',
  modules    = [ honey ],
  artifact   = False,
  env        = { 'PULP_RTL_HONEY' : 'os.path.join(self.get_absolute_path(), "honey")'},
  sourceme   = [ [ 'property_eval', 'PULP_RTL_HONEY', 'os.path.join(self.get_absolute_path(), "honey")', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'] ],
  restrict   = "config.get('platform') == 'rtl' and config.get('pulp_chip') == 'honey'"
)

vivosoc3 = plp.Package(
  name       = 'vivosoc3',
  path       = 'rtl/vivosoc3',
  modules    = [ vivosoc3 ],
  artifact   = False,
  env        = { 'PULP_RTL_VIVOSOC3' : 'os.path.join(self.get_absolute_path(), "vivosoc3")'},
  sourceme   = [ [ 'property_eval', 'PULP_RTL_VIVOSOC3', 'os.path.join(self.get_absolute_path(), "vivosoc3")', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'] ],
  restrict   = "config.get('platform') == 'rtl' and config.get('pulp_chip') == 'vivosoc3'"
)

sdk = plp.Package(
  name       = 'sdk',
  path       = 'sdk',
  modules    = [ ],
  groups     = [ platform, runtime, libs, tools, pkg, examples ],
  build_deps = [ plp.PkgDep(or10nv2_gcc), plp.PkgDep(riscv_gcc), plp.PkgDep(pulp_riscv_gcc)],
  exec_deps  = [ plp.PkgDep(or10nv2_gcc), plp.PkgDep(riscv_gcc), plp.PkgDep(pulp_riscv_gcc),
                 plp.PkgDep(quentin), plp.PkgDep(pulpissimo), plp.PkgDep(multino), plp.PkgDep(pulp), plp.PkgDep(gap), plp.PkgDep(vivosoc3), plp.PkgDep(wolfe), plp.PkgDep(vega), plp.PkgDep(devchip), plp.PkgDep(honey),
                 plp.PkgDep(fulmine), plp.PkgDep(vivosoc2) ],
  artifact   = True,
  env        = { 'PULP_SDK_HOME'       : 'self.get_absolute_path()',
                 'PULP_SDK_INSTALL'    : 'os.path.join(self.get_absolute_path(), "install")',
                 'PULP_SDK_WS_INSTALL' : 'os.path.join(self.get_absolute_path(), "install", "ws")',
                 'TARGET_INSTALL_DIR'    : 'os.path.join(self.get_absolute_path(), "install")',
                 'INSTALL_DIR' : 'os.path.join(self.get_absolute_path(), "install", "ws")',
                 'DEP_DIRS' : 'os.path.join(self.get_absolute_path(), "install", "ws")'
               },
  sourceme   = [ [ 'property_eval', 'PULP_SDK_HOME',       'self.get_absolute_path()', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'],
                 [ 'property',      'PULP_SDK_INSTALL',    '$PULP_SDK_HOME/install' ],
                 [ 'property',      'PULP_SDK_WS_INSTALL', '$PULP_SDK_HOME/install/ws' ],
                 [ 'sourceme',      '$PULP_SDK_HOME/env/setup.sh', '$PULP_SDK_HOME/env/setup.csh' ],
               ]
)


tests = plp.Package(
  name       = 'tests',
  modules    = [ rt_examples, rt_tests, oprecomp_tests, ml_tests, pulp_tests, gomp_tests, riscv_tests, sequential_bare_tests, parallel_bare_tests ],
  build_deps = [ plp.PkgDep(sdk) ],
)



c['packages'] = [ or10nv2_gcc, pulp_riscv_gcc, riscv_gcc, sdk, tests, quentin, multino, pulpissimo, pulp, gap, wolfe, devchip, vega, honey, vivosoc3, vivosoc2, fulmine ]




#
# GLOBAL CONFIGURATION
#

c['build_steps'] = plp.BuildSteps([
  plp.BuildStepMap('checkout', ['checkout']),
  plp.BuildStepMap('clean',    ['clean']),
  plp.BuildStepMap('build',    ['prepare', 'build']),
  plp.BuildStepMap('deploy',   ['deploy']),
])

c['artifact_cache'] = '/usr/pack/pulpsdk-1.0-kgf/artifactory'

c['artifactory_servers'] = [
  plp.ArtifactoryServer(name='eth',   url='https://iis-artifactory.ee.ethz.ch/artifactory/release',         ssl_verify=True),
  plp.ArtifactoryServer(name='unibo', url="https://artifactory.eees.dei.unibo.it:8081/artifactory/release", ssl_verify=False),
]

c['system_configs'] = ['configs/pulp.json']

c['root_build_dir'] = 'os.path.join(os.environ.get("PULP_PROJECT_HOME"), "build")'

c['env'] = {'ROOT_BUILD_DIR' : 'os.path.join(os.environ.get("PULP_PROJECT_HOME"), "build")',
           }
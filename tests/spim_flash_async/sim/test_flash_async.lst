
test_flash_async:     formato del file elf32-littleriscv
test_flash_async
architettura: riscv:rv32, flag 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
indirizzo di partenza 0x1c000880

Program Header:
    LOAD off    0x00000004 vaddr 0x00000004 paddr 0x1c000004 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-
    LOAD off    0x00000800 vaddr 0x1c000800 paddr 0x1c000800 align 2**12
         filesz 0x00004600 memsz 0x00004600 flags r-x
    LOAD off    0x00005000 vaddr 0x1c008000 paddr 0x1c008000 align 2**12
         filesz 0x000111b0 memsz 0x000119b0 flags rw-
    LOAD off    0x00000004 vaddr 0x10000004 paddr 0x1c0199b0 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-
    LOAD off    0x00000010 vaddr 0x10000010 paddr 0x1c0199b0 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-
    LOAD off    0x000009cc vaddr 0x1c0199cc paddr 0x1c0199cc align 2**12
         filesz 0x00000000 memsz 0x00000004 flags rw-

Sezioni:
Idx Name                        Size      VMA       LMA       File off  Algn  Flag
  0 .data_tiny_fc               0000000c  00000004  1c000004  00001004  2**2  ALLOC
  1 .vectors                    00000080  1c000800  1c000800  00000800  2**0  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text                       00004580  1c000880  1c000880  00000880  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata                     00000bd4  1c008000  1c008000  00005000  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .srodata.xISRStackTop       00000004  1c008bd4  1c008bd4  00005bd4  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .srodata._global_impure_ptr 00000004  1c008bd8  1c008bd8  00005bd8  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data                       0000006c  1c008bdc  1c008bdc  00005bdc  2**2  CONTENTS, ALLOC, LOAD, DATA
  7 .bss                        0000055c  1c008c48  1c008c48  00005c48  2**3  ALLOC
  8 .heap                       00010000  1c0091b0  1c0091b0  000061b0  2**4  CONTENTS, ALLOC, LOAD, DATA
  9 .stack                      00000800  1c0191b0  1c0191b0  000161b0  2**4  ALLOC
 10 .l2_data                    00000000  1c0199b0  1c0199b0  000161b0  2**0  CONTENTS
 11 .data_tiny_l1               0000000c  10000004  1c0199b0  00017004  2**0  ALLOC
 12 .l1cluster_g                00000010  10000010  1c0199b0  00017010  2**0  ALLOC
 13 .heap_l1_cluster            00000000  10000020  10000020  000161b0  2**0  CONTENTS
 14 .heap_l2_shared             00000004  1c0199cc  1c0199cc  000169cc  2**0  ALLOC
 15 .debug_info                 0000f995  00000000  00000000  000161b0  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev               000031f1  00000000  00000000  00025b45  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc                  00008ca6  00000000  00000000  00028d36  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges              00000a08  00000000  00000000  000319e0  2**3  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges               000012e0  00000000  00000000  000323e8  2**3  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro                00006195  00000000  00000000  000336c8  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line                 00012860  00000000  00000000  0003985d  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str                  0001e4fc  00000000  00000000  0004c0bd  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment                    00000012  00000000  00000000  0006a5b9  2**0  CONTENTS, READONLY
 24 .riscv.attributes           0000002f  00000000  00000000  0006a5cb  2**0  CONTENTS, READONLY
 25 .debug_frame                00001c18  00000000  00000000  0006a5fc  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000004 l    d  .data_tiny_fc	00000000 .data_tiny_fc
1c000800 l    d  .vectors	00000000 .vectors
1c000880 l    d  .text	00000000 .text
1c008000 l    d  .rodata	00000000 .rodata
1c008bd4 l    d  .srodata.xISRStackTop	00000000 .srodata.xISRStackTop
1c008bd8 l    d  .srodata._global_impure_ptr	00000000 .srodata._global_impure_ptr
1c008bdc l    d  .data	00000000 .data
1c008c48 l    d  .bss	00000000 .bss
1c0091b0 l    d  .heap	00000000 .heap
1c0191b0 l    d  .stack	00000000 .stack
1c0199b0 l    d  .l2_data	00000000 .l2_data
10000004 l    d  .data_tiny_l1	00000000 .data_tiny_l1
10000010 l    d  .l1cluster_g	00000000 .l1cluster_g
10000020 l    d  .heap_l1_cluster	00000000 .heap_l1_cluster
1c0199cc l    d  .heap_l2_shared	00000000 .heap_l2_shared
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 target/pulp/vectors.o
1c000800 l       .vectors	00000000 vector_table
00000000 l    df *ABS*	00000000 kernel/portable/GCC/RISC-V/portASM.o
1c000978 l       .text	00000000 test_if_asynchronous
1c00098e l       .text	00000000 handle_synchronous
1c000980 l       .text	00000000 handle_asynchronous
1c0009be l       .text	00000000 processed_source
1c000992 l       .text	00000000 test_if_environment_call
1c0009aa l       .text	00000000 is_exception
1c0009b8 l       .text	00000000 as_yet_unhandled
1c000e26 l       .text	00000000 chip_specific_stack_frame
00000000 l    df *ABS*	00000000 fc_event.c
1c003382 l     F .text	00000002 fc_event_null_event
1c008e04 l     O .bss	000002a0 fc_event_handlers
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 queue.c
1c000f46 l     F .text	0000001e prvIsQueueEmpty
1c000f64 l     F .text	00000086 prvCopyDataToQueue
1c000fea l     F .text	0000001e prvCopyDataFromQueue
1c001008 l     F .text	00000082 prvUnlockQueue
1c008308 l     O .rodata	0000000e __func__.10
1c008318 l     O .rodata	00000012 __func__.11
1c00832c l     O .rodata	00000019 __func__.12
1c008348 l     O .rodata	00000012 __func__.13
1c00835c l     O .rodata	0000001e __func__.14
1c00837c l     O .rodata	00000014 __func__.18
1c008390 l     O .rodata	00000013 __func__.19
1c0083a4 l     O .rodata	0000000d __func__.2
1c0083b4 l     O .rodata	00000015 __func__.7
1c0083cc l     O .rodata	00000014 __func__.9
00000000 l    df *ABS*	00000000 tasks.c
1c00194a l     F .text	000000ae prvAddCurrentTaskToDelayedList
1c0019f8 l     F .text	0000001e prvResetNextTaskUnblockTime
1c0022f6 l     F .text	00000056 prvIdleTask
1c008c88 l     O .bss	00000064 pxReadyTasksLists
1c008cec l     O .bss	00000014 xDelayedTaskList1
1c008d00 l     O .bss	00000014 xDelayedTaskList2
1c008d14 l     O .bss	00000014 xPendingReadyList
1c008d28 l     O .bss	00000014 xSuspendedTaskList
1c008d3c l     O .bss	00000014 xTasksWaitingTermination
1c0085a0 l     O .rodata	00000016 __func__.11
1c0085b8 l     O .rodata	00000013 __func__.12
1c0085cc l     O .rodata	00000013 __func__.13
1c0085e0 l     O .rodata	0000000f __func__.18
1c0085f0 l     O .rodata	00000014 __func__.19
1c008604 l     O .rodata	00000024 __func__.3
1c008628 l     O .rodata	00000018 __func__.4
1c008640 l     O .rodata	00000015 __func__.5
1c008658 l     O .rodata	00000019 __func__.8
1c008674 l     O .rodata	00000020 __func__.9
1c009134 l     O .bss	00000004 pxDelayedTaskList
1c009138 l     O .bss	00000004 pxOverflowDelayedTaskList
1c00913c l     O .bss	00000004 uxCurrentNumberOfTasks
1c009140 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
1c009144 l     O .bss	00000004 uxSchedulerSuspended
1c009148 l     O .bss	00000004 uxTaskNumber
1c00914c l     O .bss	00000004 uxTopReadyPriority
1c009150 l     O .bss	00000004 xIdleTaskHandle
1c009154 l     O .bss	00000004 xNextTaskUnblockTime
1c009158 l     O .bss	00000004 xNumOfOverflows
1c00915c l     O .bss	00000004 xPendedTicks
1c009160 l     O .bss	00000004 xSchedulerRunning
1c009164 l     O .bss	00000004 xTickCount
1c009168 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1c002522 l     F .text	0000005e prvCheckForValidListAndQueue
1c002580 l     F .text	00000040 prvInsertTimerInActiveList
1c002754 l     F .text	000001c6 prvTimerTask
1c00268c l     F .text	000000c8 prvSampleTimeNow
1c008d50 l     O .bss	00000014 xActiveTimerList1
1c008d64 l     O .bss	00000014 xActiveTimerList2
1c008750 l     O .rodata	00000015 __func__.10
1c008768 l     O .rodata	0000001b __func__.12
1c008784 l     O .rodata	00000017 __func__.13
1c00879c l     O .rodata	00000014 __func__.14
1c0087b0 l     O .rodata	00000016 __func__.16
1c00916c l     O .bss	00000004 pxCurrentTimerList
1c009170 l     O .bss	00000004 pxOverflowTimerList
1c009174 l     O .bss	00000004 xLastTime.15
1c009178 l     O .bss	00000004 xTimerQueue
1c00917c l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1c008844 l     O .rodata	00000014 __func__.0
00000000 l    df *ABS*	00000000 heap_3.c
00000000 l    df *ABS*	00000000 syscalls.c
1c008c3c l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 pulp_malloc.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 spim-v3.c
00000000 l    df *ABS*	00000000 common_spi.c
00000000 l    df *ABS*	00000000 abstraction_layer_spi.c
1c002c7c l     F .text	00000024 hal_soc_eu_clear_fc_mask
00000000 l    df *ABS*	00000000 fll.c
1c008df8 l     O .bss	0000000c flls_frequency
00000000 l    df *ABS*	00000000 timer_irq.c
00000000 l    df *ABS*	00000000 irq.c
00000000 l    df *ABS*	00000000 soc_eu.c
00000000 l    df *ABS*	00000000 pmsis_task.c
1c0033da l     F .text	00000032 __os_native_api_sem_give
1c00340c l     F .text	0000002e __os_native_api_sem_take
00000000 l    df *ABS*	00000000 device.c
00000000 l    df *ABS*	00000000 test_spi_async.c
1c003502 l     F .text	00000252 test_entry
1c003754 l     F .text	0000000a test_kickoff
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1c003aa0 l     F .text	00000028 __sfputc_r
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
1c0090a4 l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1c004568 l     F .text	0000006a std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 impure.c
1c008bdc l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1c008bdc l       .data	00000000 __fini_array_end
1c008bdc l       .data	00000000 __fini_array_start
1c008bdc l       .data	00000000 __init_array_end
1c008bdc l       .data	00000000 __preinit_array_end
1c008bdc l       .data	00000000 __init_array_start
1c008bdc l       .data	00000000 __preinit_array_start
1c002b42 g     F .text	00000004 pi_spi_send_async
1c004d72 g     F .text	0000002c _isatty_r
1c003ee0 g     F .text	00000022 cleanup_glue
1c0029d4 g     F .text	00000004 _getpid
1c003df4 g     F .text	000000de _puts_r
1c002a6e g     F .text	00000004 pi_l2_malloc
1c004d9e g     F .text	00000030 _lseek_r
00000010 g       .data_tiny_fc	00000000 __l1FcShared_start
1c004078 g     F .text	0000002e _kill_r
1c003db4 g     F .text	00000040 printf
1c0093dc g       *ABS*	00000000 __global_pointer$
1c004cac g     F .text	00000036 __sseek
1c000800 g       .vectors	00000000 __vector_start
1c004624 g     F .text	00000070 __sinit
1c0199b0 g       .stack	00000000 __l1_preload_start_inL2
10000010 g       .data_tiny_l1	00000000 __data_tiny_l1_end
1c0040aa g     F .text	000000c0 __swbuf_r
1c0018f0 g     F .text	0000005a vQueueWaitForMessageRestricted
1c0045dc g     F .text	00000048 __sfmoreglue
1c002a6a g     F .text	00000004 __malloc_unlock
1c00200c g     F .text	0000001a vTaskEnterCritical
1c001356 g     F .text	000000d0 xQueueGenericSendFromISR
1c002a8a g     F .text	0000004a system_init
10000020 g       .heap_l1_cluster	00000000 __l1_heapsram_start
1c009130 g     O .bss	00000004 pxCurrentTCB
1c004d44 g     F .text	0000002e _fstat_r
1c00919c g     O .bss	00000004 errno
1c004dfe g       .text	00000000 _etext
1c002c12 g     F .text	00000012 __pi_spim_get_cs_data
1c0032ee g     F .text	00000020 pi_freq_get
00000800 g       *ABS*	00000000 __stack_size
1c008bdc g       .data	00000000 sdata
1c000880 g       *ABS*	00000000 __boot_address
1c00332a g     F .text	0000000c irq_enable
1c001d6e g     F .text	0000000e vTaskInternalSetTimeOutState
1c00334a g     F .text	00000038 soc_eu_event_init
1c00291a g     F .text	00000050 xPortStartScheduler
1c000e64 g     F .text	00000016 memcpy
1c001c46 g     F .text	00000042 vTaskPlaceOnEventList
1c0033c4 g     F .text	00000016 pi_fc_event_handler_clear
1c0045d2 g     F .text	0000000a _cleanup_r
1c002aee g     F .text	00000018 vPortSetupTimerInterrupt
1c003148 g     F .text	0000001e spim_tx_handler
1c003ed2 g     F .text	0000000e puts
1c002992 g     F .text	00000020 vPortFree
1c0199b0 g       .stack	00000000 __freertos_irq_stack_top
1c002ca0 g     F .text	00000126 __pi_spi_receive_async
1c000e42 g     F .text	00000022 fc_soc_event_handler
1c00161e g     F .text	00000192 xQueueSemaphoreTake
1c003908 g     F .text	0000000c malloc
1c004008 g     F .text	00000062 _raise_r
1c0029cc g     F .text	00000008 _fstat
1c0037c8 g     F .text	00000040 __assert_func
1c008c48 g       .bss	00000000 _bss_start
1c008c48 g       .data	00000000 edata
1c000ee0 g     F .text	00000018 vListInsertEnd
1c0040a6 g     F .text	00000004 _getpid_r
1c008c3c g       .data	00000000 __sdata_begin
1c00322c g     F .text	00000034 pi_fll_get_frequency
1c0199d0 g       .heap_l2_shared	00000000 __heap_l2_shared_start
1c008bdc g       .data	00000000 _sdata
1c003fdc g     F .text	0000002c _sbrk_r
1c002b46 g     F .text	00000034 pi_spi_send
1c004dce g     F .text	00000030 _read_r
1c000eda g     F .text	00000006 vListInitialiseItem
1c0091b0 g     O .heap	00010000 ucHeap
1c0014d4 g     F .text	0000014a xQueueReceive
1c008c48 g     O .bss	00000040 xQueueRegistry
1c00918c g     O .bss	00000004 rx_buffer_2
1c0029d8 g     F .text	00000008 _isatty
1c008bd8 g     O .srodata._global_impure_ptr	00000004 _global_impure_ptr
0000001c g       *ABS*	00000000 __l1_preload_size
1c0038a2 g     F .text	00000066 __libc_init_array
1c0091a4 g       .bss	00000000 __bss_end
1c003260 g     F .text	0000008e pi_fll_init
1c0199b0 g       .stack	00000000 stack
10000020 g       .heap_l1_cluster	00000000 __heap_l1_cluster_start
1c0034e0 g     F .text	0000001e pi_task_release
1c0037b8 g     F .text	00000010 abort
1c002c4a g     F .text	00000032 __pi_spi_clk_div_get
1c002a3e g     F .text	00000028 _sbrk
1c00296a g     F .text	00000028 pvPortMalloc
1c0008de g     F .text	00000002 _init
1c0018b8 g     F .text	00000038 vQueueDelete
1c000ec6 g     F .text	00000014 vListInitialise
0000ffe0 g       *ABS*	00000000 __heapsram_size
1c0091a4 g       .bss	00000000 _bss_end
1c001a22 g     F .text	00000006 xTaskGetTickCount
1c0011d8 g     F .text	0000017e xQueueGenericSend
1c003840 g     F .text	0000003a __libc_fini_array
1c002b06 g     F .text	00000010 vSystemIrqHandler
1c00333c g     F .text	0000000e pulp_irq_init
1c003f02 g     F .text	000000da _reclaim_reent
1c000b00 g       .text	00000000 freertos_risc_v_ctxt_handler
1c001e4c g     F .text	000000d2 xTaskPriorityDisinherit
0000ffe0 g       *ABS*	00000000 __l1_heapsram_size
1c000900 g       .text	00000000 freertos_risc_v_trap_handler
1c0191b0 g       .stack	00000000 stack_start
1c003184 g     F .text	00000018 vApplicationMallocFailedHook
1c001cd4 g     F .text	0000009a xTaskRemoveFromEventList
1c002ecc g     F .text	00000184 __pi_spi_open
1c00387a g     F .text	00000028 fprintf
1c009190 g     O .bss	00000004 tx_buffer
1c0199b0 g       .stack	00000000 __stack_top
00000000 g     O *ABS*	00000004 __heap_size
1c002c24 g     F .text	0000001e __pi_spim_cs_data_del
1c008c40 g     O .data	00000004 system_core_clock
1c0089f4 g     O .rodata	00000020 __sf_fake_stderr
1c008bd4 g     O .srodata.xISRStackTop	00000004 xISRStackTop
1c00188a g     F .text	0000002e vQueueUnregisterQueue
1c00250a g     F .text	00000018 pvTaskIncrementMutexHeldCount
1c000e8a g     F .text	0000003c .hidden __clzsi2
1c00330e g     F .text	0000001c timer_irq_init
1c003ac8 g     F .text	00000044 __sfputs_r
1c00489a g     F .text	0000001a memchr
1c002458 g     F .text	000000b2 xTaskCheckForTimeOut
1c003920 g     F .text	000000a8 _free_r
1c0091a0 g     O .bss	00000004 _global_atexit
1c001d98 g     F .text	000000b4 xTaskPriorityInherit
1c0199b0 g       .l2_data	00000000 __cluster_text_start
1c0042f2 g     F .text	000000c8 __call_exitprocs
1c000880 g     F .text	0000005e _start
1c001a16 g     F .text	0000000c vTaskSuspendAll
1c0029ea g     F .text	00000004 _lseek
1c0033b6 g     F .text	0000000e pi_fc_event_handler_set
00066630 g       *ABS*	00000000 __heapl2ram_size
1c000f26 g     F .text	00000020 uxListRemove
1c004276 g     F .text	0000007c __register_exitproc
1c002bbe g     F .text	00000036 __pi_spim_drv_fifo_enqueue
1c001b76 g     F .text	000000d0 vTaskSwitchContext
1c001c88 g     F .text	0000004c vTaskPlaceOnEventListRestricted
1c004d18 g     F .text	0000002c _close_r
1c002b7e g     F .text	00000034 pi_spi_receive
1c003050 g     F .text	00000088 __pi_spi_close
1c003336 g     F .text	00000006 irq_clint_global_enable
1c002b16 g     F .text	00000020 pi_spi_conf_init
1c002614 g     F .text	00000078 xTimerGenericCommand
1c00416a g     F .text	0000010c __swsetup_r
1c00319c g     F .text	00000018 vApplicationStackOverflowHook
1c004694 g     F .text	000000a2 __sfp
1c004c2e g     F .text	00000030 __sread
1c002b36 g     F .text	00000006 pi_spi_open
1c002a66 g     F .text	00000004 __malloc_lock
1c002bf4 g     F .text	0000001e __pi_spim_drv_fifo_pop
1c004502 g     F .text	00000066 _fflush_r
1c0199b0 g       .stack	00000000 __l2_priv1_end
1c002bb8 g     F .text	00000006 active_irq
1c008a14 g     O .rodata	00000020 __sf_fake_stdin
1c008c48 g       .bss	00000000 __bss_start
1c002b3c g     F .text	00000006 pi_spi_close
1c002b7a g     F .text	00000004 pi_spi_receive_async
1c000e7a g     F .text	00000010 memset
1c00375e g     F .text	0000005a main
1c009188 g     O .bss	00000004 rx_buffer_1
1c000ef8 g     F .text	0000002e vListInsert
1c002c42 g     F .text	00000008 __pi_spim_cs_data_add
1c004ce2 g     F .text	00000006 __sclose
1c0025c0 g     F .text	00000054 xTimerCreateTimerTask
1c0039c8 g     F .text	000000d8 _malloc_r
1c004e00 g       .text	00000000 __l2_priv0_end
1c008d78 g     O .bss	00000080 isr_table
1c0199d0 g       .heap_l2_shared	00000000 __heapl2ram_start
1c008bdc g       .data	00000000 __data_begin
1c0017b0 g     F .text	000000ae xQueueReceiveFromISR
0000ffe0 g       *ABS*	00000000 __heap_l1_cluster_size
1c001114 g     F .text	0000006e xQueueGenericCreate
1c002ad4 g     F .text	0000001a system_core_clock_update
1c0191b0 g       .heap	00000000 __heap_end
1c001182 g     F .text	00000056 xQueueCreateCountingSemaphore
00000000 g       *ABS*	00000000 __l1FcShared_size
1c003384 g     F .text	00000032 pi_fc_event_handler_init
1c009180 g     O .bss	00000008 __g_spim_drv_data
1c0008de g     F .text	00000002 _fini
1c003db4 g     F .text	00000040 iprintf
1c00234c g     F .text	0000010c xTaskResumeAll
1c008ad4 g     O .rodata	00000100 .hidden __clz_tab
1c00226a g     F .text	0000008c vTaskStartScheduler
1c0034b6 g     F .text	0000002a __pi_task_wait_on
1c003808 g     F .text	0000000c atexit
1c004ce8 g     F .text	00000030 _write_r
1c000d00 g       .text	00000000 xPortStartFirstTask
1c0048b4 g     F .text	0000010c _printf_common
1c00343a g     F .text	00000048 __pi_task_block
1c008c44 g     O .data	00000004 _impure_ptr
1c0191b0 g       .stack	00000000 __stack_bottom
1c0043ba g     F .text	00000148 __sflush_r
00066630 g       *ABS*	00000000 __heap_l2_shared_size
1c001d7c g     F .text	00000008 vTaskMissedYield
1c002dc6 g     F .text	00000106 __pi_spi_send_async
1c0091b0 g       .heap	00000000 __heap_start
1c00185e g     F .text	0000002c vQueueAddToRegistry
1c001a28 g     F .text	0000014e xTaskIncrementTick
1c003166 g     F .text	0000001e spim_rx_handler
1c0047a0 g     F .text	0000005a __swhatbuf_r
10000020 g       .heap_l1_cluster	00000000 __heapsram_start
1c000800 g       .vectors	00000000 __irq_vector_base
1c00108a g     F .text	0000008a xQueueGenericReset
1c0029f2 g     F .text	0000004c _write
1c008c48 g       .data	00000000 _edata
1c0091a4 g       .bss	00000000 _end
00000010 g       .data_tiny_fc	00000000 __l1FcShared_end
1c0030d8 g     F .text	0000002e __pi_spim_exec_next_transfer
1c0034fe g     F .text	00000004 pi_open_from_conf
1c00204a g     F .text	00000220 xTaskCreate
1c002a72 g     F .text	00000018 timer_irq_handler
1c004c5e g     F .text	0000004e __swrite
1c003814 g     F .text	0000002c exit
1c00387a g     F .text	00000028 fiprintf
1c003b0c g     F .text	000002a8 _vfiprintf_r
1c004736 g     F .text	0000006a _fwalk_reent
1c0029e0 g     F .text	0000000a _kill
10000010 g       .data_tiny_l1	00000000 __l1_preload_start
10000010 g       .l1cluster_g	00000000 __printf_lock_ptr_l1
1c008a34 g     O .rodata	00000020 __sf_fake_stdout
1c003106 g     F .text	00000042 spim_eot_handler
1c001d84 g     F .text	00000014 xTaskGetSchedulerState
1c002bb2 g     F .text	00000006 deactive_irq
1c001f1e g     F .text	000000ee vTaskPriorityDisinheritAfterTimeout
1c0029ee g     F .text	00000004 _read
1c0029b6 g     F .text	00000016 _exit
1c0047fa g     F .text	000000a0 __smakebuf_r
1c000880 g       .text	00000000 _stext
1c002026 g     F .text	00000024 vTaskExitCritical
1c000e00 g       .text	00000000 pxPortInitialiseStack
1c0049c0 g     F .text	0000026e _printf_i
1c0031b4 g     F .text	00000078 pi_fll_set_frequency
1c009198 g     O .bss	00000004 __malloc_sbrk_start
1c0199b0 g       .l2_data	00000000 __cluster_text_end
1c009194 g     O .bss	00000004 __malloc_free_list
1c003b0c g     F .text	000002a8 _vfprintf_r
1c003482 g     F .text	00000034 __pi_task_destroy
1c004dfe g       .text	00000000 _endtext
1c001426 g     F .text	000000ae xQueueGiveFromISR
1c00406a g     F .text	0000000e raise
1c0029b2 g     F .text	00000004 _close
1c003914 g     F .text	0000000c free
10000020 g       .l1cluster_g	00000000 __l1_cluster_g_end



Disassemblamento della sezione .vectors:
vector_table():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/vectors.S:32


.section .vectors, "ax"
.option norvc
vector_table:
	j freertos_risc_v_trap_handler
1c000800 <__irq_vector_base> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/vectors.S:33
	j freertos_risc_v_trap_handler
1c000804 <__irq_vector_base+0x4> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/vectors.S:34
	j freertos_risc_v_trap_handler
1c000808 <__irq_vector_base+0x8> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/vectors.S:35
	j freertos_risc_v_trap_handler
1c00080c <__irq_vector_base+0xc> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/vectors.S:36
	j freertos_risc_v_trap_handler
1c000810 <__irq_vector_base+0x10> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/vectors.S:37
	j freertos_risc_v_trap_handler
1c000814 <__irq_vector_base+0x14> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/vectors.S:38
	j freertos_risc_v_trap_handler
1c000818 <__irq_vector_base+0x18> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/vectors.S:39
	j freertos_risc_v_trap_handler
1c00081c <__irq_vector_base+0x1c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/vectors.S:40
	j freertos_risc_v_trap_handler
1c000820 <__irq_vector_base+0x20> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/vectors.S:41
	j freertos_risc_v_trap_handler
1c000824 <__irq_vector_base+0x24> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/vectors.S:45
#ifdef PULP_FREERTOS_VECTORED_CONTEXT_SWITCH
	j freertos_risc_v_ctxt_handler
#else
	j freertos_risc_v_trap_handler
1c000828 <__irq_vector_base+0x28> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/vectors.S:50
#endif
#ifdef __HACK_FIRMWARE_OPT1 /* TODO: properly do this with weak symbols */
	j TIMER1_IRQ_handler
#else
	j freertos_risc_v_trap_handler
1c00082c <__irq_vector_base+0x2c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/vectors.S:52
#endif
	j freertos_risc_v_trap_handler
1c000830 <__irq_vector_base+0x30> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/vectors.S:53
	j freertos_risc_v_trap_handler
1c000834 <__irq_vector_base+0x34> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/vectors.S:54
	j freertos_risc_v_trap_handler
1c000838 <__irq_vector_base+0x38> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/vectors.S:55
	j freertos_risc_v_trap_handler
1c00083c <__irq_vector_base+0x3c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/vectors.S:56
	j freertos_risc_v_trap_handler
1c000840 <__irq_vector_base+0x40> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/vectors.S:57
	j freertos_risc_v_trap_handler
1c000844 <__irq_vector_base+0x44> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/vectors.S:58
	j freertos_risc_v_trap_handler
1c000848 <__irq_vector_base+0x48> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/vectors.S:59
	j freertos_risc_v_trap_handler
1c00084c <__irq_vector_base+0x4c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/vectors.S:60
	j freertos_risc_v_trap_handler
1c000850 <__irq_vector_base+0x50> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/vectors.S:61
	j freertos_risc_v_trap_handler
1c000854 <__irq_vector_base+0x54> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/vectors.S:62
	j freertos_risc_v_trap_handler
1c000858 <__irq_vector_base+0x58> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/vectors.S:63
	j freertos_risc_v_trap_handler
1c00085c <__irq_vector_base+0x5c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/vectors.S:64
	j freertos_risc_v_trap_handler
1c000860 <__irq_vector_base+0x60> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/vectors.S:65
	j freertos_risc_v_trap_handler
1c000864 <__irq_vector_base+0x64> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/vectors.S:66
	j freertos_risc_v_trap_handler
1c000868 <__irq_vector_base+0x68> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/vectors.S:67
	j freertos_risc_v_trap_handler
1c00086c <__irq_vector_base+0x6c> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/vectors.S:68
	j freertos_risc_v_trap_handler
1c000870 <__irq_vector_base+0x70> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/vectors.S:69
	j freertos_risc_v_trap_handler
1c000874 <__irq_vector_base+0x74> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/vectors.S:70
	j freertos_risc_v_trap_handler
1c000878 <__irq_vector_base+0x78> j	1c000900 <freertos_risc_v_trap_handler>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/vectors.S:71
	j freertos_risc_v_trap_handler
1c00087c <__irq_vector_base+0x7c> j	1c000900 <freertos_risc_v_trap_handler>

Disassemblamento della sezione .text:
_start():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/crt0.S:39

_start:
/* initialize global pointer */
.option push
.option norelax
1:	auipc gp, %pcrel_hi(__global_pointer$)
1c000880 <_start> auipc	gp,0x9
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/crt0.S:40
	addi  gp, gp, %pcrel_lo(1b)
1c000884 <_start+0x4> addi	gp,gp,-1188 # 1c0093dc <__global_pointer$>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/crt0.S:43
.option pop

        csrr a0, 0xf14 /* Cluster ID */
1c000888 <_start+0x8> csrr	a0,mhartid
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/crt0.S:44
        andi a1, a0, 0x1f       /* Core ID */
1c00088c <_start+0xc> andi	a1,a0,31
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/crt0.S:45
        srli a0, a0, 5
1c000890 <_start+0x10> srli	a0,a0,0x5
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/crt0.S:54
        //bne a2, a0, cl_cluster_exec_loop
        .extern cluster_exec_loop
        bne a2, a0, cluster_exec_loop
#endif
/* initialize stack pointer */
	la sp, __stack_top
1c000892 <_start+0x12> auipc	sp,0x19
1c000896 <_start+0x16> addi	sp,sp,286 # 1c0199b0 <__cluster_text_end>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/crt0.S:57

/* set vector table address */
	la a0, __vector_start
1c00089a <_start+0x1a> auipc	a0,0x0
1c00089e <_start+0x1e> addi	a0,a0,-154 # 1c000800 <__irq_vector_base>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/crt0.S:58
	or a0, a0, 1 /* enable vectored mode (hardcoded anyway for RI5CY) */
1c0008a2 <_start+0x22> ori	a0,a0,1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/crt0.S:59
	csrw mtvec, a0
1c0008a6 <_start+0x26> csrw	mtvec,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/crt0.S:62

/* clear the bss segment */
	la t0, __bss_start
1c0008aa <_start+0x2a> auipc	t0,0x8
1c0008ae <_start+0x2e> addi	t0,t0,926 # 1c008c48 <xQueueRegistry>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/crt0.S:63
        la t1, __bss_end
1c0008b2 <_start+0x32> addi	t1,gp,-568 # 1c0091a4 <__bss_end>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/crt0.S:65
1:
	sw zero,0(t0)
1c0008b6 <_start+0x36> sw	zero,0(t0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/crt0.S:66
	addi t0, t0, 4
1c0008ba <_start+0x3a> addi	t0,t0,4
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/crt0.S:67
	bltu t0, t1, 1b
1c0008bc <_start+0x3c> bltu	t0,t1,1c0008b6 <_start+0x36>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/crt0.S:71

/* new-style constructors and destructors */
#if defined(__PULP_USE_LIBC)
	la a0, __libc_fini_array
1c0008c0 <_start+0x40> auipc	a0,0x3
1c0008c4 <_start+0x44> addi	a0,a0,-128 # 1c003840 <__libc_fini_array>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/crt0.S:72
	call atexit
1c0008c8 <_start+0x48> jal	ra,1c003808 <atexit>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/crt0.S:73
	call __libc_init_array
1c0008cc <_start+0x4c> jal	ra,1c0038a2 <__libc_init_array>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/crt0.S:77
#endif

/* call main */
	lw a0, 0(sp)                    /* a0 = argc */
1c0008d0 <_start+0x50> lw	a0,0(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/crt0.S:78
	addi a1, sp, __SIZEOF_POINTER__ /* a1 = argv */
1c0008d2 <_start+0x52> addi	a1,sp,4
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/crt0.S:79
	li a2, 0                        /* a2 = envp = NULL */
1c0008d4 <_start+0x54> li	a2,0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/crt0.S:80
	call main
1c0008d6 <_start+0x56> jal	ra,1c00375e <main>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/crt0.S:81
	tail exit
1c0008da <_start+0x5a> j	1c003814 <exit>
_init():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/crt0.S:93
.type   _fini, @function
_init:
_fini:
 /* These don't have to do anything since we use init_array/fini_array. Prevent
    missing symbol error */
	ret
1c0008de <_fini> ret
	...
freertos_risc_v_trap_handler():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:124
/*-----------------------------------------------------------*/

.align 8
.func
freertos_risc_v_trap_handler:
	addi sp, sp, -portCONTEXT_SIZE
1c000900 <freertos_risc_v_trap_handler> addi	sp,sp,-120
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:125
	store_x x1, 1 * portWORD_SIZE( sp )
1c000904 <freertos_risc_v_trap_handler+0x4> sw	ra,4(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:126
	store_x x5, 2 * portWORD_SIZE( sp )
1c000906 <freertos_risc_v_trap_handler+0x6> sw	t0,8(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:127
	store_x x6, 3 * portWORD_SIZE( sp )
1c000908 <freertos_risc_v_trap_handler+0x8> sw	t1,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:128
	store_x x7, 4 * portWORD_SIZE( sp )
1c00090a <freertos_risc_v_trap_handler+0xa> sw	t2,16(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:129
	store_x x8, 5 * portWORD_SIZE( sp )
1c00090c <freertos_risc_v_trap_handler+0xc> sw	s0,20(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:130
	store_x x9, 6 * portWORD_SIZE( sp )
1c00090e <freertos_risc_v_trap_handler+0xe> sw	s1,24(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:131
	store_x x10, 7 * portWORD_SIZE( sp )
1c000910 <freertos_risc_v_trap_handler+0x10> sw	a0,28(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:132
	store_x x11, 8 * portWORD_SIZE( sp )
1c000912 <freertos_risc_v_trap_handler+0x12> sw	a1,32(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:133
	store_x x12, 9 * portWORD_SIZE( sp )
1c000914 <freertos_risc_v_trap_handler+0x14> sw	a2,36(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:134
	store_x x13, 10 * portWORD_SIZE( sp )
1c000916 <freertos_risc_v_trap_handler+0x16> sw	a3,40(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:135
	store_x x14, 11 * portWORD_SIZE( sp )
1c000918 <freertos_risc_v_trap_handler+0x18> sw	a4,44(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:136
	store_x x15, 12 * portWORD_SIZE( sp )
1c00091a <freertos_risc_v_trap_handler+0x1a> sw	a5,48(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:138
#ifndef __riscv_32e  /* defined by gcc when -march=rv32e */
	store_x x16, 13 * portWORD_SIZE( sp )
1c00091c <freertos_risc_v_trap_handler+0x1c> sw	a6,52(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:139
	store_x x17, 14 * portWORD_SIZE( sp )
1c00091e <freertos_risc_v_trap_handler+0x1e> sw	a7,56(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:140
	store_x x18, 15 * portWORD_SIZE( sp )
1c000920 <freertos_risc_v_trap_handler+0x20> sw	s2,60(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:141
	store_x x19, 16 * portWORD_SIZE( sp )
1c000922 <freertos_risc_v_trap_handler+0x22> sw	s3,64(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:142
	store_x x20, 17 * portWORD_SIZE( sp )
1c000924 <freertos_risc_v_trap_handler+0x24> sw	s4,68(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:143
	store_x x21, 18 * portWORD_SIZE( sp )
1c000926 <freertos_risc_v_trap_handler+0x26> sw	s5,72(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:144
	store_x x22, 19 * portWORD_SIZE( sp )
1c000928 <freertos_risc_v_trap_handler+0x28> sw	s6,76(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:145
	store_x x23, 20 * portWORD_SIZE( sp )
1c00092a <freertos_risc_v_trap_handler+0x2a> sw	s7,80(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:146
	store_x x24, 21 * portWORD_SIZE( sp )
1c00092c <freertos_risc_v_trap_handler+0x2c> sw	s8,84(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:147
	store_x x25, 22 * portWORD_SIZE( sp )
1c00092e <freertos_risc_v_trap_handler+0x2e> sw	s9,88(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:148
	store_x x26, 23 * portWORD_SIZE( sp )
1c000930 <freertos_risc_v_trap_handler+0x30> sw	s10,92(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:149
	store_x x27, 24 * portWORD_SIZE( sp )
1c000932 <freertos_risc_v_trap_handler+0x32> sw	s11,96(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:150
	store_x x28, 25 * portWORD_SIZE( sp )
1c000934 <freertos_risc_v_trap_handler+0x34> sw	t3,100(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:151
	store_x x29, 26 * portWORD_SIZE( sp )
1c000936 <freertos_risc_v_trap_handler+0x36> sw	t4,104(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:152
	store_x x30, 27 * portWORD_SIZE( sp )
1c000938 <freertos_risc_v_trap_handler+0x38> sw	t5,108(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:153
	store_x x31, 28 * portWORD_SIZE( sp )
1c00093a <freertos_risc_v_trap_handler+0x3a> sw	t6,112(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:156
#endif
	
	csrr t0, mstatus					/* Required for MPIE bit. */
1c00093c <freertos_risc_v_trap_handler+0x3c> csrr	t0,mstatus
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:157
	store_x t0, 29 * portWORD_SIZE( sp )
1c000940 <freertos_risc_v_trap_handler+0x40> sw	t0,116(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:159
#ifndef portasmSKIP_ADDITIONAL_REGISTERS
	portasmSAVE_ADDITIONAL_REGISTERS	/* Defined in freertos_risc_v_chip_specific_extensions.h to save any registers unique to the RISC-V implementation. */
1c000942 <freertos_risc_v_trap_handler+0x42> addi	sp,sp,-24
1c000944 <freertos_risc_v_trap_handler+0x44> csrr	t0,0x7c0
1c000948 <freertos_risc_v_trap_handler+0x48> csrr	t1,0x7c1
1c00094c <freertos_risc_v_trap_handler+0x4c> csrr	t2,0x7c2
1c000950 <freertos_risc_v_trap_handler+0x50> csrr	t3,0x7c4
1c000954 <freertos_risc_v_trap_handler+0x54> csrr	t4,0x7c5
1c000958 <freertos_risc_v_trap_handler+0x58> csrr	t5,0x7c6
1c00095c <freertos_risc_v_trap_handler+0x5c> sw	t0,4(sp)
1c00095e <freertos_risc_v_trap_handler+0x5e> sw	t1,8(sp)
1c000960 <freertos_risc_v_trap_handler+0x60> sw	t2,12(sp)
1c000962 <freertos_risc_v_trap_handler+0x62> sw	t3,16(sp)
1c000964 <freertos_risc_v_trap_handler+0x64> sw	t4,20(sp)
1c000966 <freertos_risc_v_trap_handler+0x66> sw	t5,24(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:162
#endif

	load_x  t0, pxCurrentTCB			/* Load pxCurrentTCB. */
1c000968 <freertos_risc_v_trap_handler+0x68> lw	t0,-684(gp) # 1c009130 <pxCurrentTCB>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:163
	store_x  sp, 0( t0 )				/* Write sp to first TCB member. */
1c00096c <freertos_risc_v_trap_handler+0x6c> sw	sp,0(t0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:165

	csrr a0, mcause
1c000970 <freertos_risc_v_trap_handler+0x70> csrr	a0,mcause
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:166
	csrr a1, mepc
1c000974 <freertos_risc_v_trap_handler+0x74> csrr	a1,mepc
test_if_asynchronous():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:169

test_if_asynchronous:
	srli a2, a0, __riscv_xlen - 1		/* MSB of mcause is 1 if handing an asynchronous interrupt - shift to LSB to clear other bits. */
1c000978 <test_if_asynchronous> srli	a2,a0,0x1f
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:170
	beq a2, x0, handle_synchronous		/* Branch past interrupt handing if not asynchronous. */
1c00097c <test_if_asynchronous+0x4> beqz	a2,1c00098e <handle_synchronous>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:171
	store_x a1, 0( sp )					/* Asynch so save unmodified exception return address. */
1c00097e <test_if_asynchronous+0x6> sw	a1,0(sp)
handle_asynchronous():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:229
		addi t1, t1, 4					/* 0x80000007 + 4 = 0x8000000b == Machine external interrupt. */
		bne a0, t1, as_yet_unhandled	/* Something as yet unhandled. */

#endif /* portasmHAS_MTIME */

	load_x sp, xISRStackTop				/* Switch to ISR stack before function call. */
1c000980 <handle_asynchronous> auipc	sp,0x8
1c000984 <handle_asynchronous+0x4> lw	sp,596(sp) # 1c008bd4 <xISRStackTop>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:230
	jal portasmHANDLE_INTERRUPT			/* Jump to the interrupt handler if there is no CLINT or if there is a CLINT and it has been determined that an external interrupt is pending. */
1c000988 <handle_asynchronous+0x8> jal	ra,1c002b06 <vSystemIrqHandler>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:231
	j processed_source
1c00098c <handle_asynchronous+0xc> j	1c0009be <processed_source>
handle_synchronous():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:234

handle_synchronous:
	addi a1, a1, 4						/* Synchronous so updated exception return address to the instruction after the instruction that generated the exeption. */
1c00098e <handle_synchronous> addi	a1,a1,4
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:235
	store_x a1, 0( sp )					/* Save updated exception return address. */
1c000990 <handle_synchronous+0x2> sw	a1,0(sp)
test_if_environment_call():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:238

test_if_environment_call:
	li t0, 11 							/* 11 == environment call. */
1c000992 <test_if_environment_call> li	t0,11
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:239
	andi  a0, a0, 0x7ff					/* with the CLIC the lower 12 bits are the exception code and upper bits might be clobbered mpil, mie etc. */	
1c000994 <test_if_environment_call+0x2> andi	a0,a0,2047
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:240
	bne a0, t0, is_exception			/* Not an M environment call, so some other exception. */
1c000998 <test_if_environment_call+0x6> bne	a0,t0,1c0009aa <is_exception>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:241
	load_x sp, xISRStackTop				/* Switch to ISR stack before function call. */
1c00099c <test_if_environment_call+0xa> auipc	sp,0x8
1c0009a0 <test_if_environment_call+0xe> lw	sp,568(sp) # 1c008bd4 <xISRStackTop>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:242
	jal vTaskSwitchContext
1c0009a4 <test_if_environment_call+0x12> jal	ra,1c001b76 <vTaskSwitchContext>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:243
	j processed_source
1c0009a8 <test_if_environment_call+0x16> j	1c0009be <processed_source>
is_exception():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:246

is_exception:
	csrr t0, mcause						/* For viewing in the debugger only. */
1c0009aa <is_exception> csrr	t0,mcause
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:247
	csrr t1, mepc						/* For viewing in the debugger only */
1c0009ae <is_exception+0x4> csrr	t1,mepc
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:248
	csrr t2, mstatus
1c0009b2 <is_exception+0x8> csrr	t2,mstatus
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:249
	j is_exception						/* No other exceptions handled yet. */
1c0009b6 <is_exception+0xc> j	1c0009aa <is_exception>
as_yet_unhandled():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:252

as_yet_unhandled:
	csrr t0, mcause						/* For viewing in the debugger only. */
1c0009b8 <as_yet_unhandled> csrr	t0,mcause
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:253
	j as_yet_unhandled
1c0009bc <as_yet_unhandled+0x4> j	1c0009b8 <as_yet_unhandled>
processed_source():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:256

processed_source:
	load_x  t1, pxCurrentTCB			/* Load pxCurrentTCB. */
1c0009be <processed_source> lw	t1,-684(gp) # 1c009130 <pxCurrentTCB>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:257
	load_x  sp, 0( t1 )				 	/* Read sp from first TCB member. */
1c0009c2 <processed_source+0x4> lw	sp,0(t1)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:260

	/* Load mret with the address of the next instruction in the task to run next. */
	load_x t0, 0( sp )
1c0009c6 <processed_source+0x8> lw	t0,0(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:261
	csrw mepc, t0
1c0009c8 <processed_source+0xa> csrw	mepc,t0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:264

#ifndef portasmSKIP_ADDITIONAL_REGISTERS
	portasmRESTORE_ADDITIONAL_REGISTERS	/* Defined in freertos_risc_v_chip_specific_extensions.h to restore any registers unique to the RISC-V implementation. */
1c0009cc <processed_source+0xe> lw	t0,4(sp)
1c0009ce <processed_source+0x10> lw	t1,8(sp)
1c0009d0 <processed_source+0x12> lw	t2,12(sp)
1c0009d2 <processed_source+0x14> lw	t3,16(sp)
1c0009d4 <processed_source+0x16> lw	t4,20(sp)
1c0009d6 <processed_source+0x18> lw	t5,24(sp)
1c0009d8 <processed_source+0x1a> csrw	0x7c0,t0
1c0009dc <processed_source+0x1e> csrw	0x7c1,t1
1c0009e0 <processed_source+0x22> csrw	0x7c2,t2
1c0009e4 <processed_source+0x26> csrw	0x7c4,t3
1c0009e8 <processed_source+0x2a> csrw	0x7c5,t4
1c0009ec <processed_source+0x2e> csrw	0x7c6,t5
1c0009f0 <processed_source+0x32> addi	sp,sp,24
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:268
#endif

	/* Load mstatus with the interrupt enable bits used by the task. */
	load_x  t0, 29 * portWORD_SIZE( sp )
1c0009f2 <processed_source+0x34> lw	t0,116(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:269
	csrw mstatus, t0						/* Required for MPIE bit. */
1c0009f4 <processed_source+0x36> csrw	mstatus,t0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:271

	load_x  x1, 1 * portWORD_SIZE( sp )
1c0009f8 <processed_source+0x3a> lw	ra,4(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:272
	load_x  x5, 2 * portWORD_SIZE( sp )		/* t0 */
1c0009fa <processed_source+0x3c> lw	t0,8(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:273
	load_x  x6, 3 * portWORD_SIZE( sp )		/* t1 */
1c0009fc <processed_source+0x3e> lw	t1,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:274
	load_x  x7, 4 * portWORD_SIZE( sp )		/* t2 */
1c0009fe <processed_source+0x40> lw	t2,16(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:275
	load_x  x8, 5 * portWORD_SIZE( sp )		/* s0/fp */
1c000a00 <processed_source+0x42> lw	s0,20(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:276
	load_x  x9, 6 * portWORD_SIZE( sp )		/* s1 */
1c000a02 <processed_source+0x44> lw	s1,24(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:277
	load_x  x10, 7 * portWORD_SIZE( sp )	/* a0 */
1c000a04 <processed_source+0x46> lw	a0,28(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:278
	load_x  x11, 8 * portWORD_SIZE( sp )	/* a1 */
1c000a06 <processed_source+0x48> lw	a1,32(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:279
	load_x  x12, 9 * portWORD_SIZE( sp )	/* a2 */
1c000a08 <processed_source+0x4a> lw	a2,36(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:280
	load_x  x13, 10 * portWORD_SIZE( sp )	/* a3 */
1c000a0a <processed_source+0x4c> lw	a3,40(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:281
	load_x  x14, 11 * portWORD_SIZE( sp )	/* a4 */
1c000a0c <processed_source+0x4e> lw	a4,44(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:282
	load_x  x15, 12 * portWORD_SIZE( sp )	/* a5 */
1c000a0e <processed_source+0x50> lw	a5,48(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:284
#ifndef __riscv_32e  /* defined by gcc when -march=rv32e */
	load_x  x16, 13 * portWORD_SIZE( sp )	/* a6 */
1c000a10 <processed_source+0x52> lw	a6,52(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:285
	load_x  x17, 14 * portWORD_SIZE( sp )	/* a7 */
1c000a12 <processed_source+0x54> lw	a7,56(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:286
	load_x  x18, 15 * portWORD_SIZE( sp )	/* s2 */
1c000a14 <processed_source+0x56> lw	s2,60(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:287
	load_x  x19, 16 * portWORD_SIZE( sp )	/* s3 */
1c000a16 <processed_source+0x58> lw	s3,64(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:288
	load_x  x20, 17 * portWORD_SIZE( sp )	/* s4 */
1c000a18 <processed_source+0x5a> lw	s4,68(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:289
	load_x  x21, 18 * portWORD_SIZE( sp )	/* s5 */
1c000a1a <processed_source+0x5c> lw	s5,72(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:290
	load_x  x22, 19 * portWORD_SIZE( sp )	/* s6 */
1c000a1c <processed_source+0x5e> lw	s6,76(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:291
	load_x  x23, 20 * portWORD_SIZE( sp )	/* s7 */
1c000a1e <processed_source+0x60> lw	s7,80(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:292
	load_x  x24, 21 * portWORD_SIZE( sp )	/* s8 */
1c000a20 <processed_source+0x62> lw	s8,84(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:293
	load_x  x25, 22 * portWORD_SIZE( sp )	/* s9 */
1c000a22 <processed_source+0x64> lw	s9,88(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:294
	load_x  x26, 23 * portWORD_SIZE( sp )	/* s10 */
1c000a24 <processed_source+0x66> lw	s10,92(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:295
	load_x  x27, 24 * portWORD_SIZE( sp )	/* s11 */
1c000a26 <processed_source+0x68> lw	s11,96(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:296
	load_x  x28, 25 * portWORD_SIZE( sp )	/* t3 */
1c000a28 <processed_source+0x6a> lw	t3,100(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:297
	load_x  x29, 26 * portWORD_SIZE( sp )	/* t4 */
1c000a2a <processed_source+0x6c> lw	t4,104(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:298
	load_x  x30, 27 * portWORD_SIZE( sp )	/* t5 */
1c000a2c <processed_source+0x6e> lw	t5,108(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:299
	load_x  x31, 28 * portWORD_SIZE( sp )	/* t6 */
1c000a2e <processed_source+0x70> lw	t6,112(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:301
#endif
	addi sp, sp, portCONTEXT_SIZE
1c000a30 <processed_source+0x72> addi	sp,sp,120
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:303

	mret
1c000a34 <processed_source+0x76> mret
1c000a38 <processed_source+0x7a> nop
1c000a3c <processed_source+0x7e> nop
1c000a40 <processed_source+0x82> nop
1c000a44 <processed_source+0x86> nop
1c000a48 <processed_source+0x8a> nop
1c000a4c <processed_source+0x8e> nop
1c000a50 <processed_source+0x92> nop
1c000a54 <processed_source+0x96> nop
1c000a58 <processed_source+0x9a> nop
1c000a5c <processed_source+0x9e> nop
1c000a60 <processed_source+0xa2> nop
1c000a64 <processed_source+0xa6> nop
1c000a68 <processed_source+0xaa> nop
1c000a6c <processed_source+0xae> nop
1c000a70 <processed_source+0xb2> nop
1c000a74 <processed_source+0xb6> nop
1c000a78 <processed_source+0xba> nop
1c000a7c <processed_source+0xbe> nop
1c000a80 <processed_source+0xc2> nop
1c000a84 <processed_source+0xc6> nop
1c000a88 <processed_source+0xca> nop
1c000a8c <processed_source+0xce> nop
1c000a90 <processed_source+0xd2> nop
1c000a94 <processed_source+0xd6> nop
1c000a98 <processed_source+0xda> nop
1c000a9c <processed_source+0xde> nop
1c000aa0 <processed_source+0xe2> nop
1c000aa4 <processed_source+0xe6> nop
1c000aa8 <processed_source+0xea> nop
1c000aac <processed_source+0xee> nop
1c000ab0 <processed_source+0xf2> nop
1c000ab4 <processed_source+0xf6> nop
1c000ab8 <processed_source+0xfa> nop
1c000abc <processed_source+0xfe> nop
1c000ac0 <processed_source+0x102> nop
1c000ac4 <processed_source+0x106> nop
1c000ac8 <processed_source+0x10a> nop
1c000acc <processed_source+0x10e> nop
1c000ad0 <processed_source+0x112> nop
1c000ad4 <processed_source+0x116> nop
1c000ad8 <processed_source+0x11a> nop
1c000adc <processed_source+0x11e> nop
1c000ae0 <processed_source+0x122> nop
1c000ae4 <processed_source+0x126> nop
1c000ae8 <processed_source+0x12a> nop
1c000aec <processed_source+0x12e> nop
1c000af0 <processed_source+0x132> nop
1c000af4 <processed_source+0x136> nop
1c000af8 <processed_source+0x13a> nop
1c000afc <processed_source+0x13e> nop
freertos_risc_v_ctxt_handler():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:311

/* for timer interrupt vectored context switches */
.align 8
.func
freertos_risc_v_ctxt_handler:
	addi sp, sp, -portCONTEXT_SIZE
1c000b00 <freertos_risc_v_ctxt_handler> addi	sp,sp,-120
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:312
	store_x x1, 1 * portWORD_SIZE( sp )
1c000b04 <freertos_risc_v_ctxt_handler+0x4> sw	ra,4(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:313
	store_x x5, 2 * portWORD_SIZE( sp )
1c000b06 <freertos_risc_v_ctxt_handler+0x6> sw	t0,8(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:314
	store_x x6, 3 * portWORD_SIZE( sp )
1c000b08 <freertos_risc_v_ctxt_handler+0x8> sw	t1,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:315
	store_x x7, 4 * portWORD_SIZE( sp )
1c000b0a <freertos_risc_v_ctxt_handler+0xa> sw	t2,16(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:316
	store_x x8, 5 * portWORD_SIZE( sp )
1c000b0c <freertos_risc_v_ctxt_handler+0xc> sw	s0,20(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:317
	store_x x9, 6 * portWORD_SIZE( sp )
1c000b0e <freertos_risc_v_ctxt_handler+0xe> sw	s1,24(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:318
	store_x x10, 7 * portWORD_SIZE( sp )
1c000b10 <freertos_risc_v_ctxt_handler+0x10> sw	a0,28(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:319
	store_x x11, 8 * portWORD_SIZE( sp )
1c000b12 <freertos_risc_v_ctxt_handler+0x12> sw	a1,32(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:320
	store_x x12, 9 * portWORD_SIZE( sp )
1c000b14 <freertos_risc_v_ctxt_handler+0x14> sw	a2,36(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:321
	store_x x13, 10 * portWORD_SIZE( sp )
1c000b16 <freertos_risc_v_ctxt_handler+0x16> sw	a3,40(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:322
	store_x x14, 11 * portWORD_SIZE( sp )
1c000b18 <freertos_risc_v_ctxt_handler+0x18> sw	a4,44(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:323
	store_x x15, 12 * portWORD_SIZE( sp )
1c000b1a <freertos_risc_v_ctxt_handler+0x1a> sw	a5,48(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:325
#ifndef __riscv_32e  /* defined by gcc when -march=rv32e */
	store_x x16, 13 * portWORD_SIZE( sp )
1c000b1c <freertos_risc_v_ctxt_handler+0x1c> sw	a6,52(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:326
	store_x x17, 14 * portWORD_SIZE( sp )
1c000b1e <freertos_risc_v_ctxt_handler+0x1e> sw	a7,56(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:327
	store_x x18, 15 * portWORD_SIZE( sp )
1c000b20 <freertos_risc_v_ctxt_handler+0x20> sw	s2,60(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:328
	store_x x19, 16 * portWORD_SIZE( sp )
1c000b22 <freertos_risc_v_ctxt_handler+0x22> sw	s3,64(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:329
	store_x x20, 17 * portWORD_SIZE( sp )
1c000b24 <freertos_risc_v_ctxt_handler+0x24> sw	s4,68(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:330
	store_x x21, 18 * portWORD_SIZE( sp )
1c000b26 <freertos_risc_v_ctxt_handler+0x26> sw	s5,72(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:331
	store_x x22, 19 * portWORD_SIZE( sp )
1c000b28 <freertos_risc_v_ctxt_handler+0x28> sw	s6,76(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:332
	store_x x23, 20 * portWORD_SIZE( sp )
1c000b2a <freertos_risc_v_ctxt_handler+0x2a> sw	s7,80(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:333
	store_x x24, 21 * portWORD_SIZE( sp )
1c000b2c <freertos_risc_v_ctxt_handler+0x2c> sw	s8,84(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:334
	store_x x25, 22 * portWORD_SIZE( sp )
1c000b2e <freertos_risc_v_ctxt_handler+0x2e> sw	s9,88(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:335
	store_x x26, 23 * portWORD_SIZE( sp )
1c000b30 <freertos_risc_v_ctxt_handler+0x30> sw	s10,92(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:336
	store_x x27, 24 * portWORD_SIZE( sp )
1c000b32 <freertos_risc_v_ctxt_handler+0x32> sw	s11,96(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:337
	store_x x28, 25 * portWORD_SIZE( sp )
1c000b34 <freertos_risc_v_ctxt_handler+0x34> sw	t3,100(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:338
	store_x x29, 26 * portWORD_SIZE( sp )
1c000b36 <freertos_risc_v_ctxt_handler+0x36> sw	t4,104(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:339
	store_x x30, 27 * portWORD_SIZE( sp )
1c000b38 <freertos_risc_v_ctxt_handler+0x38> sw	t5,108(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:340
	store_x x31, 28 * portWORD_SIZE( sp )
1c000b3a <freertos_risc_v_ctxt_handler+0x3a> sw	t6,112(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:343
#endif
	
	csrr t0, mstatus					/* Required for MPIE bit. */
1c000b3c <freertos_risc_v_ctxt_handler+0x3c> csrr	t0,mstatus
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:344
	store_x t0, 29 * portWORD_SIZE( sp )
1c000b40 <freertos_risc_v_ctxt_handler+0x40> sw	t0,116(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:346
#ifndef portasmSKIP_ADDITIONAL_REGISTERS
	portasmSAVE_ADDITIONAL_REGISTERS	/* Defined in freertos_risc_v_chip_specific_extensions.h to save any registers unique to the RISC-V implementation. */
1c000b42 <freertos_risc_v_ctxt_handler+0x42> addi	sp,sp,-24
1c000b44 <freertos_risc_v_ctxt_handler+0x44> csrr	t0,0x7c0
1c000b48 <freertos_risc_v_ctxt_handler+0x48> csrr	t1,0x7c1
1c000b4c <freertos_risc_v_ctxt_handler+0x4c> csrr	t2,0x7c2
1c000b50 <freertos_risc_v_ctxt_handler+0x50> csrr	t3,0x7c4
1c000b54 <freertos_risc_v_ctxt_handler+0x54> csrr	t4,0x7c5
1c000b58 <freertos_risc_v_ctxt_handler+0x58> csrr	t5,0x7c6
1c000b5c <freertos_risc_v_ctxt_handler+0x5c> sw	t0,4(sp)
1c000b5e <freertos_risc_v_ctxt_handler+0x5e> sw	t1,8(sp)
1c000b60 <freertos_risc_v_ctxt_handler+0x60> sw	t2,12(sp)
1c000b62 <freertos_risc_v_ctxt_handler+0x62> sw	t3,16(sp)
1c000b64 <freertos_risc_v_ctxt_handler+0x64> sw	t4,20(sp)
1c000b66 <freertos_risc_v_ctxt_handler+0x66> sw	t5,24(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:349
#endif

	load_x  t0, pxCurrentTCB			/* Load pxCurrentTCB. */
1c000b68 <freertos_risc_v_ctxt_handler+0x68> lw	t0,-684(gp) # 1c009130 <pxCurrentTCB>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:350
	store_x  sp, 0( t0 )				/* Write sp to first TCB member. */
1c000b6c <freertos_risc_v_ctxt_handler+0x6c> sw	sp,0(t0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:352

	csrr a0, mcause
1c000b70 <freertos_risc_v_ctxt_handler+0x70> csrr	a0,mcause
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:353
	csrr a1, mepc
1c000b74 <freertos_risc_v_ctxt_handler+0x74> csrr	a1,mepc
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:355

	store_x a1, 0( sp )				/* Asynch so save unmodified exception return address. */
1c000b78 <freertos_risc_v_ctxt_handler+0x78> sw	a1,0(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:357

	load_x sp, xISRStackTop			/* Switch to ISR stack before function call. */
1c000b7a <freertos_risc_v_ctxt_handler+0x7a> auipc	sp,0x8
1c000b7e <freertos_risc_v_ctxt_handler+0x7e> lw	sp,90(sp) # 1c008bd4 <xISRStackTop>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:358
	jal xTaskIncrementTick
1c000b82 <freertos_risc_v_ctxt_handler+0x82> jal	ra,1c001a28 <xTaskIncrementTick>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:359
	beqz a0, processed_source		/* Don't switch context if incrementing tick didn't unblock a task. */
1c000b86 <freertos_risc_v_ctxt_handler+0x86> beqz	a0,1c0009be <processed_source>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:360
	jal vTaskSwitchContext
1c000b8a <freertos_risc_v_ctxt_handler+0x8a> jal	ra,1c001b76 <vTaskSwitchContext>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:362

	load_x  t1, pxCurrentTCB			/* Load pxCurrentTCB. */
1c000b8e <freertos_risc_v_ctxt_handler+0x8e> lw	t1,-684(gp) # 1c009130 <pxCurrentTCB>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:363
	load_x  sp, 0( t1 )				 	/* Read sp from first TCB member. */
1c000b92 <freertos_risc_v_ctxt_handler+0x92> lw	sp,0(t1)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:366

	/* Load mret with the address of the next instruction in the task to run next. */
	load_x t0, 0( sp )
1c000b96 <freertos_risc_v_ctxt_handler+0x96> lw	t0,0(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:367
	csrw mepc, t0
1c000b98 <freertos_risc_v_ctxt_handler+0x98> csrw	mepc,t0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:370

#ifndef portasmSKIP_ADDITIONAL_REGISTERS
	portasmRESTORE_ADDITIONAL_REGISTERS	/* Defined in freertos_risc_v_chip_specific_extensions.h to restore any registers unique to the RISC-V implementation. */
1c000b9c <freertos_risc_v_ctxt_handler+0x9c> lw	t0,4(sp)
1c000b9e <freertos_risc_v_ctxt_handler+0x9e> lw	t1,8(sp)
1c000ba0 <freertos_risc_v_ctxt_handler+0xa0> lw	t2,12(sp)
1c000ba2 <freertos_risc_v_ctxt_handler+0xa2> lw	t3,16(sp)
1c000ba4 <freertos_risc_v_ctxt_handler+0xa4> lw	t4,20(sp)
1c000ba6 <freertos_risc_v_ctxt_handler+0xa6> lw	t5,24(sp)
1c000ba8 <freertos_risc_v_ctxt_handler+0xa8> csrw	0x7c0,t0
1c000bac <freertos_risc_v_ctxt_handler+0xac> csrw	0x7c1,t1
1c000bb0 <freertos_risc_v_ctxt_handler+0xb0> csrw	0x7c2,t2
1c000bb4 <freertos_risc_v_ctxt_handler+0xb4> csrw	0x7c4,t3
1c000bb8 <freertos_risc_v_ctxt_handler+0xb8> csrw	0x7c5,t4
1c000bbc <freertos_risc_v_ctxt_handler+0xbc> csrw	0x7c6,t5
1c000bc0 <freertos_risc_v_ctxt_handler+0xc0> addi	sp,sp,24
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:374
#endif

	/* Load mstatus with the interrupt enable bits used by the task. */
	load_x  t0, 29 * portWORD_SIZE( sp )
1c000bc2 <freertos_risc_v_ctxt_handler+0xc2> lw	t0,116(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:375
	csrw mstatus, t0						/* Required for MPIE bit. */
1c000bc4 <freertos_risc_v_ctxt_handler+0xc4> csrw	mstatus,t0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:377

	load_x  x1, 1 * portWORD_SIZE( sp )
1c000bc8 <freertos_risc_v_ctxt_handler+0xc8> lw	ra,4(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:378
	load_x  x5, 2 * portWORD_SIZE( sp )		/* t0 */
1c000bca <freertos_risc_v_ctxt_handler+0xca> lw	t0,8(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:379
	load_x  x6, 3 * portWORD_SIZE( sp )		/* t1 */
1c000bcc <freertos_risc_v_ctxt_handler+0xcc> lw	t1,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:380
	load_x  x7, 4 * portWORD_SIZE( sp )		/* t2 */
1c000bce <freertos_risc_v_ctxt_handler+0xce> lw	t2,16(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:381
	load_x  x8, 5 * portWORD_SIZE( sp )		/* s0/fp */
1c000bd0 <freertos_risc_v_ctxt_handler+0xd0> lw	s0,20(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:382
	load_x  x9, 6 * portWORD_SIZE( sp )		/* s1 */
1c000bd2 <freertos_risc_v_ctxt_handler+0xd2> lw	s1,24(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:383
	load_x  x10, 7 * portWORD_SIZE( sp )	/* a0 */
1c000bd4 <freertos_risc_v_ctxt_handler+0xd4> lw	a0,28(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:384
	load_x  x11, 8 * portWORD_SIZE( sp )	/* a1 */
1c000bd6 <freertos_risc_v_ctxt_handler+0xd6> lw	a1,32(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:385
	load_x  x12, 9 * portWORD_SIZE( sp )	/* a2 */
1c000bd8 <freertos_risc_v_ctxt_handler+0xd8> lw	a2,36(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:386
	load_x  x13, 10 * portWORD_SIZE( sp )	/* a3 */
1c000bda <freertos_risc_v_ctxt_handler+0xda> lw	a3,40(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:387
	load_x  x14, 11 * portWORD_SIZE( sp )	/* a4 */
1c000bdc <freertos_risc_v_ctxt_handler+0xdc> lw	a4,44(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:388
	load_x  x15, 12 * portWORD_SIZE( sp )	/* a5 */
1c000bde <freertos_risc_v_ctxt_handler+0xde> lw	a5,48(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:390
#ifndef __riscv_32e  /* defined by gcc when -march=rv32e */
	load_x  x16, 13 * portWORD_SIZE( sp )	/* a6 */
1c000be0 <freertos_risc_v_ctxt_handler+0xe0> lw	a6,52(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:391
	load_x  x17, 14 * portWORD_SIZE( sp )	/* a7 */
1c000be2 <freertos_risc_v_ctxt_handler+0xe2> lw	a7,56(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:392
	load_x  x18, 15 * portWORD_SIZE( sp )	/* s2 */
1c000be4 <freertos_risc_v_ctxt_handler+0xe4> lw	s2,60(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:393
	load_x  x19, 16 * portWORD_SIZE( sp )	/* s3 */
1c000be6 <freertos_risc_v_ctxt_handler+0xe6> lw	s3,64(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:394
	load_x  x20, 17 * portWORD_SIZE( sp )	/* s4 */
1c000be8 <freertos_risc_v_ctxt_handler+0xe8> lw	s4,68(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:395
	load_x  x21, 18 * portWORD_SIZE( sp )	/* s5 */
1c000bea <freertos_risc_v_ctxt_handler+0xea> lw	s5,72(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:396
	load_x  x22, 19 * portWORD_SIZE( sp )	/* s6 */
1c000bec <freertos_risc_v_ctxt_handler+0xec> lw	s6,76(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:397
	load_x  x23, 20 * portWORD_SIZE( sp )	/* s7 */
1c000bee <freertos_risc_v_ctxt_handler+0xee> lw	s7,80(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:398
	load_x  x24, 21 * portWORD_SIZE( sp )	/* s8 */
1c000bf0 <freertos_risc_v_ctxt_handler+0xf0> lw	s8,84(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:399
	load_x  x25, 22 * portWORD_SIZE( sp )	/* s9 */
1c000bf2 <freertos_risc_v_ctxt_handler+0xf2> lw	s9,88(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:400
	load_x  x26, 23 * portWORD_SIZE( sp )	/* s10 */
1c000bf4 <freertos_risc_v_ctxt_handler+0xf4> lw	s10,92(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:401
	load_x  x27, 24 * portWORD_SIZE( sp )	/* s11 */
1c000bf6 <freertos_risc_v_ctxt_handler+0xf6> lw	s11,96(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:402
	load_x  x28, 25 * portWORD_SIZE( sp )	/* t3 */
1c000bf8 <freertos_risc_v_ctxt_handler+0xf8> lw	t3,100(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:403
	load_x  x29, 26 * portWORD_SIZE( sp )	/* t4 */
1c000bfa <freertos_risc_v_ctxt_handler+0xfa> lw	t4,104(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:404
	load_x  x30, 27 * portWORD_SIZE( sp )	/* t5 */
1c000bfc <freertos_risc_v_ctxt_handler+0xfc> lw	t5,108(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:405
	load_x  x31, 28 * portWORD_SIZE( sp )	/* t6 */
1c000bfe <freertos_risc_v_ctxt_handler+0xfe> lw	t6,112(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:407
#endif
	addi sp, sp, portCONTEXT_SIZE
1c000c00 <freertos_risc_v_ctxt_handler+0x100> addi	sp,sp,120
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:409

	mret
1c000c04 <freertos_risc_v_ctxt_handler+0x104> mret
1c000c08 <freertos_risc_v_ctxt_handler+0x108> nop
1c000c0c <freertos_risc_v_ctxt_handler+0x10c> nop
1c000c10 <freertos_risc_v_ctxt_handler+0x110> nop
1c000c14 <freertos_risc_v_ctxt_handler+0x114> nop
1c000c18 <freertos_risc_v_ctxt_handler+0x118> nop
1c000c1c <freertos_risc_v_ctxt_handler+0x11c> nop
1c000c20 <freertos_risc_v_ctxt_handler+0x120> nop
1c000c24 <freertos_risc_v_ctxt_handler+0x124> nop
1c000c28 <freertos_risc_v_ctxt_handler+0x128> nop
1c000c2c <freertos_risc_v_ctxt_handler+0x12c> nop
1c000c30 <freertos_risc_v_ctxt_handler+0x130> nop
1c000c34 <freertos_risc_v_ctxt_handler+0x134> nop
1c000c38 <freertos_risc_v_ctxt_handler+0x138> nop
1c000c3c <freertos_risc_v_ctxt_handler+0x13c> nop
1c000c40 <freertos_risc_v_ctxt_handler+0x140> nop
1c000c44 <freertos_risc_v_ctxt_handler+0x144> nop
1c000c48 <freertos_risc_v_ctxt_handler+0x148> nop
1c000c4c <freertos_risc_v_ctxt_handler+0x14c> nop
1c000c50 <freertos_risc_v_ctxt_handler+0x150> nop
1c000c54 <freertos_risc_v_ctxt_handler+0x154> nop
1c000c58 <freertos_risc_v_ctxt_handler+0x158> nop
1c000c5c <freertos_risc_v_ctxt_handler+0x15c> nop
1c000c60 <freertos_risc_v_ctxt_handler+0x160> nop
1c000c64 <freertos_risc_v_ctxt_handler+0x164> nop
1c000c68 <freertos_risc_v_ctxt_handler+0x168> nop
1c000c6c <freertos_risc_v_ctxt_handler+0x16c> nop
1c000c70 <freertos_risc_v_ctxt_handler+0x170> nop
1c000c74 <freertos_risc_v_ctxt_handler+0x174> nop
1c000c78 <freertos_risc_v_ctxt_handler+0x178> nop
1c000c7c <freertos_risc_v_ctxt_handler+0x17c> nop
1c000c80 <freertos_risc_v_ctxt_handler+0x180> nop
1c000c84 <freertos_risc_v_ctxt_handler+0x184> nop
1c000c88 <freertos_risc_v_ctxt_handler+0x188> nop
1c000c8c <freertos_risc_v_ctxt_handler+0x18c> nop
1c000c90 <freertos_risc_v_ctxt_handler+0x190> nop
1c000c94 <freertos_risc_v_ctxt_handler+0x194> nop
1c000c98 <freertos_risc_v_ctxt_handler+0x198> nop
1c000c9c <freertos_risc_v_ctxt_handler+0x19c> nop
1c000ca0 <freertos_risc_v_ctxt_handler+0x1a0> nop
1c000ca4 <freertos_risc_v_ctxt_handler+0x1a4> nop
1c000ca8 <freertos_risc_v_ctxt_handler+0x1a8> nop
1c000cac <freertos_risc_v_ctxt_handler+0x1ac> nop
1c000cb0 <freertos_risc_v_ctxt_handler+0x1b0> nop
1c000cb4 <freertos_risc_v_ctxt_handler+0x1b4> nop
1c000cb8 <freertos_risc_v_ctxt_handler+0x1b8> nop
1c000cbc <freertos_risc_v_ctxt_handler+0x1bc> nop
1c000cc0 <freertos_risc_v_ctxt_handler+0x1c0> nop
1c000cc4 <freertos_risc_v_ctxt_handler+0x1c4> nop
1c000cc8 <freertos_risc_v_ctxt_handler+0x1c8> nop
1c000ccc <freertos_risc_v_ctxt_handler+0x1cc> nop
1c000cd0 <freertos_risc_v_ctxt_handler+0x1d0> nop
1c000cd4 <freertos_risc_v_ctxt_handler+0x1d4> nop
1c000cd8 <freertos_risc_v_ctxt_handler+0x1d8> nop
1c000cdc <freertos_risc_v_ctxt_handler+0x1dc> nop
1c000ce0 <freertos_risc_v_ctxt_handler+0x1e0> nop
1c000ce4 <freertos_risc_v_ctxt_handler+0x1e4> nop
1c000ce8 <freertos_risc_v_ctxt_handler+0x1e8> nop
1c000cec <freertos_risc_v_ctxt_handler+0x1ec> nop
1c000cf0 <freertos_risc_v_ctxt_handler+0x1f0> nop
1c000cf4 <freertos_risc_v_ctxt_handler+0x1f4> nop
1c000cf8 <freertos_risc_v_ctxt_handler+0x1f8> nop
1c000cfc <freertos_risc_v_ctxt_handler+0x1fc> nop
xPortStartFirstTask():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:426
	outside of this file. */
	la t0, freertos_risc_v_trap_handler
	csrw mtvec, t0
#endif /* portasmHAS_CLILNT */

	load_x  sp, pxCurrentTCB			/* Load pxCurrentTCB. */
1c000d00 <xPortStartFirstTask> lw	sp,-684(gp) # 1c009130 <pxCurrentTCB>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:427
	load_x  sp, 0( sp )				 	/* Read sp from first TCB member. */
1c000d04 <xPortStartFirstTask+0x4> lw	sp,0(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:429

	load_x  x1, 0( sp ) /* Note for starting the scheduler the exception return address is used as the function return address. */
1c000d06 <xPortStartFirstTask+0x6> lw	ra,0(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:432

#ifndef portasmSKIP_ADDITIONAL_REGISTERS
	portasmRESTORE_ADDITIONAL_REGISTERS	/* Defined in freertos_risc_v_chip_specific_extensions.h to restore any registers unique to the RISC-V implementation. */
1c000d08 <xPortStartFirstTask+0x8> lw	t0,4(sp)
1c000d0a <xPortStartFirstTask+0xa> lw	t1,8(sp)
1c000d0c <xPortStartFirstTask+0xc> lw	t2,12(sp)
1c000d0e <xPortStartFirstTask+0xe> lw	t3,16(sp)
1c000d10 <xPortStartFirstTask+0x10> lw	t4,20(sp)
1c000d12 <xPortStartFirstTask+0x12> lw	t5,24(sp)
1c000d14 <xPortStartFirstTask+0x14> csrw	0x7c0,t0
1c000d18 <xPortStartFirstTask+0x18> csrw	0x7c1,t1
1c000d1c <xPortStartFirstTask+0x1c> csrw	0x7c2,t2
1c000d20 <xPortStartFirstTask+0x20> csrw	0x7c4,t3
1c000d24 <xPortStartFirstTask+0x24> csrw	0x7c5,t4
1c000d28 <xPortStartFirstTask+0x28> csrw	0x7c6,t5
1c000d2c <xPortStartFirstTask+0x2c> addi	sp,sp,24
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:435
#endif

	load_x  x6, 3 * portWORD_SIZE( sp )		/* t1 */
1c000d2e <xPortStartFirstTask+0x2e> lw	t1,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:436
	load_x  x7, 4 * portWORD_SIZE( sp )		/* t2 */
1c000d30 <xPortStartFirstTask+0x30> lw	t2,16(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:437
	load_x  x8, 5 * portWORD_SIZE( sp )		/* s0/fp */
1c000d32 <xPortStartFirstTask+0x32> lw	s0,20(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:438
	load_x  x9, 6 * portWORD_SIZE( sp )		/* s1 */
1c000d34 <xPortStartFirstTask+0x34> lw	s1,24(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:439
	load_x  x10, 7 * portWORD_SIZE( sp )	/* a0 */
1c000d36 <xPortStartFirstTask+0x36> lw	a0,28(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:440
	load_x  x11, 8 * portWORD_SIZE( sp )	/* a1 */
1c000d38 <xPortStartFirstTask+0x38> lw	a1,32(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:441
	load_x  x12, 9 * portWORD_SIZE( sp )	/* a2 */
1c000d3a <xPortStartFirstTask+0x3a> lw	a2,36(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:442
	load_x  x13, 10 * portWORD_SIZE( sp )	/* a3 */
1c000d3c <xPortStartFirstTask+0x3c> lw	a3,40(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:443
	load_x  x14, 11 * portWORD_SIZE( sp )	/* a4 */
1c000d3e <xPortStartFirstTask+0x3e> lw	a4,44(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:444
	load_x  x15, 12 * portWORD_SIZE( sp )	/* a5 */
1c000d40 <xPortStartFirstTask+0x40> lw	a5,48(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:446
#ifndef __riscv_32e  /* defined by gcc when -march=rv32e */
	load_x  x16, 13 * portWORD_SIZE( sp )	/* a6 */
1c000d42 <xPortStartFirstTask+0x42> lw	a6,52(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:447
	load_x  x17, 14 * portWORD_SIZE( sp )	/* a7 */
1c000d44 <xPortStartFirstTask+0x44> lw	a7,56(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:448
	load_x  x18, 15 * portWORD_SIZE( sp )	/* s2 */
1c000d46 <xPortStartFirstTask+0x46> lw	s2,60(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:449
	load_x  x19, 16 * portWORD_SIZE( sp )	/* s3 */
1c000d48 <xPortStartFirstTask+0x48> lw	s3,64(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:450
	load_x  x20, 17 * portWORD_SIZE( sp )	/* s4 */
1c000d4a <xPortStartFirstTask+0x4a> lw	s4,68(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:451
	load_x  x21, 18 * portWORD_SIZE( sp )	/* s5 */
1c000d4c <xPortStartFirstTask+0x4c> lw	s5,72(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:452
	load_x  x22, 19 * portWORD_SIZE( sp )	/* s6 */
1c000d4e <xPortStartFirstTask+0x4e> lw	s6,76(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:453
	load_x  x23, 20 * portWORD_SIZE( sp )	/* s7 */
1c000d50 <xPortStartFirstTask+0x50> lw	s7,80(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:454
	load_x  x24, 21 * portWORD_SIZE( sp )	/* s8 */
1c000d52 <xPortStartFirstTask+0x52> lw	s8,84(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:455
	load_x  x25, 22 * portWORD_SIZE( sp )	/* s9 */
1c000d54 <xPortStartFirstTask+0x54> lw	s9,88(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:456
	load_x  x26, 23 * portWORD_SIZE( sp )	/* s10 */
1c000d56 <xPortStartFirstTask+0x56> lw	s10,92(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:457
	load_x  x27, 24 * portWORD_SIZE( sp )	/* s11 */
1c000d58 <xPortStartFirstTask+0x58> lw	s11,96(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:458
	load_x  x28, 25 * portWORD_SIZE( sp )	/* t3 */
1c000d5a <xPortStartFirstTask+0x5a> lw	t3,100(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:459
	load_x  x29, 26 * portWORD_SIZE( sp )	/* t4 */
1c000d5c <xPortStartFirstTask+0x5c> lw	t4,104(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:460
	load_x  x30, 27 * portWORD_SIZE( sp )	/* t5 */
1c000d5e <xPortStartFirstTask+0x5e> lw	t5,108(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:461
	load_x  x31, 28 * portWORD_SIZE( sp )	/* t6 */
1c000d60 <xPortStartFirstTask+0x60> lw	t6,112(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:463
#endif
	load_x  x5, 29 * portWORD_SIZE( sp )	/* Initial mstatus into x5 (t0) */
1c000d62 <xPortStartFirstTask+0x62> lw	t0,116(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:464
	addi x5, x5, 0x08						/* Set MIE bit so the first task starts with interrupts enabled - required as returns with ret not eret. */
1c000d64 <xPortStartFirstTask+0x64> addi	t0,t0,8
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:465
	csrrw  x0, mstatus, x5					/* Interrupts enabled from here! */
1c000d66 <xPortStartFirstTask+0x66> csrw	mstatus,t0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:466
	load_x  x5, 2 * portWORD_SIZE( sp )		/* Initial x5 (t0) value. */
1c000d6a <xPortStartFirstTask+0x6a> lw	t0,8(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:468

	addi	sp, sp, portCONTEXT_SIZE
1c000d6c <xPortStartFirstTask+0x6c> addi	sp,sp,120
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:469
	ret
1c000d70 <xPortStartFirstTask+0x70> ret
1c000d72 <xPortStartFirstTask+0x72> nop
1c000d76 <xPortStartFirstTask+0x76> nop
1c000d7a <xPortStartFirstTask+0x7a> nop
1c000d7e <xPortStartFirstTask+0x7e> nop
1c000d82 <xPortStartFirstTask+0x82> nop
1c000d86 <xPortStartFirstTask+0x86> nop
1c000d8a <xPortStartFirstTask+0x8a> nop
1c000d8e <xPortStartFirstTask+0x8e> nop
1c000d92 <xPortStartFirstTask+0x92> nop
1c000d96 <xPortStartFirstTask+0x96> nop
1c000d9a <xPortStartFirstTask+0x9a> nop
1c000d9e <xPortStartFirstTask+0x9e> nop
1c000da2 <xPortStartFirstTask+0xa2> nop
1c000da6 <xPortStartFirstTask+0xa6> nop
1c000daa <xPortStartFirstTask+0xaa> nop
1c000dae <xPortStartFirstTask+0xae> nop
1c000db2 <xPortStartFirstTask+0xb2> nop
1c000db6 <xPortStartFirstTask+0xb6> nop
1c000dba <xPortStartFirstTask+0xba> nop
1c000dbe <xPortStartFirstTask+0xbe> nop
1c000dc2 <xPortStartFirstTask+0xc2> nop
1c000dc6 <xPortStartFirstTask+0xc6> nop
1c000dca <xPortStartFirstTask+0xca> nop
1c000dce <xPortStartFirstTask+0xce> nop
1c000dd2 <xPortStartFirstTask+0xd2> nop
1c000dd6 <xPortStartFirstTask+0xd6> nop
1c000dda <xPortStartFirstTask+0xda> nop
1c000dde <xPortStartFirstTask+0xde> nop
1c000de2 <xPortStartFirstTask+0xe2> nop
1c000de6 <xPortStartFirstTask+0xe6> nop
1c000dea <xPortStartFirstTask+0xea> nop
1c000dee <xPortStartFirstTask+0xee> nop
1c000df2 <xPortStartFirstTask+0xf2> nop
1c000df6 <xPortStartFirstTask+0xf6> nop
1c000dfa <xPortStartFirstTask+0xfa> nop
1c000dfe <xPortStartFirstTask+0xfe> nop
pxPortInitialiseStack():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:539
 */
.align 8
.func
pxPortInitialiseStack:

	csrr t0, mstatus					/* Obtain current mstatus value. */
1c000e00 <pxPortInitialiseStack> csrr	t0,mstatus
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:540
	andi t0, t0, ~0x8					/* Ensure interrupts are disabled when the stack is restored within an ISR.  Required when a task is created after the schedulre has been started, otherwise interrupts would be disabled anyway. */
1c000e04 <pxPortInitialiseStack+0x4> andi	t0,t0,-9
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:541
	addi t1, x0, 0x188					/* Generate the value 0x1880, which are the MPIE and MPP bits to set in mstatus. */
1c000e08 <pxPortInitialiseStack+0x8> li	t1,392
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:542
	slli t1, t1, 4
1c000e0c <pxPortInitialiseStack+0xc> slli	t1,t1,0x4
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:543
	or t0, t0, t1						/* Set MPIE and MPP bits in mstatus value. */
1c000e0e <pxPortInitialiseStack+0xe> or	t0,t0,t1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:545

	addi a0, a0, -portWORD_SIZE
1c000e12 <pxPortInitialiseStack+0x12> addi	a0,a0,-4
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:546
	store_x t0, 0(a0)					/* mstatus onto the stack. */
1c000e14 <pxPortInitialiseStack+0x14> sw	t0,0(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:547
	addi a0, a0, -(22 * portWORD_SIZE)	/* Space for registers x11-x31. */
1c000e18 <pxPortInitialiseStack+0x18> addi	a0,a0,-88
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:548
	store_x a2, 0(a0)					/* Task parameters (pvParameters parameter) goes into register X10/a0 on the stack. */
1c000e1c <pxPortInitialiseStack+0x1c> sw	a2,0(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:549
	addi a0, a0, -(6 * portWORD_SIZE)	/* Space for registers x5-x9. */
1c000e1e <pxPortInitialiseStack+0x1e> addi	a0,a0,-24
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:550
	store_x x0, 0(a0)					/* Return address onto the stack, could be portTASK_RETURN_ADDRESS */
1c000e20 <pxPortInitialiseStack+0x20> sw	zero,0(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:551
	addi t0, x0, portasmADDITIONAL_CONTEXT_SIZE /* The number of chip specific additional registers. */
1c000e24 <pxPortInitialiseStack+0x24> li	t0,6
chip_specific_stack_frame():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:553
chip_specific_stack_frame:				/* First add any chip specific registers to the stack frame being created. */
	beq t0, x0, 1f						/* No more chip specific registers to save. */
1c000e26 <chip_specific_stack_frame> beqz	t0,1c000e34 <chip_specific_stack_frame+0xe>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:554
	addi a0, a0, -portWORD_SIZE			/* Make space for chip specific register. */
1c000e2a <chip_specific_stack_frame+0x4> addi	a0,a0,-4
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:555
	store_x x0, 0(a0)					/* Give the chip specific register an initial value of zero. */
1c000e2c <chip_specific_stack_frame+0x6> sw	zero,0(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:556
	addi t0, t0, -1						/* Decrement the count of chip specific registers remaining. */
1c000e30 <chip_specific_stack_frame+0xa> addi	t0,t0,-1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:557
	j chip_specific_stack_frame			/* Until no more chip specific registers. */
1c000e32 <chip_specific_stack_frame+0xc> j	1c000e26 <chip_specific_stack_frame>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:559
1:
	addi a0, a0, -portWORD_SIZE
1c000e34 <chip_specific_stack_frame+0xe> addi	a0,a0,-4
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:560
	store_x a1, 0(a0)					/* mret value (pxCode parameter) onto the stack. */
1c000e36 <chip_specific_stack_frame+0x10> sw	a1,0(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/portASM.S:561
	ret
1c000e38 <chip_specific_stack_frame+0x12> ret
	...
fc_soc_event_handler():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fc_event.c:61

/* TODO: fix */
__attribute__((section(".text"))) void fc_soc_event_handler(void)
{
	/* Pop one event element from the FIFO */
	uint32_t event = SIMPLE_IRQ->FIFO;
1c000e42 <fc_soc_event_handler> lui	a5,0x1a10a
1c000e46 <fc_soc_event_handler+0x4> addi	a5,a5,-2048 # 1a109800 <__heap_l1_cluster_start+0xa1097e0>
1c000e4a <fc_soc_event_handler+0x8> lw	a0,36(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fc_event.c:66

	event &= 0xFF;

	/* redirect to handler with jump table */
	if (fc_event_handlers[event] != NULL) {
1c000e4c <fc_soc_event_handler+0xa> addi	a5,gp,-1496 # 1c008e04 <fc_event_handlers>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fc_event.c:63
	event &= 0xFF;
1c000e50 <fc_soc_event_handler+0xe> andi	a0,a0,255
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fc_event.c:66
	if (fc_event_handlers[event] != NULL) {
1c000e54 <fc_soc_event_handler+0x12> slli	a4,a0,0x2
1c000e58 <fc_soc_event_handler+0x16> add	a5,a5,a4
1c000e5a <fc_soc_event_handler+0x18> lw	a4,0(a5)
1c000e5c <fc_soc_event_handler+0x1a> beqz	a4,1c000e62 <fc_soc_event_handler+0x20>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fc_event.c:67
		fc_event_handlers[event]((void *)event);
1c000e5e <fc_soc_event_handler+0x1c> lw	a5,0(a5)
1c000e60 <fc_soc_event_handler+0x1e> jr	a5
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fc_event.c:69
	}
}
1c000e62 <fc_soc_event_handler+0x20> ret
memcpy():
1c000e64 <memcpy> mv	t1,a0
1c000e66 <memcpy+0x2> beqz	a2,1c000e78 <memcpy+0x14>
1c000e68 <memcpy+0x4> lb	t2,0(a1)
1c000e6c <memcpy+0x8> sb	t2,0(t1)
1c000e70 <memcpy+0xc> addi	a2,a2,-1
1c000e72 <memcpy+0xe> addi	t1,t1,1
1c000e74 <memcpy+0x10> addi	a1,a1,1
1c000e76 <memcpy+0x12> bnez	a2,1c000e68 <memcpy+0x4>
1c000e78 <memcpy+0x14> ret
memset():
1c000e7a <memset> mv	t1,a0
1c000e7c <memset+0x2> beqz	a2,1c000e88 <memset+0xe>
1c000e7e <memset+0x4> sb	a1,0(t1)
1c000e82 <memset+0x8> addi	a2,a2,-1
1c000e84 <memset+0xa> addi	t1,t1,1
1c000e86 <memset+0xc> bnez	a2,1c000e7e <memset+0x4>
1c000e88 <memset+0xe> ret
__clzsi2():
/scratch/balasr/riscv-gnu-upstream/build-gcc-newlib-stage2/riscv32-unknown-elf/rv32imac/ilp32/libgcc/../../../../.././riscv-gcc/libgcc/libgcc2.c:710
1c000e8a <__clzsi2> lui	a5,0x10
1c000e8c <__clzsi2+0x2> bgeu	a0,a5,1c000eb8 <__clzsi2+0x2e>
/scratch/balasr/riscv-gnu-upstream/build-gcc-newlib-stage2/riscv32-unknown-elf/rv32imac/ilp32/libgcc/../../../../.././riscv-gcc/libgcc/libgcc2.c:710 (discriminator 3)
1c000e90 <__clzsi2+0x6> li	a5,255
1c000e94 <__clzsi2+0xa> sltu	a5,a5,a0
1c000e98 <__clzsi2+0xe> slli	a5,a5,0x3
/scratch/balasr/riscv-gnu-upstream/build-gcc-newlib-stage2/riscv32-unknown-elf/rv32imac/ilp32/libgcc/../../../../.././riscv-gcc/libgcc/libgcc2.c:710 (discriminator 14)
1c000e9a <__clzsi2+0x10> lui	a4,0x1c009
1c000e9e <__clzsi2+0x14> li	a3,32
1c000ea2 <__clzsi2+0x18> sub	a3,a3,a5
1c000ea4 <__clzsi2+0x1a> srl	a0,a0,a5
1c000ea8 <__clzsi2+0x1e> addi	a5,a4,-1324 # 1c008ad4 <__clz_tab>
1c000eac <__clzsi2+0x22> add	a0,a0,a5
1c000eae <__clzsi2+0x24> lbu	a0,0(a0)
/scratch/balasr/riscv-gnu-upstream/build-gcc-newlib-stage2/riscv32-unknown-elf/rv32imac/ilp32/libgcc/../../../../.././riscv-gcc/libgcc/libgcc2.c:713 (discriminator 14)
1c000eb2 <__clzsi2+0x28> sub	a0,a3,a0
1c000eb6 <__clzsi2+0x2c> ret
/scratch/balasr/riscv-gnu-upstream/build-gcc-newlib-stage2/riscv32-unknown-elf/rv32imac/ilp32/libgcc/../../../../.././riscv-gcc/libgcc/libgcc2.c:710 (discriminator 4)
1c000eb8 <__clzsi2+0x2e> lui	a4,0x1000
1c000ebc <__clzsi2+0x32> li	a5,16
1c000ebe <__clzsi2+0x34> bltu	a0,a4,1c000e9a <__clzsi2+0x10>
/scratch/balasr/riscv-gnu-upstream/build-gcc-newlib-stage2/riscv32-unknown-elf/rv32imac/ilp32/libgcc/../../../../.././riscv-gcc/libgcc/libgcc2.c:710
1c000ec2 <__clzsi2+0x38> li	a5,24
1c000ec4 <__clzsi2+0x3a> j	1c000e9a <__clzsi2+0x10>
vListInitialise():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:42
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1c000ec6 <vListInitialise> addi	a5,a0,8
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:46

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1c000eca <vListInitialise+0x4> li	a4,-1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:42
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1c000ecc <vListInitialise+0x6> sw	a5,4(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:46
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1c000ece <vListInitialise+0x8> sw	a4,8(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:50

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1c000ed0 <vListInitialise+0xa> sw	a5,12(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:51
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1c000ed2 <vListInitialise+0xc> sw	a5,16(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:53

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1c000ed4 <vListInitialise+0xe> sw	zero,0(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:59

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1c000ed8 <vListInitialise+0x12> ret
vListInitialiseItem():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:65
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
1c000eda <vListInitialiseItem> sw	zero,16(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:71

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1c000ede <vListInitialiseItem+0x4> ret
vListInsertEnd():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:76
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1c000ee0 <vListInsertEnd> lw	a5,4(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:88

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1c000ee2 <vListInsertEnd+0x2> lw	a4,8(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:87
	pxNewListItem->pxNext = pxIndex;
1c000ee4 <vListInsertEnd+0x4> sw	a5,4(a1)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:88
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1c000ee6 <vListInsertEnd+0x6> sw	a4,8(a1)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:93

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1c000ee8 <vListInsertEnd+0x8> lw	a4,8(a5)
1c000eea <vListInsertEnd+0xa> sw	a1,4(a4)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:94
	pxIndex->pxPrevious = pxNewListItem;
1c000eec <vListInsertEnd+0xc> sw	a1,8(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:99

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
1c000eee <vListInsertEnd+0xe> lw	a5,0(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:97
	pxNewListItem->pxContainer = pxList;
1c000ef0 <vListInsertEnd+0x10> sw	a0,16(a1)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:99
	( pxList->uxNumberOfItems )++;
1c000ef2 <vListInsertEnd+0x12> addi	a5,a5,1
1c000ef4 <vListInsertEnd+0x14> sw	a5,0(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:100
}
1c000ef6 <vListInsertEnd+0x16> ret
vListInsert():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:106
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1c000ef8 <vListInsert> lw	a3,0(a1)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:122
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1c000efa <vListInsert+0x2> li	a5,-1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:150
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
1c000efc <vListInsert+0x4> addi	a4,a0,8
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:122
	if( xValueOfInsertion == portMAX_DELAY )
1c000f00 <vListInsert+0x8> bne	a3,a5,1c000f1a <vListInsert+0x22>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:124
		pxIterator = pxList->xListEnd.pxPrevious;
1c000f04 <vListInsert+0xc> lw	a5,16(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:157
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1c000f06 <vListInsert+0xe> lw	a4,4(a5)
1c000f08 <vListInsert+0x10> sw	a4,4(a1)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:158
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1c000f0a <vListInsert+0x12> sw	a1,8(a4)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:159
	pxNewListItem->pxPrevious = pxIterator;
1c000f0c <vListInsert+0x14> sw	a5,8(a1)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:160
	pxIterator->pxNext = pxNewListItem;
1c000f0e <vListInsert+0x16> sw	a1,4(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:166

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
1c000f10 <vListInsert+0x18> lw	a5,0(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:164
	pxNewListItem->pxContainer = pxList;
1c000f12 <vListInsert+0x1a> sw	a0,16(a1)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:166
	( pxList->uxNumberOfItems )++;
1c000f14 <vListInsert+0x1c> addi	a5,a5,1
1c000f16 <vListInsert+0x1e> sw	a5,0(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:167
}
1c000f18 <vListInsert+0x20> ret
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:150 (discriminator 1)
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
1c000f1a <vListInsert+0x22> mv	a5,a4
1c000f1c <vListInsert+0x24> lw	a4,4(a4)
1c000f1e <vListInsert+0x26> lw	a2,0(a4)
1c000f20 <vListInsert+0x28> bgeu	a3,a2,1c000f1a <vListInsert+0x22>
1c000f24 <vListInsert+0x2c> j	1c000f06 <vListInsert+0xe>
uxListRemove():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:176
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1c000f26 <uxListRemove> lw	a3,4(a0)
1c000f28 <uxListRemove+0x2> lw	a4,8(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:174
List_t * const pxList = pxItemToRemove->pxContainer;
1c000f2a <uxListRemove+0x4> lw	a5,16(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:176
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1c000f2c <uxListRemove+0x6> sw	a4,8(a3)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:177
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1c000f2e <uxListRemove+0x8> sw	a3,4(a4)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:183

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1c000f30 <uxListRemove+0xa> lw	a3,4(a5)
1c000f32 <uxListRemove+0xc> bne	a3,a0,1c000f38 <uxListRemove+0x12>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:185
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1c000f36 <uxListRemove+0x10> sw	a4,4(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:193
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
1c000f38 <uxListRemove+0x12> lw	a4,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:192
	pxItemToRemove->pxContainer = NULL;
1c000f3a <uxListRemove+0x14> sw	zero,16(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:193
	( pxList->uxNumberOfItems )--;
1c000f3e <uxListRemove+0x18> addi	a4,a4,-1
1c000f40 <uxListRemove+0x1a> sw	a4,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:195

	return pxList->uxNumberOfItems;
1c000f42 <uxListRemove+0x1c> lw	a0,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/list.c:196
}
1c000f44 <uxListRemove+0x1e> ret
prvIsQueueEmpty():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2292
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
1c000f46 <prvIsQueueEmpty> addi	sp,sp,-16
1c000f48 <prvIsQueueEmpty+0x2> sw	s0,8(sp)
1c000f4a <prvIsQueueEmpty+0x4> mv	s0,a0
1c000f4c <prvIsQueueEmpty+0x6> sw	ra,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2295
BaseType_t xReturn;

	taskENTER_CRITICAL();
1c000f4e <prvIsQueueEmpty+0x8> jal	ra,1c00200c <vTaskEnterCritical>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2297
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1c000f52 <prvIsQueueEmpty+0xc> lw	s0,56(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2306
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
1c000f54 <prvIsQueueEmpty+0xe> jal	ra,1c002026 <vTaskExitCritical>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2309

	return xReturn;
}
1c000f58 <prvIsQueueEmpty+0x12> lw	ra,12(sp)
1c000f5a <prvIsQueueEmpty+0x14> seqz	a0,s0
1c000f5e <prvIsQueueEmpty+0x18> lw	s0,8(sp)
1c000f60 <prvIsQueueEmpty+0x1a> addi	sp,sp,16
1c000f62 <prvIsQueueEmpty+0x1c> ret
prvCopyDataToQueue():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2075
{
1c000f64 <prvCopyDataToQueue> addi	sp,sp,-16
1c000f66 <prvCopyDataToQueue+0x2> sw	s1,4(sp)
1c000f68 <prvCopyDataToQueue+0x4> mv	s1,a2
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2083
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1c000f6a <prvCopyDataToQueue+0x6> lw	a2,64(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2075
{
1c000f6c <prvCopyDataToQueue+0x8> sw	s2,0(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2081
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1c000f6e <prvCopyDataToQueue+0xa> lw	s2,56(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2075
{
1c000f72 <prvCopyDataToQueue+0xe> sw	s0,8(sp)
1c000f74 <prvCopyDataToQueue+0x10> sw	ra,12(sp)
1c000f76 <prvCopyDataToQueue+0x12> mv	s0,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2083
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1c000f78 <prvCopyDataToQueue+0x14> bnez	a2,1c000fa0 <prvCopyDataToQueue+0x3c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2087
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1c000f7a <prvCopyDataToQueue+0x16> lw	a5,0(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2076
BaseType_t xReturn = pdFALSE;
1c000f7c <prvCopyDataToQueue+0x18> li	s1,0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2087
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1c000f7e <prvCopyDataToQueue+0x1a> bnez	a5,1c000f8c <prvCopyDataToQueue+0x28>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2090
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
1c000f80 <prvCopyDataToQueue+0x1c> lw	a0,8(a0)
1c000f82 <prvCopyDataToQueue+0x1e> jal	ra,1c001e4c <xTaskPriorityDisinherit>
1c000f86 <prvCopyDataToQueue+0x22> mv	s1,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2091
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
1c000f88 <prvCopyDataToQueue+0x24> sw	zero,8(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2147
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1c000f8c <prvCopyDataToQueue+0x28> addi	s2,s2,1
1c000f8e <prvCopyDataToQueue+0x2a> sw	s2,56(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2150
}
1c000f92 <prvCopyDataToQueue+0x2e> lw	ra,12(sp)
1c000f94 <prvCopyDataToQueue+0x30> lw	s0,8(sp)
1c000f96 <prvCopyDataToQueue+0x32> lw	s2,0(sp)
1c000f98 <prvCopyDataToQueue+0x34> mv	a0,s1
1c000f9a <prvCopyDataToQueue+0x36> lw	s1,4(sp)
1c000f9c <prvCopyDataToQueue+0x38> addi	sp,sp,16
1c000f9e <prvCopyDataToQueue+0x3a> ret
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2100
	else if( xPosition == queueSEND_TO_BACK )
1c000fa0 <prvCopyDataToQueue+0x3c> bnez	s1,1c000fba <prvCopyDataToQueue+0x56>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2102
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
1c000fa2 <prvCopyDataToQueue+0x3e> lw	a0,4(a0)
1c000fa4 <prvCopyDataToQueue+0x40> jal	1c000e64 <memcpy>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2103
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
1c000fa6 <prvCopyDataToQueue+0x42> lw	a5,4(s0)
1c000fa8 <prvCopyDataToQueue+0x44> lw	a4,64(s0)
1c000faa <prvCopyDataToQueue+0x46> add	a5,a5,a4
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2104
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1c000fac <prvCopyDataToQueue+0x48> lw	a4,8(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2103
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
1c000fae <prvCopyDataToQueue+0x4a> sw	a5,4(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2104
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1c000fb0 <prvCopyDataToQueue+0x4c> bltu	a5,a4,1c000f8c <prvCopyDataToQueue+0x28>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2106
			pxQueue->pcWriteTo = pxQueue->pcHead;
1c000fb4 <prvCopyDataToQueue+0x50> lw	a5,0(s0)
1c000fb6 <prvCopyDataToQueue+0x52> sw	a5,4(s0)
1c000fb8 <prvCopyDataToQueue+0x54> j	1c000f8c <prvCopyDataToQueue+0x28>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2115
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
1c000fba <prvCopyDataToQueue+0x56> lw	a0,12(a0)
1c000fbc <prvCopyDataToQueue+0x58> jal	1c000e64 <memcpy>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2116
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
1c000fbe <prvCopyDataToQueue+0x5a> lw	a4,64(s0)
1c000fc0 <prvCopyDataToQueue+0x5c> lw	a5,12(s0)
1c000fc2 <prvCopyDataToQueue+0x5e> neg	a3,a4
1c000fc6 <prvCopyDataToQueue+0x62> sub	a5,a5,a4
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2117
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1c000fc8 <prvCopyDataToQueue+0x64> lw	a4,0(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2116
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
1c000fca <prvCopyDataToQueue+0x66> sw	a5,12(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2117
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1c000fcc <prvCopyDataToQueue+0x68> bgeu	a5,a4,1c000fd6 <prvCopyDataToQueue+0x72>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2119
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
1c000fd0 <prvCopyDataToQueue+0x6c> lw	a5,8(s0)
1c000fd2 <prvCopyDataToQueue+0x6e> add	a5,a5,a3
1c000fd4 <prvCopyDataToQueue+0x70> sw	a5,12(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2126
		if( xPosition == queueOVERWRITE )
1c000fd6 <prvCopyDataToQueue+0x72> li	a5,2
1c000fd8 <prvCopyDataToQueue+0x74> bne	s1,a5,1c000fe6 <prvCopyDataToQueue+0x82>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2076
BaseType_t xReturn = pdFALSE;
1c000fdc <prvCopyDataToQueue+0x78> li	s1,0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2128
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1c000fde <prvCopyDataToQueue+0x7a> beqz	s2,1c000f8c <prvCopyDataToQueue+0x28>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2134
				--uxMessagesWaiting;
1c000fe2 <prvCopyDataToQueue+0x7e> addi	s2,s2,-1
1c000fe4 <prvCopyDataToQueue+0x80> j	1c000f8c <prvCopyDataToQueue+0x28>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2076
BaseType_t xReturn = pdFALSE;
1c000fe6 <prvCopyDataToQueue+0x82> li	s1,0
1c000fe8 <prvCopyDataToQueue+0x84> j	1c000f8c <prvCopyDataToQueue+0x28>
prvCopyDataFromQueue():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2154
{
1c000fea <prvCopyDataFromQueue> mv	a5,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2155
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1c000fec <prvCopyDataFromQueue+0x2> lw	a2,64(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2154
{
1c000fee <prvCopyDataFromQueue+0x4> mv	a0,a1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2155
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1c000ff0 <prvCopyDataFromQueue+0x6> beqz	a2,1c001006 <prvCopyDataFromQueue+0x1c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2157
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
1c000ff2 <prvCopyDataFromQueue+0x8> lw	a4,12(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2158
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1c000ff4 <prvCopyDataFromQueue+0xa> lw	a3,8(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2157
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
1c000ff6 <prvCopyDataFromQueue+0xc> add	a4,a4,a2
1c000ff8 <prvCopyDataFromQueue+0xe> sw	a4,12(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2158
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1c000ffa <prvCopyDataFromQueue+0x10> bltu	a4,a3,1c001002 <prvCopyDataFromQueue+0x18>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2160
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
1c000ffe <prvCopyDataFromQueue+0x14> lw	a4,0(a5)
1c001000 <prvCopyDataFromQueue+0x16> sw	a4,12(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2166
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
1c001002 <prvCopyDataFromQueue+0x18> lw	a1,12(a5)
1c001004 <prvCopyDataFromQueue+0x1a> j	1c000e64 <memcpy>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2168
}
1c001006 <prvCopyDataFromQueue+0x1c> ret
prvUnlockQueue():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2172
{
1c001008 <prvUnlockQueue> addi	sp,sp,-16
1c00100a <prvUnlockQueue+0x2> sw	s0,8(sp)
1c00100c <prvUnlockQueue+0x4> mv	s0,a0
1c00100e <prvUnlockQueue+0x6> sw	s1,4(sp)
1c001010 <prvUnlockQueue+0x8> sw	s2,0(sp)
1c001012 <prvUnlockQueue+0xa> sw	ra,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2179
	taskENTER_CRITICAL();
1c001014 <prvUnlockQueue+0xc> jal	ra,1c00200c <vTaskEnterCritical>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2181
		int8_t cTxLock = pxQueue->cTxLock;
1c001018 <prvUnlockQueue+0x10> lbu	s1,69(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2234
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1c00101c <prvUnlockQueue+0x14> addi	s2,s0,36
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2181
		int8_t cTxLock = pxQueue->cTxLock;
1c001020 <prvUnlockQueue+0x18> slli	s1,s1,0x18
1c001022 <prvUnlockQueue+0x1a> srai	s1,s1,0x18
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2184
		while( cTxLock > queueLOCKED_UNMODIFIED )
1c001024 <prvUnlockQueue+0x1c> bgtz	s1,1c00105a <prvUnlockQueue+0x52>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2255
		pxQueue->cTxLock = queueUNLOCKED;
1c001028 <prvUnlockQueue+0x20> li	a5,-1
1c00102a <prvUnlockQueue+0x22> sb	a5,69(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2257
	taskEXIT_CRITICAL();
1c00102e <prvUnlockQueue+0x26> jal	ra,1c002026 <vTaskExitCritical>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2260
	taskENTER_CRITICAL();
1c001032 <prvUnlockQueue+0x2a> jal	ra,1c00200c <vTaskEnterCritical>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2262
		int8_t cRxLock = pxQueue->cRxLock;
1c001036 <prvUnlockQueue+0x2e> lbu	s1,68(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2268
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1c00103a <prvUnlockQueue+0x32> addi	s2,s0,16
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2262
		int8_t cRxLock = pxQueue->cRxLock;
1c00103e <prvUnlockQueue+0x36> slli	s1,s1,0x18
1c001040 <prvUnlockQueue+0x38> srai	s1,s1,0x18
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2264
		while( cRxLock > queueLOCKED_UNMODIFIED )
1c001042 <prvUnlockQueue+0x3a> bgtz	s1,1c001072 <prvUnlockQueue+0x6a>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2285
		pxQueue->cRxLock = queueUNLOCKED;
1c001046 <prvUnlockQueue+0x3e> li	a5,-1
1c001048 <prvUnlockQueue+0x40> sb	a5,68(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2288
}
1c00104c <prvUnlockQueue+0x44> lw	s0,8(sp)
1c00104e <prvUnlockQueue+0x46> lw	ra,12(sp)
1c001050 <prvUnlockQueue+0x48> lw	s1,4(sp)
1c001052 <prvUnlockQueue+0x4a> lw	s2,0(sp)
1c001054 <prvUnlockQueue+0x4c> addi	sp,sp,16
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2287
	taskEXIT_CRITICAL();
1c001056 <prvUnlockQueue+0x4e> j	1c002026 <vTaskExitCritical>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2232
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1c00105a <prvUnlockQueue+0x52> lw	a5,36(s0)
1c00105c <prvUnlockQueue+0x54> beqz	a5,1c001028 <prvUnlockQueue+0x20>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2234
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1c00105e <prvUnlockQueue+0x56> mv	a0,s2
1c001060 <prvUnlockQueue+0x58> jal	ra,1c001cd4 <xTaskRemoveFromEventList>
1c001064 <prvUnlockQueue+0x5c> beqz	a0,1c00106a <prvUnlockQueue+0x62>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2238
						vTaskMissedYield();
1c001066 <prvUnlockQueue+0x5e> jal	ra,1c001d7c <vTaskMissedYield>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2252
			--cTxLock;
1c00106a <prvUnlockQueue+0x62> addi	s1,s1,-1
1c00106c <prvUnlockQueue+0x64> slli	s1,s1,0x18
1c00106e <prvUnlockQueue+0x66> srai	s1,s1,0x18
1c001070 <prvUnlockQueue+0x68> j	1c001024 <prvUnlockQueue+0x1c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2266
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1c001072 <prvUnlockQueue+0x6a> lw	a5,16(s0)
1c001074 <prvUnlockQueue+0x6c> beqz	a5,1c001046 <prvUnlockQueue+0x3e>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2268
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1c001076 <prvUnlockQueue+0x6e> mv	a0,s2
1c001078 <prvUnlockQueue+0x70> jal	ra,1c001cd4 <xTaskRemoveFromEventList>
1c00107c <prvUnlockQueue+0x74> beqz	a0,1c001082 <prvUnlockQueue+0x7a>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2270
					vTaskMissedYield();
1c00107e <prvUnlockQueue+0x76> jal	ra,1c001d7c <vTaskMissedYield>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2277
				--cRxLock;
1c001082 <prvUnlockQueue+0x7a> addi	s1,s1,-1
1c001084 <prvUnlockQueue+0x7c> slli	s1,s1,0x18
1c001086 <prvUnlockQueue+0x7e> srai	s1,s1,0x18
1c001088 <prvUnlockQueue+0x80> j	1c001042 <prvUnlockQueue+0x3a>
xQueueGenericReset():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:256
{
1c00108a <xQueueGenericReset> addi	sp,sp,-16
1c00108c <xQueueGenericReset+0x2> sw	ra,12(sp)
1c00108e <xQueueGenericReset+0x4> sw	s0,8(sp)
1c001090 <xQueueGenericReset+0x6> sw	s1,4(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:259
	configASSERT( pxQueue );
1c001092 <xQueueGenericReset+0x8> bnez	a0,1c0010b4 <xQueueGenericReset+0x2a>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:259 (discriminator 1)
1c001094 <xQueueGenericReset+0xa> lui	a3,0x1c008
1c001098 <xQueueGenericReset+0xe> lui	a2,0x1c008
1c00109c <xQueueGenericReset+0x12> lui	a0,0x1c008
1c0010a0 <xQueueGenericReset+0x16> mv	a3,a3
1c0010a4 <xQueueGenericReset+0x1a> addi	a2,a2,912 # 1c008390 <__func__.19>
1c0010a8 <xQueueGenericReset+0x1e> li	a1,259
1c0010ac <xQueueGenericReset+0x22> addi	a0,a0,8 # 1c008008 <__l2_priv0_end+0x3208>
1c0010b0 <xQueueGenericReset+0x26> jal	ra,1c0037c8 <__assert_func>
1c0010b4 <xQueueGenericReset+0x2a> mv	s0,a0
1c0010b6 <xQueueGenericReset+0x2c> mv	s1,a1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:261
	taskENTER_CRITICAL();
1c0010b8 <xQueueGenericReset+0x2e> jal	ra,1c00200c <vTaskEnterCritical>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:263
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
1c0010bc <xQueueGenericReset+0x32> lw	a3,64(s0)
1c0010be <xQueueGenericReset+0x34> lw	a5,60(s0)
1c0010c0 <xQueueGenericReset+0x36> lw	a4,0(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:264
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1c0010c2 <xQueueGenericReset+0x38> sw	zero,56(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:263
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
1c0010c6 <xQueueGenericReset+0x3c> mul	a5,a3,a5
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:265
		pxQueue->pcWriteTo = pxQueue->pcHead;
1c0010ca <xQueueGenericReset+0x40> sw	a4,4(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:263
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
1c0010cc <xQueueGenericReset+0x42> add	a2,a4,a5
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:266
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
1c0010d0 <xQueueGenericReset+0x46> sub	a5,a5,a3
1c0010d2 <xQueueGenericReset+0x48> add	a5,a5,a4
1c0010d4 <xQueueGenericReset+0x4a> sw	a5,12(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:267
		pxQueue->cRxLock = queueUNLOCKED;
1c0010d6 <xQueueGenericReset+0x4c> li	a5,-1
1c0010d8 <xQueueGenericReset+0x4e> sb	a5,68(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:263
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
1c0010dc <xQueueGenericReset+0x52> sw	a2,8(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:268
		pxQueue->cTxLock = queueUNLOCKED;
1c0010de <xQueueGenericReset+0x54> sb	a5,69(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:270
		if( xNewQueue == pdFALSE )
1c0010e2 <xQueueGenericReset+0x58> bnez	s1,1c001106 <xQueueGenericReset+0x7c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:277
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1c0010e4 <xQueueGenericReset+0x5a> lw	a5,16(s0)
1c0010e6 <xQueueGenericReset+0x5c> beqz	a5,1c0010f6 <xQueueGenericReset+0x6c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:279
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1c0010e8 <xQueueGenericReset+0x5e> addi	a0,s0,16
1c0010ec <xQueueGenericReset+0x62> jal	ra,1c001cd4 <xTaskRemoveFromEventList>
1c0010f0 <xQueueGenericReset+0x66> beqz	a0,1c0010f6 <xQueueGenericReset+0x6c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:281
					queueYIELD_IF_USING_PREEMPTION();
1c0010f2 <xQueueGenericReset+0x68> ecall
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:300
	taskEXIT_CRITICAL();
1c0010f6 <xQueueGenericReset+0x6c> jal	ra,1c002026 <vTaskExitCritical>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:305
}
1c0010fa <xQueueGenericReset+0x70> lw	ra,12(sp)
1c0010fc <xQueueGenericReset+0x72> lw	s0,8(sp)
1c0010fe <xQueueGenericReset+0x74> lw	s1,4(sp)
1c001100 <xQueueGenericReset+0x76> li	a0,1
1c001102 <xQueueGenericReset+0x78> addi	sp,sp,16
1c001104 <xQueueGenericReset+0x7a> ret
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:296
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1c001106 <xQueueGenericReset+0x7c> addi	a0,s0,16
1c00110a <xQueueGenericReset+0x80> jal	1c000ec6 <vListInitialise>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:297
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1c00110c <xQueueGenericReset+0x82> addi	a0,s0,36
1c001110 <xQueueGenericReset+0x86> jal	1c000ec6 <vListInitialise>
1c001112 <xQueueGenericReset+0x88> j	1c0010f6 <xQueueGenericReset+0x6c>
xQueueGenericCreate():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:369
	{
1c001114 <xQueueGenericCreate> addi	sp,sp,-32
1c001116 <xQueueGenericCreate+0x2> sw	ra,28(sp)
1c001118 <xQueueGenericCreate+0x4> sw	s0,24(sp)
1c00111a <xQueueGenericCreate+0x6> sw	s1,20(sp)
1c00111c <xQueueGenericCreate+0x8> sw	s2,16(sp)
1c00111e <xQueueGenericCreate+0xa> sw	s3,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:374
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1c001120 <xQueueGenericCreate+0xc> bnez	a0,1c001142 <xQueueGenericCreate+0x2e>
1c001122 <xQueueGenericCreate+0xe> lui	a3,0x1c008
1c001126 <xQueueGenericCreate+0x12> lui	a2,0x1c008
1c00112a <xQueueGenericCreate+0x16> lui	a0,0x1c008
1c00112e <xQueueGenericCreate+0x1a> addi	a3,a3,76 # 1c00804c <__l2_priv0_end+0x324c>
1c001132 <xQueueGenericCreate+0x1e> addi	a2,a2,892 # 1c00837c <__func__.18>
1c001136 <xQueueGenericCreate+0x22> li	a1,374
1c00113a <xQueueGenericCreate+0x26> addi	a0,a0,8 # 1c008008 <__l2_priv0_end+0x3208>
1c00113e <xQueueGenericCreate+0x2a> jal	ra,1c0037c8 <__assert_func>
1c001142 <xQueueGenericCreate+0x2e> mv	s2,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:379
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1c001144 <xQueueGenericCreate+0x30> mul	a0,a0,a1
1c001148 <xQueueGenericCreate+0x34> mv	s1,a1
1c00114a <xQueueGenericCreate+0x36> mv	s3,a2
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:390
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
1c00114c <xQueueGenericCreate+0x38> addi	a0,a0,80
1c001150 <xQueueGenericCreate+0x3c> jal	ra,1c00296a <pvPortMalloc>
1c001154 <xQueueGenericCreate+0x40> mv	s0,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:392
		if( pxNewQueue != NULL )
1c001156 <xQueueGenericCreate+0x42> beqz	a0,1c001172 <xQueueGenericCreate+0x5e>
prvInitialiseNewQueue():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:428
	if( uxItemSize == ( UBaseType_t ) 0 )
1c001158 <xQueueGenericCreate+0x44> mv	a5,a0
1c00115a <xQueueGenericCreate+0x46> beqz	s1,1c001160 <xQueueGenericCreate+0x4c>
xQueueGenericCreate():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:397
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
1c00115c <xQueueGenericCreate+0x48> addi	a5,a0,80
prvInitialiseNewQueue():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:439
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1c001160 <xQueueGenericCreate+0x4c> sw	a5,0(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:444
	pxNewQueue->uxLength = uxQueueLength;
1c001162 <xQueueGenericCreate+0x4e> sw	s2,60(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:445
	pxNewQueue->uxItemSize = uxItemSize;
1c001166 <xQueueGenericCreate+0x52> sw	s1,64(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:446
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1c001168 <xQueueGenericCreate+0x54> li	a1,1
1c00116a <xQueueGenericCreate+0x56> mv	a0,s0
1c00116c <xQueueGenericCreate+0x58> jal	1c00108a <xQueueGenericReset>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:450
		pxNewQueue->ucQueueType = ucQueueType;
1c00116e <xQueueGenericCreate+0x5a> sb	s3,76(s0)
xQueueGenericCreate():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:417
	}
1c001172 <xQueueGenericCreate+0x5e> lw	ra,28(sp)
1c001174 <xQueueGenericCreate+0x60> mv	a0,s0
1c001176 <xQueueGenericCreate+0x62> lw	s0,24(sp)
1c001178 <xQueueGenericCreate+0x64> lw	s1,20(sp)
1c00117a <xQueueGenericCreate+0x66> lw	s2,16(sp)
1c00117c <xQueueGenericCreate+0x68> lw	s3,12(sp)
1c00117e <xQueueGenericCreate+0x6a> addi	sp,sp,32
1c001180 <xQueueGenericCreate+0x6c> ret
xQueueCreateCountingSemaphore():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:715
	{
1c001182 <xQueueCreateCountingSemaphore> addi	sp,sp,-16
1c001184 <xQueueCreateCountingSemaphore+0x2> sw	ra,12(sp)
1c001186 <xQueueCreateCountingSemaphore+0x4> sw	s0,8(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:718
		configASSERT( uxMaxCount != 0 );
1c001188 <xQueueCreateCountingSemaphore+0x6> bnez	a0,1c0011aa <xQueueCreateCountingSemaphore+0x28>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:718 (discriminator 1)
1c00118a <xQueueCreateCountingSemaphore+0x8> lui	a3,0x1c008
1c00118e <xQueueCreateCountingSemaphore+0xc> lui	a2,0x1c008
1c001192 <xQueueCreateCountingSemaphore+0x10> addi	a3,a3,112 # 1c008070 <__l2_priv0_end+0x3270>
1c001196 <xQueueCreateCountingSemaphore+0x14> addi	a2,a2,860 # 1c00835c <__func__.14>
1c00119a <xQueueCreateCountingSemaphore+0x18> li	a1,718
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:719 (discriminator 1)
		configASSERT( uxInitialCount <= uxMaxCount );
1c00119e <xQueueCreateCountingSemaphore+0x1c> lui	a0,0x1c008
1c0011a2 <xQueueCreateCountingSemaphore+0x20> addi	a0,a0,8 # 1c008008 <__l2_priv0_end+0x3208>
1c0011a6 <xQueueCreateCountingSemaphore+0x24> jal	ra,1c0037c8 <__assert_func>
1c0011aa <xQueueCreateCountingSemaphore+0x28> mv	s0,a1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:719
1c0011ac <xQueueCreateCountingSemaphore+0x2a> bgeu	a0,a1,1c0011c6 <xQueueCreateCountingSemaphore+0x44>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:719 (discriminator 1)
1c0011b0 <xQueueCreateCountingSemaphore+0x2e> lui	a3,0x1c008
1c0011b4 <xQueueCreateCountingSemaphore+0x32> lui	a2,0x1c008
1c0011b8 <xQueueCreateCountingSemaphore+0x36> addi	a3,a3,128 # 1c008080 <__l2_priv0_end+0x3280>
1c0011bc <xQueueCreateCountingSemaphore+0x3a> addi	a2,a2,860 # 1c00835c <__func__.14>
1c0011c0 <xQueueCreateCountingSemaphore+0x3e> li	a1,719
1c0011c4 <xQueueCreateCountingSemaphore+0x42> j	1c00119e <xQueueCreateCountingSemaphore+0x1c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:721
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
1c0011c6 <xQueueCreateCountingSemaphore+0x44> li	a2,2
1c0011c8 <xQueueCreateCountingSemaphore+0x46> li	a1,0
1c0011ca <xQueueCreateCountingSemaphore+0x48> jal	1c001114 <xQueueGenericCreate>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:723
		if( xHandle != NULL )
1c0011cc <xQueueCreateCountingSemaphore+0x4a> beqz	a0,1c0011d0 <xQueueCreateCountingSemaphore+0x4e>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:725
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
1c0011ce <xQueueCreateCountingSemaphore+0x4c> sw	s0,56(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:735
	}
1c0011d0 <xQueueCreateCountingSemaphore+0x4e> lw	ra,12(sp)
1c0011d2 <xQueueCreateCountingSemaphore+0x50> lw	s0,8(sp)
1c0011d4 <xQueueCreateCountingSemaphore+0x52> addi	sp,sp,16
1c0011d6 <xQueueCreateCountingSemaphore+0x54> ret
xQueueGenericSend():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:741
{
1c0011d8 <xQueueGenericSend> addi	sp,sp,-64
1c0011da <xQueueGenericSend+0x2> sw	ra,60(sp)
1c0011dc <xQueueGenericSend+0x4> sw	s0,56(sp)
1c0011de <xQueueGenericSend+0x6> sw	s1,52(sp)
1c0011e0 <xQueueGenericSend+0x8> sw	s2,48(sp)
1c0011e2 <xQueueGenericSend+0xa> sw	s3,44(sp)
1c0011e4 <xQueueGenericSend+0xc> sw	s4,40(sp)
1c0011e6 <xQueueGenericSend+0xe> sw	s5,36(sp)
1c0011e8 <xQueueGenericSend+0x10> sw	s6,32(sp)
1c0011ea <xQueueGenericSend+0x12> sw	a2,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:746
	configASSERT( pxQueue );
1c0011ec <xQueueGenericSend+0x14> bnez	a0,1c00120e <xQueueGenericSend+0x36>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:746 (discriminator 1)
1c0011ee <xQueueGenericSend+0x16> lui	a3,0x1c008
1c0011f2 <xQueueGenericSend+0x1a> lui	a2,0x1c008
1c0011f6 <xQueueGenericSend+0x1e> mv	a3,a3
1c0011fa <xQueueGenericSend+0x22> addi	a2,a2,840 # 1c008348 <__func__.13>
1c0011fe <xQueueGenericSend+0x26> li	a1,746
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:747 (discriminator 2)
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1c001202 <xQueueGenericSend+0x2a> lui	a0,0x1c008
1c001206 <xQueueGenericSend+0x2e> addi	a0,a0,8 # 1c008008 <__l2_priv0_end+0x3208>
1c00120a <xQueueGenericSend+0x32> jal	ra,1c0037c8 <__assert_func>
1c00120e <xQueueGenericSend+0x36> mv	s0,a0
1c001210 <xQueueGenericSend+0x38> mv	s3,a1
1c001212 <xQueueGenericSend+0x3a> mv	s2,a3
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:747
1c001214 <xQueueGenericSend+0x3c> bnez	a1,1c001230 <xQueueGenericSend+0x58>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:747 (discriminator 1)
1c001216 <xQueueGenericSend+0x3e> lw	a5,64(a0)
1c001218 <xQueueGenericSend+0x40> beqz	a5,1c001230 <xQueueGenericSend+0x58>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:747 (discriminator 2)
1c00121a <xQueueGenericSend+0x42> lui	a3,0x1c008
1c00121e <xQueueGenericSend+0x46> lui	a2,0x1c008
1c001222 <xQueueGenericSend+0x4a> addi	a3,a3,160 # 1c0080a0 <__l2_priv0_end+0x32a0>
1c001226 <xQueueGenericSend+0x4e> addi	a2,a2,840 # 1c008348 <__func__.13>
1c00122a <xQueueGenericSend+0x52> li	a1,747
1c00122e <xQueueGenericSend+0x56> j	1c001202 <xQueueGenericSend+0x2a>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:748
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1c001230 <xQueueGenericSend+0x58> li	a5,2
1c001232 <xQueueGenericSend+0x5a> bne	s2,a5,1c001254 <xQueueGenericSend+0x7c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:748 (discriminator 1)
1c001236 <xQueueGenericSend+0x5e> lw	a4,60(s0)
1c001238 <xQueueGenericSend+0x60> li	a5,1
1c00123a <xQueueGenericSend+0x62> beq	a4,a5,1c001254 <xQueueGenericSend+0x7c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:748 (discriminator 2)
1c00123e <xQueueGenericSend+0x66> lui	a3,0x1c008
1c001242 <xQueueGenericSend+0x6a> lui	a2,0x1c008
1c001246 <xQueueGenericSend+0x6e> addi	a3,a3,248 # 1c0080f8 <__l2_priv0_end+0x32f8>
1c00124a <xQueueGenericSend+0x72> addi	a2,a2,840 # 1c008348 <__func__.13>
1c00124e <xQueueGenericSend+0x76> li	a1,748
1c001252 <xQueueGenericSend+0x7a> j	1c001202 <xQueueGenericSend+0x2a>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:751
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1c001254 <xQueueGenericSend+0x7c> jal	ra,1c001d84 <xTaskGetSchedulerState>
1c001258 <xQueueGenericSend+0x80> mv	s1,a0
1c00125a <xQueueGenericSend+0x82> bnez	a0,1c001276 <xQueueGenericSend+0x9e>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:751 (discriminator 1)
1c00125c <xQueueGenericSend+0x84> lw	a5,12(sp)
1c00125e <xQueueGenericSend+0x86> beqz	a5,1c001278 <xQueueGenericSend+0xa0>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:751 (discriminator 2)
1c001260 <xQueueGenericSend+0x88> lui	a3,0x1c008
1c001264 <xQueueGenericSend+0x8c> lui	a2,0x1c008
1c001268 <xQueueGenericSend+0x90> addi	a3,a3,328 # 1c008148 <__l2_priv0_end+0x3348>
1c00126c <xQueueGenericSend+0x94> addi	a2,a2,840 # 1c008348 <__func__.13>
1c001270 <xQueueGenericSend+0x98> li	a1,751
1c001274 <xQueueGenericSend+0x9c> j	1c001202 <xQueueGenericSend+0x2a>
1c001276 <xQueueGenericSend+0x9e> li	s1,0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:767
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1c001278 <xQueueGenericSend+0xa0> li	s5,2
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:903
		prvLockQueue( pxQueue );
1c00127a <xQueueGenericSend+0xa2> li	s4,-1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:911
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1c00127c <xQueueGenericSend+0xa4> addi	s6,s0,16
1c001280 <xQueueGenericSend+0xa8> j	1c0012f4 <xQueueGenericSend+0x11c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:872
				if( xTicksToWait == ( TickType_t ) 0 )
1c001282 <xQueueGenericSend+0xaa> lw	a5,12(sp)
1c001284 <xQueueGenericSend+0xac> bnez	a5,1c00128e <xQueueGenericSend+0xb6>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:876
					taskEXIT_CRITICAL();
1c001286 <xQueueGenericSend+0xae> jal	ra,1c002026 <vTaskExitCritical>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:944
			return errQUEUE_FULL;
1c00128a <xQueueGenericSend+0xb2> li	a0,0
1c00128c <xQueueGenericSend+0xb4> j	1c001324 <xQueueGenericSend+0x14c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:883
				else if( xEntryTimeSet == pdFALSE )
1c00128e <xQueueGenericSend+0xb6> bnez	s1,1c001296 <xQueueGenericSend+0xbe>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:887
					vTaskInternalSetTimeOutState( &xTimeOut );
1c001290 <xQueueGenericSend+0xb8> addi	a0,sp,24
1c001292 <xQueueGenericSend+0xba> jal	ra,1c001d6e <vTaskInternalSetTimeOutState>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:897
		taskEXIT_CRITICAL();
1c001296 <xQueueGenericSend+0xbe> jal	ra,1c002026 <vTaskExitCritical>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:902
		vTaskSuspendAll();
1c00129a <xQueueGenericSend+0xc2> jal	ra,1c001a16 <vTaskSuspendAll>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:903
		prvLockQueue( pxQueue );
1c00129e <xQueueGenericSend+0xc6> jal	ra,1c00200c <vTaskEnterCritical>
1c0012a2 <xQueueGenericSend+0xca> lbu	a5,68(s0)
1c0012a6 <xQueueGenericSend+0xce> slli	a5,a5,0x18
1c0012a8 <xQueueGenericSend+0xd0> srai	a5,a5,0x18
1c0012aa <xQueueGenericSend+0xd2> bne	a5,s4,1c0012b2 <xQueueGenericSend+0xda>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:903 (discriminator 1)
1c0012ae <xQueueGenericSend+0xd6> sb	zero,68(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:903 (discriminator 3)
1c0012b2 <xQueueGenericSend+0xda> lbu	a5,69(s0)
1c0012b6 <xQueueGenericSend+0xde> slli	a5,a5,0x18
1c0012b8 <xQueueGenericSend+0xe0> srai	a5,a5,0x18
1c0012ba <xQueueGenericSend+0xe2> bne	a5,s4,1c0012c2 <xQueueGenericSend+0xea>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:903 (discriminator 4)
1c0012be <xQueueGenericSend+0xe6> sb	zero,69(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:903 (discriminator 6)
1c0012c2 <xQueueGenericSend+0xea> jal	ra,1c002026 <vTaskExitCritical>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:906 (discriminator 6)
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1c0012c6 <xQueueGenericSend+0xee> addi	a1,sp,12
1c0012c8 <xQueueGenericSend+0xf0> addi	a0,sp,24
1c0012ca <xQueueGenericSend+0xf2> jal	ra,1c002458 <xTaskCheckForTimeOut>
1c0012ce <xQueueGenericSend+0xf6> bnez	a0,1c00134c <xQueueGenericSend+0x174>
prvIsQueueFull():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2335

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
1c0012d0 <xQueueGenericSend+0xf8> jal	ra,1c00200c <vTaskEnterCritical>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2337
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1c0012d4 <xQueueGenericSend+0xfc> lw	a4,56(s0)
1c0012d6 <xQueueGenericSend+0xfe> lw	a5,60(s0)
1c0012d8 <xQueueGenericSend+0x100> bne	a4,a5,1c001338 <xQueueGenericSend+0x160>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2346
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
1c0012dc <xQueueGenericSend+0x104> jal	ra,1c002026 <vTaskExitCritical>
xQueueGenericSend():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:911
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1c0012e0 <xQueueGenericSend+0x108> lw	a1,12(sp)
1c0012e2 <xQueueGenericSend+0x10a> mv	a0,s6
1c0012e4 <xQueueGenericSend+0x10c> jal	ra,1c001c46 <vTaskPlaceOnEventList>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:918
				prvUnlockQueue( pxQueue );
1c0012e8 <xQueueGenericSend+0x110> mv	a0,s0
1c0012ea <xQueueGenericSend+0x112> jal	1c001008 <prvUnlockQueue>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:925
				if( xTaskResumeAll() == pdFALSE )
1c0012ec <xQueueGenericSend+0x114> jal	ra,1c00234c <xTaskResumeAll>
1c0012f0 <xQueueGenericSend+0x118> beqz	a0,1c001346 <xQueueGenericSend+0x16e>
1c0012f2 <xQueueGenericSend+0x11a> li	s1,1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:761
		taskENTER_CRITICAL();
1c0012f4 <xQueueGenericSend+0x11c> jal	ra,1c00200c <vTaskEnterCritical>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:767
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1c0012f8 <xQueueGenericSend+0x120> lw	a4,56(s0)
1c0012fa <xQueueGenericSend+0x122> lw	a5,60(s0)
1c0012fc <xQueueGenericSend+0x124> bltu	a4,a5,1c001304 <xQueueGenericSend+0x12c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:767 (discriminator 1)
1c001300 <xQueueGenericSend+0x128> bne	s2,s5,1c001282 <xQueueGenericSend+0xaa>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:833
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1c001304 <xQueueGenericSend+0x12c> mv	a2,s2
1c001306 <xQueueGenericSend+0x12e> mv	a1,s3
1c001308 <xQueueGenericSend+0x130> mv	a0,s0
1c00130a <xQueueGenericSend+0x132> jal	1c000f64 <prvCopyDataToQueue>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:837
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1c00130c <xQueueGenericSend+0x134> lw	a5,36(s0)
1c00130e <xQueueGenericSend+0x136> beqz	a5,1c001318 <xQueueGenericSend+0x140>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:839
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1c001310 <xQueueGenericSend+0x138> addi	a0,s0,36
1c001314 <xQueueGenericSend+0x13c> jal	ra,1c001cd4 <xTaskRemoveFromEventList>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:852
					else if( xYieldRequired != pdFALSE )
1c001318 <xQueueGenericSend+0x140> beqz	a0,1c00131e <xQueueGenericSend+0x146>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:858
						queueYIELD_IF_USING_PREEMPTION();
1c00131a <xQueueGenericSend+0x142> ecall
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:867
				taskEXIT_CRITICAL();
1c00131e <xQueueGenericSend+0x146> jal	ra,1c002026 <vTaskExitCritical>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:868
				return pdPASS;
1c001322 <xQueueGenericSend+0x14a> li	a0,1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:947
}
1c001324 <xQueueGenericSend+0x14c> lw	ra,60(sp)
1c001326 <xQueueGenericSend+0x14e> lw	s0,56(sp)
1c001328 <xQueueGenericSend+0x150> lw	s1,52(sp)
1c00132a <xQueueGenericSend+0x152> lw	s2,48(sp)
1c00132c <xQueueGenericSend+0x154> lw	s3,44(sp)
1c00132e <xQueueGenericSend+0x156> lw	s4,40(sp)
1c001330 <xQueueGenericSend+0x158> lw	s5,36(sp)
1c001332 <xQueueGenericSend+0x15a> lw	s6,32(sp)
1c001334 <xQueueGenericSend+0x15c> addi	sp,sp,64
1c001336 <xQueueGenericSend+0x15e> ret
prvIsQueueFull():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2346
	taskEXIT_CRITICAL();
1c001338 <xQueueGenericSend+0x160> jal	ra,1c002026 <vTaskExitCritical>
xQueueGenericSend():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:933
				prvUnlockQueue( pxQueue );
1c00133c <xQueueGenericSend+0x164> mv	a0,s0
1c00133e <xQueueGenericSend+0x166> jal	1c001008 <prvUnlockQueue>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:934
				( void ) xTaskResumeAll();
1c001340 <xQueueGenericSend+0x168> jal	ra,1c00234c <xTaskResumeAll>
1c001344 <xQueueGenericSend+0x16c> j	1c0012f2 <xQueueGenericSend+0x11a>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:927
					portYIELD_WITHIN_API();
1c001346 <xQueueGenericSend+0x16e> ecall
1c00134a <xQueueGenericSend+0x172> j	1c0012f2 <xQueueGenericSend+0x11a>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:940
			prvUnlockQueue( pxQueue );
1c00134c <xQueueGenericSend+0x174> mv	a0,s0
1c00134e <xQueueGenericSend+0x176> jal	1c001008 <prvUnlockQueue>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:941
			( void ) xTaskResumeAll();
1c001350 <xQueueGenericSend+0x178> jal	ra,1c00234c <xTaskResumeAll>
1c001354 <xQueueGenericSend+0x17c> j	1c00128a <xQueueGenericSend+0xb2>
xQueueGenericSendFromISR():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:951
{
1c001356 <xQueueGenericSendFromISR> addi	sp,sp,-32
1c001358 <xQueueGenericSendFromISR+0x2> sw	ra,28(sp)
1c00135a <xQueueGenericSendFromISR+0x4> sw	s0,24(sp)
1c00135c <xQueueGenericSendFromISR+0x6> sw	s1,20(sp)
1c00135e <xQueueGenericSendFromISR+0x8> sw	s2,16(sp)
1c001360 <xQueueGenericSendFromISR+0xa> sw	s3,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:956
	configASSERT( pxQueue );
1c001362 <xQueueGenericSendFromISR+0xc> bnez	a0,1c001384 <xQueueGenericSendFromISR+0x2e>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:956 (discriminator 1)
1c001364 <xQueueGenericSendFromISR+0xe> lui	a3,0x1c008
1c001368 <xQueueGenericSendFromISR+0x12> lui	a2,0x1c008
1c00136c <xQueueGenericSendFromISR+0x16> mv	a3,a3
1c001370 <xQueueGenericSendFromISR+0x1a> addi	a2,a2,812 # 1c00832c <__func__.12>
1c001374 <xQueueGenericSendFromISR+0x1e> li	a1,956
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:957 (discriminator 2)
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1c001378 <xQueueGenericSendFromISR+0x22> lui	a0,0x1c008
1c00137c <xQueueGenericSendFromISR+0x26> addi	a0,a0,8 # 1c008008 <__l2_priv0_end+0x3208>
1c001380 <xQueueGenericSendFromISR+0x2a> jal	ra,1c0037c8 <__assert_func>
1c001384 <xQueueGenericSendFromISR+0x2e> mv	s2,a2
1c001386 <xQueueGenericSendFromISR+0x30> mv	s0,a0
1c001388 <xQueueGenericSendFromISR+0x32> mv	a2,a3
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:957
1c00138a <xQueueGenericSendFromISR+0x34> bnez	a1,1c0013a6 <xQueueGenericSendFromISR+0x50>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:957 (discriminator 1)
1c00138c <xQueueGenericSendFromISR+0x36> lw	a5,64(a0)
1c00138e <xQueueGenericSendFromISR+0x38> beqz	a5,1c0013a6 <xQueueGenericSendFromISR+0x50>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:957 (discriminator 2)
1c001390 <xQueueGenericSendFromISR+0x3a> lui	a3,0x1c008
1c001394 <xQueueGenericSendFromISR+0x3e> lui	a2,0x1c008
1c001398 <xQueueGenericSendFromISR+0x42> addi	a3,a3,160 # 1c0080a0 <__l2_priv0_end+0x32a0>
1c00139c <xQueueGenericSendFromISR+0x46> addi	a2,a2,812 # 1c00832c <__func__.12>
1c0013a0 <xQueueGenericSendFromISR+0x4a> li	a1,957
1c0013a4 <xQueueGenericSendFromISR+0x4e> j	1c001378 <xQueueGenericSendFromISR+0x22>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:958
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1c0013a6 <xQueueGenericSendFromISR+0x50> li	a4,2
1c0013a8 <xQueueGenericSendFromISR+0x52> lw	a5,60(s0)
1c0013aa <xQueueGenericSendFromISR+0x54> bne	a2,a4,1c0013ca <xQueueGenericSendFromISR+0x74>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:958 (discriminator 1)
1c0013ae <xQueueGenericSendFromISR+0x58> li	a4,1
1c0013b0 <xQueueGenericSendFromISR+0x5a> beq	a5,a4,1c0013ca <xQueueGenericSendFromISR+0x74>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:958 (discriminator 2)
1c0013b4 <xQueueGenericSendFromISR+0x5e> lui	a3,0x1c008
1c0013b8 <xQueueGenericSendFromISR+0x62> lui	a2,0x1c008
1c0013bc <xQueueGenericSendFromISR+0x66> addi	a3,a3,248 # 1c0080f8 <__l2_priv0_end+0x32f8>
1c0013c0 <xQueueGenericSendFromISR+0x6a> addi	a2,a2,812 # 1c00832c <__func__.12>
1c0013c4 <xQueueGenericSendFromISR+0x6e> li	a1,958
1c0013c8 <xQueueGenericSendFromISR+0x72> j	1c001378 <xQueueGenericSendFromISR+0x22>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:983
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1c0013ca <xQueueGenericSendFromISR+0x74> lw	a4,56(s0)
1c0013cc <xQueueGenericSendFromISR+0x76> bltu	a4,a5,1c0013d8 <xQueueGenericSendFromISR+0x82>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:983 (discriminator 1)
1c0013d0 <xQueueGenericSendFromISR+0x7a> li	a5,2
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1103 (discriminator 1)
			xReturn = errQUEUE_FULL;
1c0013d2 <xQueueGenericSendFromISR+0x7c> li	a0,0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:983 (discriminator 1)
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1c0013d4 <xQueueGenericSendFromISR+0x7e> bne	a2,a5,1c0013f6 <xQueueGenericSendFromISR+0xa0>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:985
			const int8_t cTxLock = pxQueue->cTxLock;
1c0013d8 <xQueueGenericSendFromISR+0x82> lbu	s1,69(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:986
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
1c0013dc <xQueueGenericSendFromISR+0x86> lw	a5,56(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:995
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1c0013de <xQueueGenericSendFromISR+0x88> mv	a0,s0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:985
			const int8_t cTxLock = pxQueue->cTxLock;
1c0013e0 <xQueueGenericSendFromISR+0x8a> slli	s3,s1,0x18
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:995
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1c0013e4 <xQueueGenericSendFromISR+0x8e> jal	1c000f64 <prvCopyDataToQueue>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:985
			const int8_t cTxLock = pxQueue->cTxLock;
1c0013e6 <xQueueGenericSendFromISR+0x90> srai	s3,s3,0x18
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:999
			if( cTxLock == queueUNLOCKED )
1c0013ea <xQueueGenericSendFromISR+0x94> li	a5,-1
1c0013ec <xQueueGenericSendFromISR+0x96> bne	s3,a5,1c00141a <xQueueGenericSendFromISR+0xc4>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1061
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1c0013f0 <xQueueGenericSendFromISR+0x9a> lw	a5,36(s0)
1c0013f2 <xQueueGenericSendFromISR+0x9c> bnez	a5,1c001404 <xQueueGenericSendFromISR+0xae>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1098
			xReturn = pdPASS;
1c0013f4 <xQueueGenericSendFromISR+0x9e> li	a0,1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1109
}
1c0013f6 <xQueueGenericSendFromISR+0xa0> lw	ra,28(sp)
1c0013f8 <xQueueGenericSendFromISR+0xa2> lw	s0,24(sp)
1c0013fa <xQueueGenericSendFromISR+0xa4> lw	s1,20(sp)
1c0013fc <xQueueGenericSendFromISR+0xa6> lw	s2,16(sp)
1c0013fe <xQueueGenericSendFromISR+0xa8> lw	s3,12(sp)
1c001400 <xQueueGenericSendFromISR+0xaa> addi	sp,sp,32
1c001402 <xQueueGenericSendFromISR+0xac> ret
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1063
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1c001404 <xQueueGenericSendFromISR+0xae> addi	a0,s0,36
1c001408 <xQueueGenericSendFromISR+0xb2> jal	ra,1c001cd4 <xTaskRemoveFromEventList>
1c00140c <xQueueGenericSendFromISR+0xb6> beqz	a0,1c0013f4 <xQueueGenericSendFromISR+0x9e>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1067
							if( pxHigherPriorityTaskWoken != NULL )
1c00140e <xQueueGenericSendFromISR+0xb8> beqz	s2,1c0013f4 <xQueueGenericSendFromISR+0x9e>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1069
								*pxHigherPriorityTaskWoken = pdTRUE;
1c001412 <xQueueGenericSendFromISR+0xbc> li	a5,1
1c001414 <xQueueGenericSendFromISR+0xbe> sw	a5,0(s2)
1c001418 <xQueueGenericSendFromISR+0xc2> j	1c0013f4 <xQueueGenericSendFromISR+0x9e>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1095
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1c00141a <xQueueGenericSendFromISR+0xc4> addi	s1,s1,1
1c00141c <xQueueGenericSendFromISR+0xc6> slli	s1,s1,0x18
1c00141e <xQueueGenericSendFromISR+0xc8> srai	s1,s1,0x18
1c001420 <xQueueGenericSendFromISR+0xca> sb	s1,69(s0)
1c001424 <xQueueGenericSendFromISR+0xce> j	1c0013f4 <xQueueGenericSendFromISR+0x9e>
xQueueGiveFromISR():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1113
{
1c001426 <xQueueGiveFromISR> addi	sp,sp,-16
1c001428 <xQueueGiveFromISR+0x2> sw	ra,12(sp)
1c00142a <xQueueGiveFromISR+0x4> sw	s0,8(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1124
	configASSERT( pxQueue );
1c00142c <xQueueGiveFromISR+0x6> bnez	a0,1c00144e <xQueueGiveFromISR+0x28>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1124 (discriminator 1)
1c00142e <xQueueGiveFromISR+0x8> lui	a3,0x1c008
1c001432 <xQueueGiveFromISR+0xc> lui	a2,0x1c008
1c001436 <xQueueGiveFromISR+0x10> mv	a3,a3
1c00143a <xQueueGiveFromISR+0x14> addi	a2,a2,792 # 1c008318 <__func__.11>
1c00143e <xQueueGiveFromISR+0x18> li	a1,1124
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1128 (discriminator 1)
	configASSERT( pxQueue->uxItemSize == 0 );
1c001442 <xQueueGiveFromISR+0x1c> lui	a0,0x1c008
1c001446 <xQueueGiveFromISR+0x20> addi	a0,a0,8 # 1c008008 <__l2_priv0_end+0x3208>
1c00144a <xQueueGiveFromISR+0x24> jal	ra,1c0037c8 <__assert_func>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1128
1c00144e <xQueueGiveFromISR+0x28> lw	a4,64(a0)
1c001450 <xQueueGiveFromISR+0x2a> mv	a5,a0
1c001452 <xQueueGiveFromISR+0x2c> beqz	a4,1c00146a <xQueueGiveFromISR+0x44>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1128 (discriminator 1)
1c001454 <xQueueGiveFromISR+0x2e> lui	a3,0x1c008
1c001458 <xQueueGiveFromISR+0x32> lui	a2,0x1c008
1c00145c <xQueueGiveFromISR+0x36> addi	a3,a3,412 # 1c00819c <__l2_priv0_end+0x339c>
1c001460 <xQueueGiveFromISR+0x3a> addi	a2,a2,792 # 1c008318 <__func__.11>
1c001464 <xQueueGiveFromISR+0x3e> li	a1,1128
1c001468 <xQueueGiveFromISR+0x42> j	1c001442 <xQueueGiveFromISR+0x1c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1133
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
1c00146a <xQueueGiveFromISR+0x44> lw	a4,0(a0)
1c00146c <xQueueGiveFromISR+0x46> mv	s0,a1
1c00146e <xQueueGiveFromISR+0x48> bnez	a4,1c00148a <xQueueGiveFromISR+0x64>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1133 (discriminator 1)
1c001470 <xQueueGiveFromISR+0x4a> lw	a4,8(a0)
1c001472 <xQueueGiveFromISR+0x4c> beqz	a4,1c00148a <xQueueGiveFromISR+0x64>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1133 (discriminator 2)
1c001474 <xQueueGiveFromISR+0x4e> lui	a3,0x1c008
1c001478 <xQueueGiveFromISR+0x52> lui	a2,0x1c008
1c00147c <xQueueGiveFromISR+0x56> addi	a3,a3,440 # 1c0081b8 <__l2_priv0_end+0x33b8>
1c001480 <xQueueGiveFromISR+0x5a> addi	a2,a2,792 # 1c008318 <__func__.11>
1c001484 <xQueueGiveFromISR+0x5e> li	a1,1133
1c001488 <xQueueGiveFromISR+0x62> j	1c001442 <xQueueGiveFromISR+0x1c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1153
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1c00148a <xQueueGiveFromISR+0x64> lw	a3,56(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1158
		if( uxMessagesWaiting < pxQueue->uxLength )
1c00148c <xQueueGiveFromISR+0x66> lw	a4,60(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1268
			xReturn = errQUEUE_FULL;
1c00148e <xQueueGiveFromISR+0x68> li	a0,0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1158
		if( uxMessagesWaiting < pxQueue->uxLength )
1c001490 <xQueueGiveFromISR+0x6a> bgeu	a3,a4,1c0014ae <xQueueGiveFromISR+0x88>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1160
			const int8_t cTxLock = pxQueue->cTxLock;
1c001494 <xQueueGiveFromISR+0x6e> lbu	a4,69(a5) # 00010045 <__heap_l1_cluster_size+0x65>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1170
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1c001498 <xQueueGiveFromISR+0x72> addi	a3,a3,1
1c00149a <xQueueGiveFromISR+0x74> sw	a3,56(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1160
			const int8_t cTxLock = pxQueue->cTxLock;
1c00149c <xQueueGiveFromISR+0x76> slli	a2,a4,0x18
1c0014a0 <xQueueGiveFromISR+0x7a> srai	a2,a2,0x18
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1174
			if( cTxLock == queueUNLOCKED )
1c0014a2 <xQueueGiveFromISR+0x7c> li	a3,-1
1c0014a4 <xQueueGiveFromISR+0x7e> bne	a2,a3,1c0014c8 <xQueueGiveFromISR+0xa2>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1229
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1c0014a8 <xQueueGiveFromISR+0x82> lw	a4,36(a5)
1c0014aa <xQueueGiveFromISR+0x84> bnez	a4,1c0014b6 <xQueueGiveFromISR+0x90>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1263
			xReturn = pdPASS;
1c0014ac <xQueueGiveFromISR+0x86> li	a0,1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1274
}
1c0014ae <xQueueGiveFromISR+0x88> lw	ra,12(sp)
1c0014b0 <xQueueGiveFromISR+0x8a> lw	s0,8(sp)
1c0014b2 <xQueueGiveFromISR+0x8c> addi	sp,sp,16
1c0014b4 <xQueueGiveFromISR+0x8e> ret
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1231
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1c0014b6 <xQueueGiveFromISR+0x90> addi	a0,a5,36
1c0014ba <xQueueGiveFromISR+0x94> jal	ra,1c001cd4 <xTaskRemoveFromEventList>
1c0014be <xQueueGiveFromISR+0x98> beqz	a0,1c0014ac <xQueueGiveFromISR+0x86>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1235
							if( pxHigherPriorityTaskWoken != NULL )
1c0014c0 <xQueueGiveFromISR+0x9a> beqz	s0,1c0014ac <xQueueGiveFromISR+0x86>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1237
								*pxHigherPriorityTaskWoken = pdTRUE;
1c0014c2 <xQueueGiveFromISR+0x9c> li	a5,1
1c0014c4 <xQueueGiveFromISR+0x9e> sw	a5,0(s0)
1c0014c6 <xQueueGiveFromISR+0xa0> j	1c0014ac <xQueueGiveFromISR+0x86>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1260
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1c0014c8 <xQueueGiveFromISR+0xa2> addi	a4,a4,1
1c0014ca <xQueueGiveFromISR+0xa4> slli	a4,a4,0x18
1c0014cc <xQueueGiveFromISR+0xa6> srai	a4,a4,0x18
1c0014ce <xQueueGiveFromISR+0xa8> sb	a4,69(a5)
1c0014d2 <xQueueGiveFromISR+0xac> j	1c0014ac <xQueueGiveFromISR+0x86>
xQueueReceive():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1278
{
1c0014d4 <xQueueReceive> addi	sp,sp,-64
1c0014d6 <xQueueReceive+0x2> sw	ra,60(sp)
1c0014d8 <xQueueReceive+0x4> sw	s0,56(sp)
1c0014da <xQueueReceive+0x6> sw	s1,52(sp)
1c0014dc <xQueueReceive+0x8> sw	s2,48(sp)
1c0014de <xQueueReceive+0xa> sw	s3,44(sp)
1c0014e0 <xQueueReceive+0xc> sw	s4,40(sp)
1c0014e2 <xQueueReceive+0xe> sw	s5,36(sp)
1c0014e4 <xQueueReceive+0x10> sw	a2,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1284
	configASSERT( ( pxQueue ) );
1c0014e6 <xQueueReceive+0x12> bnez	a0,1c001508 <xQueueReceive+0x34>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1284 (discriminator 1)
1c0014e8 <xQueueReceive+0x14> lui	a3,0x1c008
1c0014ec <xQueueReceive+0x18> lui	a2,0x1c008
1c0014f0 <xQueueReceive+0x1c> addi	a3,a3,540 # 1c00821c <__l2_priv0_end+0x341c>
1c0014f4 <xQueueReceive+0x20> addi	a2,a2,776 # 1c008308 <__func__.10>
1c0014f8 <xQueueReceive+0x24> li	a1,1284
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1288 (discriminator 2)
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1c0014fc <xQueueReceive+0x28> lui	a0,0x1c008
1c001500 <xQueueReceive+0x2c> addi	a0,a0,8 # 1c008008 <__l2_priv0_end+0x3208>
1c001504 <xQueueReceive+0x30> jal	ra,1c0037c8 <__assert_func>
1c001508 <xQueueReceive+0x34> mv	s0,a0
1c00150a <xQueueReceive+0x36> mv	s2,a1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1288
1c00150c <xQueueReceive+0x38> bnez	a1,1c001528 <xQueueReceive+0x54>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1288 (discriminator 1)
1c00150e <xQueueReceive+0x3a> lw	a5,64(a0)
1c001510 <xQueueReceive+0x3c> beqz	a5,1c001528 <xQueueReceive+0x54>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1288 (discriminator 2)
1c001512 <xQueueReceive+0x3e> lui	a3,0x1c008
1c001516 <xQueueReceive+0x42> lui	a2,0x1c008
1c00151a <xQueueReceive+0x46> addi	a3,a3,552 # 1c008228 <__l2_priv0_end+0x3428>
1c00151e <xQueueReceive+0x4a> addi	a2,a2,776 # 1c008308 <__func__.10>
1c001522 <xQueueReceive+0x4e> li	a1,1288
1c001526 <xQueueReceive+0x52> j	1c0014fc <xQueueReceive+0x28>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1293
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1c001528 <xQueueReceive+0x54> jal	ra,1c001d84 <xTaskGetSchedulerState>
1c00152c <xQueueReceive+0x58> mv	s1,a0
1c00152e <xQueueReceive+0x5a> bnez	a0,1c00154a <xQueueReceive+0x76>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1293 (discriminator 1)
1c001530 <xQueueReceive+0x5c> lw	a5,12(sp)
1c001532 <xQueueReceive+0x5e> beqz	a5,1c00154c <xQueueReceive+0x78>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1293 (discriminator 2)
1c001534 <xQueueReceive+0x60> lui	a3,0x1c008
1c001538 <xQueueReceive+0x64> lui	a2,0x1c008
1c00153c <xQueueReceive+0x68> addi	a3,a3,328 # 1c008148 <__l2_priv0_end+0x3348>
1c001540 <xQueueReceive+0x6c> addi	a2,a2,776 # 1c008308 <__func__.10>
1c001544 <xQueueReceive+0x70> li	a1,1293
1c001548 <xQueueReceive+0x74> j	1c0014fc <xQueueReceive+0x28>
1c00154a <xQueueReceive+0x76> li	s1,0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1368
		prvLockQueue( pxQueue );
1c00154c <xQueueReceive+0x78> li	s4,-1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1378
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1c00154e <xQueueReceive+0x7a> addi	s5,s0,36
1c001552 <xQueueReceive+0x7e> j	1c0015c0 <xQueueReceive+0xec>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1340
				if( xTicksToWait == ( TickType_t ) 0 )
1c001554 <xQueueReceive+0x80> lw	a5,12(sp)
1c001556 <xQueueReceive+0x82> bnez	a5,1c001560 <xQueueReceive+0x8c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1344
					taskEXIT_CRITICAL();
1c001558 <xQueueReceive+0x84> jal	ra,1c002026 <vTaskExitCritical>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1407
				return errQUEUE_EMPTY;
1c00155c <xQueueReceive+0x88> li	a0,0
1c00155e <xQueueReceive+0x8a> j	1c0015f0 <xQueueReceive+0x11c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1348
				else if( xEntryTimeSet == pdFALSE )
1c001560 <xQueueReceive+0x8c> bnez	s1,1c001568 <xQueueReceive+0x94>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1352
					vTaskInternalSetTimeOutState( &xTimeOut );
1c001562 <xQueueReceive+0x8e> addi	a0,sp,24
1c001564 <xQueueReceive+0x90> jal	ra,1c001d6e <vTaskInternalSetTimeOutState>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1362
		taskEXIT_CRITICAL();
1c001568 <xQueueReceive+0x94> jal	ra,1c002026 <vTaskExitCritical>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1367
		vTaskSuspendAll();
1c00156c <xQueueReceive+0x98> jal	1c001a16 <vTaskSuspendAll>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1368
		prvLockQueue( pxQueue );
1c00156e <xQueueReceive+0x9a> jal	ra,1c00200c <vTaskEnterCritical>
1c001572 <xQueueReceive+0x9e> lbu	a5,68(s0)
1c001576 <xQueueReceive+0xa2> slli	a5,a5,0x18
1c001578 <xQueueReceive+0xa4> srai	a5,a5,0x18
1c00157a <xQueueReceive+0xa6> bne	a5,s4,1c001582 <xQueueReceive+0xae>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1368 (discriminator 1)
1c00157e <xQueueReceive+0xaa> sb	zero,68(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1368 (discriminator 3)
1c001582 <xQueueReceive+0xae> lbu	a5,69(s0)
1c001586 <xQueueReceive+0xb2> slli	a5,a5,0x18
1c001588 <xQueueReceive+0xb4> srai	a5,a5,0x18
1c00158a <xQueueReceive+0xb6> bne	a5,s4,1c001592 <xQueueReceive+0xbe>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1368 (discriminator 4)
1c00158e <xQueueReceive+0xba> sb	zero,69(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1368 (discriminator 6)
1c001592 <xQueueReceive+0xbe> jal	ra,1c002026 <vTaskExitCritical>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1371 (discriminator 6)
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1c001596 <xQueueReceive+0xc2> addi	a1,sp,12
1c001598 <xQueueReceive+0xc4> addi	a0,sp,24
1c00159a <xQueueReceive+0xc6> jal	ra,1c002458 <xTaskCheckForTimeOut>
1c00159e <xQueueReceive+0xca> bnez	a0,1c00160c <xQueueReceive+0x138>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1375
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1c0015a0 <xQueueReceive+0xcc> mv	a0,s0
1c0015a2 <xQueueReceive+0xce> jal	ra,1c000f46 <prvIsQueueEmpty>
1c0015a6 <xQueueReceive+0xd2> beqz	a0,1c001602 <xQueueReceive+0x12e>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1378
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1c0015a8 <xQueueReceive+0xd4> lw	a1,12(sp)
1c0015aa <xQueueReceive+0xd6> mv	a0,s5
1c0015ac <xQueueReceive+0xd8> jal	ra,1c001c46 <vTaskPlaceOnEventList>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1379
				prvUnlockQueue( pxQueue );
1c0015b0 <xQueueReceive+0xdc> mv	a0,s0
1c0015b2 <xQueueReceive+0xde> jal	1c001008 <prvUnlockQueue>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1380
				if( xTaskResumeAll() == pdFALSE )
1c0015b4 <xQueueReceive+0xe0> jal	ra,1c00234c <xTaskResumeAll>
1c0015b8 <xQueueReceive+0xe4> bnez	a0,1c0015be <xQueueReceive+0xea>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1382
					portYIELD_WITHIN_API();
1c0015ba <xQueueReceive+0xe6> ecall
1c0015be <xQueueReceive+0xea> li	s1,1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1303
		taskENTER_CRITICAL();
1c0015c0 <xQueueReceive+0xec> jal	ra,1c00200c <vTaskEnterCritical>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1305
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1c0015c4 <xQueueReceive+0xf0> lw	s3,56(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1309
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1c0015c8 <xQueueReceive+0xf4> beqz	s3,1c001554 <xQueueReceive+0x80>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1312
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1c0015cc <xQueueReceive+0xf8> mv	a1,s2
1c0015ce <xQueueReceive+0xfa> mv	a0,s0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1314
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1c0015d0 <xQueueReceive+0xfc> addi	s3,s3,-1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1312
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1c0015d2 <xQueueReceive+0xfe> jal	1c000fea <prvCopyDataFromQueue>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1314
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1c0015d4 <xQueueReceive+0x100> sw	s3,56(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1319
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1c0015d8 <xQueueReceive+0x104> lw	a5,16(s0)
1c0015da <xQueueReceive+0x106> beqz	a5,1c0015ea <xQueueReceive+0x116>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1321
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1c0015dc <xQueueReceive+0x108> addi	a0,s0,16
1c0015e0 <xQueueReceive+0x10c> jal	ra,1c001cd4 <xTaskRemoveFromEventList>
1c0015e4 <xQueueReceive+0x110> beqz	a0,1c0015ea <xQueueReceive+0x116>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1323
						queueYIELD_IF_USING_PREEMPTION();
1c0015e6 <xQueueReceive+0x112> ecall
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1335
				taskEXIT_CRITICAL();
1c0015ea <xQueueReceive+0x116> jal	ra,1c002026 <vTaskExitCritical>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1336
				return pdPASS;
1c0015ee <xQueueReceive+0x11a> li	a0,1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1415
}
1c0015f0 <xQueueReceive+0x11c> lw	ra,60(sp)
1c0015f2 <xQueueReceive+0x11e> lw	s0,56(sp)
1c0015f4 <xQueueReceive+0x120> lw	s1,52(sp)
1c0015f6 <xQueueReceive+0x122> lw	s2,48(sp)
1c0015f8 <xQueueReceive+0x124> lw	s3,44(sp)
1c0015fa <xQueueReceive+0x126> lw	s4,40(sp)
1c0015fc <xQueueReceive+0x128> lw	s5,36(sp)
1c0015fe <xQueueReceive+0x12a> addi	sp,sp,64
1c001600 <xQueueReceive+0x12c> ret
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1393
				prvUnlockQueue( pxQueue );
1c001602 <xQueueReceive+0x12e> mv	a0,s0
1c001604 <xQueueReceive+0x130> jal	1c001008 <prvUnlockQueue>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1394
				( void ) xTaskResumeAll();
1c001606 <xQueueReceive+0x132> jal	ra,1c00234c <xTaskResumeAll>
1c00160a <xQueueReceive+0x136> j	1c0015be <xQueueReceive+0xea>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1401
			prvUnlockQueue( pxQueue );
1c00160c <xQueueReceive+0x138> mv	a0,s0
1c00160e <xQueueReceive+0x13a> jal	1c001008 <prvUnlockQueue>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1402
			( void ) xTaskResumeAll();
1c001610 <xQueueReceive+0x13c> jal	ra,1c00234c <xTaskResumeAll>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1404
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1c001614 <xQueueReceive+0x140> mv	a0,s0
1c001616 <xQueueReceive+0x142> jal	ra,1c000f46 <prvIsQueueEmpty>
1c00161a <xQueueReceive+0x146> beqz	a0,1c0015be <xQueueReceive+0xea>
1c00161c <xQueueReceive+0x148> j	1c00155c <xQueueReceive+0x88>
xQueueSemaphoreTake():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1419
{
1c00161e <xQueueSemaphoreTake> addi	sp,sp,-64
1c001620 <xQueueSemaphoreTake+0x2> sw	ra,60(sp)
1c001622 <xQueueSemaphoreTake+0x4> sw	s0,56(sp)
1c001624 <xQueueSemaphoreTake+0x6> sw	s1,52(sp)
1c001626 <xQueueSemaphoreTake+0x8> sw	s2,48(sp)
1c001628 <xQueueSemaphoreTake+0xa> sw	s3,44(sp)
1c00162a <xQueueSemaphoreTake+0xc> sw	s4,40(sp)
1c00162c <xQueueSemaphoreTake+0xe> sw	a1,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1429
	configASSERT( ( pxQueue ) );
1c00162e <xQueueSemaphoreTake+0x10> bnez	a0,1c001650 <xQueueSemaphoreTake+0x32>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1429 (discriminator 1)
1c001630 <xQueueSemaphoreTake+0x12> lui	a3,0x1c008
1c001634 <xQueueSemaphoreTake+0x16> lui	a2,0x1c008
1c001638 <xQueueSemaphoreTake+0x1a> addi	a3,a3,540 # 1c00821c <__l2_priv0_end+0x341c>
1c00163c <xQueueSemaphoreTake+0x1e> addi	a2,a2,972 # 1c0083cc <__func__.9>
1c001640 <xQueueSemaphoreTake+0x22> li	a1,1429
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1433 (discriminator 1)
	configASSERT( pxQueue->uxItemSize == 0 );
1c001644 <xQueueSemaphoreTake+0x26> lui	a0,0x1c008
1c001648 <xQueueSemaphoreTake+0x2a> addi	a0,a0,8 # 1c008008 <__l2_priv0_end+0x3208>
1c00164c <xQueueSemaphoreTake+0x2e> jal	ra,1c0037c8 <__assert_func>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1433
1c001650 <xQueueSemaphoreTake+0x32> lw	a5,64(a0)
1c001652 <xQueueSemaphoreTake+0x34> mv	s0,a0
1c001654 <xQueueSemaphoreTake+0x36> beqz	a5,1c00166c <xQueueSemaphoreTake+0x4e>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1433 (discriminator 1)
1c001656 <xQueueSemaphoreTake+0x38> lui	a3,0x1c008
1c00165a <xQueueSemaphoreTake+0x3c> lui	a2,0x1c008
1c00165e <xQueueSemaphoreTake+0x40> addi	a3,a3,412 # 1c00819c <__l2_priv0_end+0x339c>
1c001662 <xQueueSemaphoreTake+0x44> addi	a2,a2,972 # 1c0083cc <__func__.9>
1c001666 <xQueueSemaphoreTake+0x48> li	a1,1433
1c00166a <xQueueSemaphoreTake+0x4c> j	1c001644 <xQueueSemaphoreTake+0x26>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1438
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1c00166c <xQueueSemaphoreTake+0x4e> jal	ra,1c001d84 <xTaskGetSchedulerState>
1c001670 <xQueueSemaphoreTake+0x52> mv	s2,a0
1c001672 <xQueueSemaphoreTake+0x54> bnez	a0,1c001690 <xQueueSemaphoreTake+0x72>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1438 (discriminator 1)
1c001674 <xQueueSemaphoreTake+0x56> lw	a5,12(sp)
1c001676 <xQueueSemaphoreTake+0x58> li	s1,0
1c001678 <xQueueSemaphoreTake+0x5a> beqz	a5,1c001694 <xQueueSemaphoreTake+0x76>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1438 (discriminator 2)
1c00167a <xQueueSemaphoreTake+0x5c> lui	a3,0x1c008
1c00167e <xQueueSemaphoreTake+0x60> lui	a2,0x1c008
1c001682 <xQueueSemaphoreTake+0x64> addi	a3,a3,328 # 1c008148 <__l2_priv0_end+0x3348>
1c001686 <xQueueSemaphoreTake+0x68> addi	a2,a2,972 # 1c0083cc <__func__.9>
1c00168a <xQueueSemaphoreTake+0x6c> li	a1,1438
1c00168e <xQueueSemaphoreTake+0x70> j	1c001644 <xQueueSemaphoreTake+0x26>
1c001690 <xQueueSemaphoreTake+0x72> li	s1,0
1c001692 <xQueueSemaphoreTake+0x74> li	s2,0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1539
		prvLockQueue( pxQueue );
1c001694 <xQueueSemaphoreTake+0x76> li	s3,-1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1569
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1c001696 <xQueueSemaphoreTake+0x78> addi	s4,s0,36
1c00169a <xQueueSemaphoreTake+0x7c> j	1c001734 <xQueueSemaphoreTake+0x116>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1502
				if( xTicksToWait == ( TickType_t ) 0 )
1c00169c <xQueueSemaphoreTake+0x7e> lw	a5,12(sp)
1c00169e <xQueueSemaphoreTake+0x80> bnez	a5,1c0016be <xQueueSemaphoreTake+0xa0>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1509
						configASSERT( xInheritanceOccurred == pdFALSE );
1c0016a0 <xQueueSemaphoreTake+0x82> beqz	s1,1c0016b8 <xQueueSemaphoreTake+0x9a>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1509 (discriminator 1)
1c0016a2 <xQueueSemaphoreTake+0x84> lui	a3,0x1c008
1c0016a6 <xQueueSemaphoreTake+0x88> lui	a2,0x1c008
1c0016aa <xQueueSemaphoreTake+0x8c> addi	a3,a3,644 # 1c008284 <__l2_priv0_end+0x3484>
1c0016ae <xQueueSemaphoreTake+0x90> addi	a2,a2,972 # 1c0083cc <__func__.9>
1c0016b2 <xQueueSemaphoreTake+0x94> li	a1,1509
1c0016b6 <xQueueSemaphoreTake+0x98> j	1c001644 <xQueueSemaphoreTake+0x26>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1515
					taskEXIT_CRITICAL();
1c0016b8 <xQueueSemaphoreTake+0x9a> jal	ra,1c002026 <vTaskExitCritical>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1517
					return errQUEUE_EMPTY;
1c0016bc <xQueueSemaphoreTake+0x9e> j	1c001760 <xQueueSemaphoreTake+0x142>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1519
				else if( xEntryTimeSet == pdFALSE )
1c0016be <xQueueSemaphoreTake+0xa0> bnez	s2,1c0016c8 <xQueueSemaphoreTake+0xaa>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1523
					vTaskInternalSetTimeOutState( &xTimeOut );
1c0016c2 <xQueueSemaphoreTake+0xa4> addi	a0,sp,24
1c0016c4 <xQueueSemaphoreTake+0xa6> jal	ra,1c001d6e <vTaskInternalSetTimeOutState>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1533
		taskEXIT_CRITICAL();
1c0016c8 <xQueueSemaphoreTake+0xaa> jal	ra,1c002026 <vTaskExitCritical>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1538
		vTaskSuspendAll();
1c0016cc <xQueueSemaphoreTake+0xae> jal	1c001a16 <vTaskSuspendAll>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1539
		prvLockQueue( pxQueue );
1c0016ce <xQueueSemaphoreTake+0xb0> jal	ra,1c00200c <vTaskEnterCritical>
1c0016d2 <xQueueSemaphoreTake+0xb4> lbu	a5,68(s0)
1c0016d6 <xQueueSemaphoreTake+0xb8> slli	a5,a5,0x18
1c0016d8 <xQueueSemaphoreTake+0xba> srai	a5,a5,0x18
1c0016da <xQueueSemaphoreTake+0xbc> bne	a5,s3,1c0016e2 <xQueueSemaphoreTake+0xc4>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1539 (discriminator 1)
1c0016de <xQueueSemaphoreTake+0xc0> sb	zero,68(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1539 (discriminator 3)
1c0016e2 <xQueueSemaphoreTake+0xc4> lbu	a5,69(s0)
1c0016e6 <xQueueSemaphoreTake+0xc8> slli	a5,a5,0x18
1c0016e8 <xQueueSemaphoreTake+0xca> srai	a5,a5,0x18
1c0016ea <xQueueSemaphoreTake+0xcc> bne	a5,s3,1c0016f2 <xQueueSemaphoreTake+0xd4>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1539 (discriminator 4)
1c0016ee <xQueueSemaphoreTake+0xd0> sb	zero,69(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1539 (discriminator 6)
1c0016f2 <xQueueSemaphoreTake+0xd4> jal	ra,1c002026 <vTaskExitCritical>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1542 (discriminator 6)
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1c0016f6 <xQueueSemaphoreTake+0xd8> addi	a1,sp,12
1c0016f8 <xQueueSemaphoreTake+0xda> addi	a0,sp,24
1c0016fa <xQueueSemaphoreTake+0xdc> jal	ra,1c002458 <xTaskCheckForTimeOut>
1c0016fe <xQueueSemaphoreTake+0xe0> bnez	a0,1c00177e <xQueueSemaphoreTake+0x160>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1548
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1c001700 <xQueueSemaphoreTake+0xe2> mv	a0,s0
1c001702 <xQueueSemaphoreTake+0xe4> jal	ra,1c000f46 <prvIsQueueEmpty>
1c001706 <xQueueSemaphoreTake+0xe8> beqz	a0,1c001772 <xQueueSemaphoreTake+0x154>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1554
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1c001708 <xQueueSemaphoreTake+0xea> lw	a5,0(s0)
1c00170a <xQueueSemaphoreTake+0xec> bnez	a5,1c00171c <xQueueSemaphoreTake+0xfe>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1556
						taskENTER_CRITICAL();
1c00170c <xQueueSemaphoreTake+0xee> jal	ra,1c00200c <vTaskEnterCritical>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1558
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
1c001710 <xQueueSemaphoreTake+0xf2> lw	a0,8(s0)
1c001712 <xQueueSemaphoreTake+0xf4> jal	ra,1c001d98 <xTaskPriorityInherit>
1c001716 <xQueueSemaphoreTake+0xf8> mv	s1,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1560
						taskEXIT_CRITICAL();
1c001718 <xQueueSemaphoreTake+0xfa> jal	ra,1c002026 <vTaskExitCritical>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1569
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1c00171c <xQueueSemaphoreTake+0xfe> lw	a1,12(sp)
1c00171e <xQueueSemaphoreTake+0x100> mv	a0,s4
1c001720 <xQueueSemaphoreTake+0x102> jal	1c001c46 <vTaskPlaceOnEventList>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1570
				prvUnlockQueue( pxQueue );
1c001722 <xQueueSemaphoreTake+0x104> mv	a0,s0
1c001724 <xQueueSemaphoreTake+0x106> jal	ra,1c001008 <prvUnlockQueue>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1571
				if( xTaskResumeAll() == pdFALSE )
1c001728 <xQueueSemaphoreTake+0x10a> jal	ra,1c00234c <xTaskResumeAll>
1c00172c <xQueueSemaphoreTake+0x10e> bnez	a0,1c001732 <xQueueSemaphoreTake+0x114>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1573
					portYIELD_WITHIN_API();
1c00172e <xQueueSemaphoreTake+0x110> ecall
1c001732 <xQueueSemaphoreTake+0x114> li	s2,1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1448
		taskENTER_CRITICAL();
1c001734 <xQueueSemaphoreTake+0x116> jal	ra,1c00200c <vTaskEnterCritical>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1452
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1c001738 <xQueueSemaphoreTake+0x11a> lw	a5,56(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1456
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1c00173a <xQueueSemaphoreTake+0x11c> beqz	a5,1c00169c <xQueueSemaphoreTake+0x7e>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1462
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1c00173c <xQueueSemaphoreTake+0x11e> addi	a5,a5,-1
1c00173e <xQueueSemaphoreTake+0x120> sw	a5,56(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1466
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1c001740 <xQueueSemaphoreTake+0x122> lw	a5,0(s0)
1c001742 <xQueueSemaphoreTake+0x124> bnez	a5,1c00174a <xQueueSemaphoreTake+0x12c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1470
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
1c001744 <xQueueSemaphoreTake+0x126> jal	ra,1c00250a <pvTaskIncrementMutexHeldCount>
1c001748 <xQueueSemaphoreTake+0x12a> sw	a0,8(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1481
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1c00174a <xQueueSemaphoreTake+0x12c> lw	a5,16(s0)
1c00174c <xQueueSemaphoreTake+0x12e> beqz	a5,1c00175a <xQueueSemaphoreTake+0x13c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1483
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1c00174e <xQueueSemaphoreTake+0x130> addi	a0,s0,16
1c001752 <xQueueSemaphoreTake+0x134> jal	1c001cd4 <xTaskRemoveFromEventList>
1c001754 <xQueueSemaphoreTake+0x136> beqz	a0,1c00175a <xQueueSemaphoreTake+0x13c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1485
						queueYIELD_IF_USING_PREEMPTION();
1c001756 <xQueueSemaphoreTake+0x138> ecall
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1497
				taskEXIT_CRITICAL();
1c00175a <xQueueSemaphoreTake+0x13c> jal	ra,1c002026 <vTaskExitCritical>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1498
				return pdPASS;
1c00175e <xQueueSemaphoreTake+0x140> li	s1,1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1633
}
1c001760 <xQueueSemaphoreTake+0x142> lw	ra,60(sp)
1c001762 <xQueueSemaphoreTake+0x144> lw	s0,56(sp)
1c001764 <xQueueSemaphoreTake+0x146> lw	s2,48(sp)
1c001766 <xQueueSemaphoreTake+0x148> lw	s3,44(sp)
1c001768 <xQueueSemaphoreTake+0x14a> lw	s4,40(sp)
1c00176a <xQueueSemaphoreTake+0x14c> mv	a0,s1
1c00176c <xQueueSemaphoreTake+0x14e> lw	s1,52(sp)
1c00176e <xQueueSemaphoreTake+0x150> addi	sp,sp,64
1c001770 <xQueueSemaphoreTake+0x152> ret
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1584
				prvUnlockQueue( pxQueue );
1c001772 <xQueueSemaphoreTake+0x154> mv	a0,s0
1c001774 <xQueueSemaphoreTake+0x156> jal	ra,1c001008 <prvUnlockQueue>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1585
				( void ) xTaskResumeAll();
1c001778 <xQueueSemaphoreTake+0x15a> jal	ra,1c00234c <xTaskResumeAll>
1c00177c <xQueueSemaphoreTake+0x15e> j	1c001732 <xQueueSemaphoreTake+0x114>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1591
			prvUnlockQueue( pxQueue );
1c00177e <xQueueSemaphoreTake+0x160> mv	a0,s0
1c001780 <xQueueSemaphoreTake+0x162> jal	ra,1c001008 <prvUnlockQueue>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1592
			( void ) xTaskResumeAll();
1c001784 <xQueueSemaphoreTake+0x166> jal	ra,1c00234c <xTaskResumeAll>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1598
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1c001788 <xQueueSemaphoreTake+0x16a> mv	a0,s0
1c00178a <xQueueSemaphoreTake+0x16c> jal	ra,1c000f46 <prvIsQueueEmpty>
1c00178e <xQueueSemaphoreTake+0x170> beqz	a0,1c001732 <xQueueSemaphoreTake+0x114>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1605
					if( xInheritanceOccurred != pdFALSE )
1c001790 <xQueueSemaphoreTake+0x172> beqz	s1,1c001760 <xQueueSemaphoreTake+0x142>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1607
						taskENTER_CRITICAL();
1c001792 <xQueueSemaphoreTake+0x174> jal	ra,1c00200c <vTaskEnterCritical>
prvGetDisinheritPriorityAfterTimeout():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2059
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
1c001796 <xQueueSemaphoreTake+0x178> lw	a1,36(s0)
1c001798 <xQueueSemaphoreTake+0x17a> beqz	a1,1c0017a2 <xQueueSemaphoreTake+0x184>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2061
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
1c00179a <xQueueSemaphoreTake+0x17c> lw	a5,48(s0)
1c00179c <xQueueSemaphoreTake+0x17e> li	a1,5
1c00179e <xQueueSemaphoreTake+0x180> lw	a5,0(a5)
1c0017a0 <xQueueSemaphoreTake+0x182> sub	a1,a1,a5
xQueueSemaphoreTake():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1617
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
1c0017a2 <xQueueSemaphoreTake+0x184> lw	a0,8(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1625
				return errQUEUE_EMPTY;
1c0017a4 <xQueueSemaphoreTake+0x186> li	s1,0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1617
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
1c0017a6 <xQueueSemaphoreTake+0x188> jal	ra,1c001f1e <vTaskPriorityDisinheritAfterTimeout>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1619
						taskEXIT_CRITICAL();
1c0017aa <xQueueSemaphoreTake+0x18c> jal	ra,1c002026 <vTaskExitCritical>
1c0017ae <xQueueSemaphoreTake+0x190> j	1c001760 <xQueueSemaphoreTake+0x142>
xQueueReceiveFromISR():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1786
{
1c0017b0 <xQueueReceiveFromISR> addi	sp,sp,-32
1c0017b2 <xQueueReceiveFromISR+0x2> sw	ra,28(sp)
1c0017b4 <xQueueReceiveFromISR+0x4> sw	s0,24(sp)
1c0017b6 <xQueueReceiveFromISR+0x6> sw	s1,20(sp)
1c0017b8 <xQueueReceiveFromISR+0x8> sw	s2,16(sp)
1c0017ba <xQueueReceiveFromISR+0xa> sw	s3,12(sp)
1c0017bc <xQueueReceiveFromISR+0xc> sw	s4,8(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1791
	configASSERT( pxQueue );
1c0017be <xQueueReceiveFromISR+0xe> bnez	a0,1c0017e0 <xQueueReceiveFromISR+0x30>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1791 (discriminator 1)
1c0017c0 <xQueueReceiveFromISR+0x10> lui	a3,0x1c008
1c0017c4 <xQueueReceiveFromISR+0x14> lui	a2,0x1c008
1c0017c8 <xQueueReceiveFromISR+0x18> mv	a3,a3
1c0017cc <xQueueReceiveFromISR+0x1c> addi	a2,a2,948 # 1c0083b4 <__func__.7>
1c0017d0 <xQueueReceiveFromISR+0x20> li	a1,1791
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1792 (discriminator 2)
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1c0017d4 <xQueueReceiveFromISR+0x24> lui	a0,0x1c008
1c0017d8 <xQueueReceiveFromISR+0x28> addi	a0,a0,8 # 1c008008 <__l2_priv0_end+0x3208>
1c0017dc <xQueueReceiveFromISR+0x2c> jal	ra,1c0037c8 <__assert_func>
1c0017e0 <xQueueReceiveFromISR+0x30> mv	s0,a0
1c0017e2 <xQueueReceiveFromISR+0x32> mv	s2,a2
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1792
1c0017e4 <xQueueReceiveFromISR+0x34> bnez	a1,1c001800 <xQueueReceiveFromISR+0x50>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1792 (discriminator 1)
1c0017e6 <xQueueReceiveFromISR+0x36> lw	a5,64(a0)
1c0017e8 <xQueueReceiveFromISR+0x38> beqz	a5,1c001800 <xQueueReceiveFromISR+0x50>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1792 (discriminator 2)
1c0017ea <xQueueReceiveFromISR+0x3a> lui	a3,0x1c008
1c0017ee <xQueueReceiveFromISR+0x3e> lui	a2,0x1c008
1c0017f2 <xQueueReceiveFromISR+0x42> addi	a3,a3,692 # 1c0082b4 <__l2_priv0_end+0x34b4>
1c0017f6 <xQueueReceiveFromISR+0x46> addi	a2,a2,948 # 1c0083b4 <__func__.7>
1c0017fa <xQueueReceiveFromISR+0x4a> li	a1,1792
1c0017fe <xQueueReceiveFromISR+0x4e> j	1c0017d4 <xQueueReceiveFromISR+0x24>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1812
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1c001800 <xQueueReceiveFromISR+0x50> lw	s3,56(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1866
			xReturn = pdFAIL;
1c001804 <xQueueReceiveFromISR+0x54> li	a0,0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1815
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1c001806 <xQueueReceiveFromISR+0x56> beqz	s3,1c00182e <xQueueReceiveFromISR+0x7e>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1817
			const int8_t cRxLock = pxQueue->cRxLock;
1c00180a <xQueueReceiveFromISR+0x5a> lbu	s1,68(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1821
			prvCopyDataFromQueue( pxQueue, pvBuffer );
1c00180e <xQueueReceiveFromISR+0x5e> mv	a0,s0
1c001810 <xQueueReceiveFromISR+0x60> jal	ra,1c000fea <prvCopyDataFromQueue>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1817
			const int8_t cRxLock = pxQueue->cRxLock;
1c001814 <xQueueReceiveFromISR+0x64> slli	s4,s1,0x18
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1822
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1c001818 <xQueueReceiveFromISR+0x68> addi	s3,s3,-1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1817
			const int8_t cRxLock = pxQueue->cRxLock;
1c00181a <xQueueReceiveFromISR+0x6a> srai	s4,s4,0x18
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1822
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1c00181e <xQueueReceiveFromISR+0x6e> sw	s3,56(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1828
			if( cRxLock == queueUNLOCKED )
1c001822 <xQueueReceiveFromISR+0x72> li	a5,-1
1c001824 <xQueueReceiveFromISR+0x74> bne	s4,a5,1c001852 <xQueueReceiveFromISR+0xa2>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1830
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1c001828 <xQueueReceiveFromISR+0x78> lw	a5,16(s0)
1c00182a <xQueueReceiveFromISR+0x7a> bnez	a5,1c00183e <xQueueReceiveFromISR+0x8e>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1862
			xReturn = pdPASS;
1c00182c <xQueueReceiveFromISR+0x7c> li	a0,1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1873
}
1c00182e <xQueueReceiveFromISR+0x7e> lw	ra,28(sp)
1c001830 <xQueueReceiveFromISR+0x80> lw	s0,24(sp)
1c001832 <xQueueReceiveFromISR+0x82> lw	s1,20(sp)
1c001834 <xQueueReceiveFromISR+0x84> lw	s2,16(sp)
1c001836 <xQueueReceiveFromISR+0x86> lw	s3,12(sp)
1c001838 <xQueueReceiveFromISR+0x88> lw	s4,8(sp)
1c00183a <xQueueReceiveFromISR+0x8a> addi	sp,sp,32
1c00183c <xQueueReceiveFromISR+0x8c> ret
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1832
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1c00183e <xQueueReceiveFromISR+0x8e> addi	a0,s0,16
1c001842 <xQueueReceiveFromISR+0x92> jal	1c001cd4 <xTaskRemoveFromEventList>
1c001844 <xQueueReceiveFromISR+0x94> beqz	a0,1c00182c <xQueueReceiveFromISR+0x7c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1836
						if( pxHigherPriorityTaskWoken != NULL )
1c001846 <xQueueReceiveFromISR+0x96> beqz	s2,1c00182c <xQueueReceiveFromISR+0x7c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1838
							*pxHigherPriorityTaskWoken = pdTRUE;
1c00184a <xQueueReceiveFromISR+0x9a> li	a5,1
1c00184c <xQueueReceiveFromISR+0x9c> sw	a5,0(s2)
1c001850 <xQueueReceiveFromISR+0xa0> j	1c00182c <xQueueReceiveFromISR+0x7c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1859
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1c001852 <xQueueReceiveFromISR+0xa2> addi	s1,s1,1
1c001854 <xQueueReceiveFromISR+0xa4> slli	s1,s1,0x18
1c001856 <xQueueReceiveFromISR+0xa6> srai	s1,s1,0x18
1c001858 <xQueueReceiveFromISR+0xa8> sb	s1,68(s0)
1c00185c <xQueueReceiveFromISR+0xac> j	1c00182c <xQueueReceiveFromISR+0x7c>
vQueueAddToRegistry():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2654
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1c00185e <vQueueAddToRegistry> lui	a5,0x1c009
1c001862 <vQueueAddToRegistry+0x4> addi	a3,a5,-952 # 1c008c48 <xQueueRegistry>
1c001866 <vQueueAddToRegistry+0x8> li	a4,0
1c001868 <vQueueAddToRegistry+0xa> addi	a5,a5,-952
1c00186c <vQueueAddToRegistry+0xe> li	a2,8
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2656
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1c00186e <vQueueAddToRegistry+0x10> lw	a6,0(a3)
1c001872 <vQueueAddToRegistry+0x14> bnez	a6,1c001880 <vQueueAddToRegistry+0x22>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2659
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1c001876 <vQueueAddToRegistry+0x18> slli	a4,a4,0x3
1c001878 <vQueueAddToRegistry+0x1a> add	a5,a5,a4
1c00187a <vQueueAddToRegistry+0x1c> sw	a1,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2660
				xQueueRegistry[ ux ].xHandle = xQueue;
1c00187c <vQueueAddToRegistry+0x1e> sw	a0,4(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2663

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1c00187e <vQueueAddToRegistry+0x20> ret
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2654 (discriminator 2)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1c001880 <vQueueAddToRegistry+0x22> addi	a4,a4,1
1c001882 <vQueueAddToRegistry+0x24> addi	a3,a3,8
1c001884 <vQueueAddToRegistry+0x26> bne	a4,a2,1c00186e <vQueueAddToRegistry+0x10>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2670
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1c001888 <vQueueAddToRegistry+0x2a> ret
vQueueUnregisterQueue():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2711
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1c00188a <vQueueUnregisterQueue> lui	a5,0x1c009
1c00188e <vQueueUnregisterQueue+0x4> addi	a3,a5,-952 # 1c008c48 <xQueueRegistry>
1c001892 <vQueueUnregisterQueue+0x8> li	a4,0
1c001894 <vQueueUnregisterQueue+0xa> addi	a5,a5,-952
1c001898 <vQueueUnregisterQueue+0xe> li	a2,8
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2713
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
1c00189a <vQueueUnregisterQueue+0x10> lw	a1,4(a3)
1c00189c <vQueueUnregisterQueue+0x12> bne	a1,a0,1c0018ae <vQueueUnregisterQueue+0x24>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2716
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
1c0018a0 <vQueueUnregisterQueue+0x16> slli	a4,a4,0x3
1c0018a2 <vQueueUnregisterQueue+0x18> add	a5,a5,a4
1c0018a4 <vQueueUnregisterQueue+0x1a> sw	zero,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2721

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
1c0018a8 <vQueueUnregisterQueue+0x1e> sw	zero,4(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2722
				break;
1c0018ac <vQueueUnregisterQueue+0x22> ret
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2711 (discriminator 2)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1c0018ae <vQueueUnregisterQueue+0x24> addi	a4,a4,1
1c0018b0 <vQueueUnregisterQueue+0x26> addi	a3,a3,8
1c0018b2 <vQueueUnregisterQueue+0x28> bne	a4,a2,1c00189a <vQueueUnregisterQueue+0x10>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2730
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
1c0018b6 <vQueueUnregisterQueue+0x2c> ret
vQueueDelete():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1976
{
1c0018b8 <vQueueDelete> addi	sp,sp,-16
1c0018ba <vQueueDelete+0x2> sw	ra,12(sp)
1c0018bc <vQueueDelete+0x4> sw	s0,8(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1979
	configASSERT( pxQueue );
1c0018be <vQueueDelete+0x6> bnez	a0,1c0018e0 <vQueueDelete+0x28>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1979 (discriminator 1)
1c0018c0 <vQueueDelete+0x8> lui	a3,0x1c008
1c0018c4 <vQueueDelete+0xc> lui	a2,0x1c008
1c0018c8 <vQueueDelete+0x10> lui	a0,0x1c008
1c0018cc <vQueueDelete+0x14> mv	a3,a3
1c0018d0 <vQueueDelete+0x18> addi	a2,a2,932 # 1c0083a4 <__func__.2>
1c0018d4 <vQueueDelete+0x1c> li	a1,1979
1c0018d8 <vQueueDelete+0x20> addi	a0,a0,8 # 1c008008 <__l2_priv0_end+0x3208>
1c0018dc <vQueueDelete+0x24> jal	ra,1c0037c8 <__assert_func>
1c0018e0 <vQueueDelete+0x28> mv	s0,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1984
		vQueueUnregisterQueue( pxQueue );
1c0018e2 <vQueueDelete+0x2a> jal	1c00188a <vQueueUnregisterQueue>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1992
		vPortFree( pxQueue );
1c0018e4 <vQueueDelete+0x2c> mv	a0,s0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2014
}
1c0018e6 <vQueueDelete+0x2e> lw	s0,8(sp)
1c0018e8 <vQueueDelete+0x30> lw	ra,12(sp)
1c0018ea <vQueueDelete+0x32> addi	sp,sp,16
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:1992
		vPortFree( pxQueue );
1c0018ec <vQueueDelete+0x34> j	1c002992 <vPortFree>
vQueueWaitForMessageRestricted():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2738
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1c0018f0 <vQueueWaitForMessageRestricted> addi	sp,sp,-16
1c0018f2 <vQueueWaitForMessageRestricted+0x2> sw	s0,8(sp)
1c0018f4 <vQueueWaitForMessageRestricted+0x4> sw	s1,4(sp)
1c0018f6 <vQueueWaitForMessageRestricted+0x6> sw	s2,0(sp)
1c0018f8 <vQueueWaitForMessageRestricted+0x8> mv	s0,a0
1c0018fa <vQueueWaitForMessageRestricted+0xa> sw	ra,12(sp)
1c0018fc <vQueueWaitForMessageRestricted+0xc> mv	s1,a1
1c0018fe <vQueueWaitForMessageRestricted+0xe> mv	s2,a2
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2755
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1c001900 <vQueueWaitForMessageRestricted+0x10> jal	ra,1c00200c <vTaskEnterCritical>
1c001904 <vQueueWaitForMessageRestricted+0x14> lbu	a5,68(s0)
1c001908 <vQueueWaitForMessageRestricted+0x18> li	a4,-1
1c00190a <vQueueWaitForMessageRestricted+0x1a> slli	a5,a5,0x18
1c00190c <vQueueWaitForMessageRestricted+0x1c> srai	a5,a5,0x18
1c00190e <vQueueWaitForMessageRestricted+0x1e> bne	a5,a4,1c001916 <vQueueWaitForMessageRestricted+0x26>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2755 (discriminator 1)
1c001912 <vQueueWaitForMessageRestricted+0x22> sb	zero,68(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2755 (discriminator 3)
1c001916 <vQueueWaitForMessageRestricted+0x26> lbu	a5,69(s0)
1c00191a <vQueueWaitForMessageRestricted+0x2a> li	a4,-1
1c00191c <vQueueWaitForMessageRestricted+0x2c> slli	a5,a5,0x18
1c00191e <vQueueWaitForMessageRestricted+0x2e> srai	a5,a5,0x18
1c001920 <vQueueWaitForMessageRestricted+0x30> bne	a5,a4,1c001928 <vQueueWaitForMessageRestricted+0x38>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2755 (discriminator 4)
1c001924 <vQueueWaitForMessageRestricted+0x34> sb	zero,69(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2755 (discriminator 6)
1c001928 <vQueueWaitForMessageRestricted+0x38> jal	ra,1c002026 <vTaskExitCritical>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2756 (discriminator 6)
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1c00192c <vQueueWaitForMessageRestricted+0x3c> lw	a5,56(s0)
1c00192e <vQueueWaitForMessageRestricted+0x3e> bnez	a5,1c00193a <vQueueWaitForMessageRestricted+0x4a>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2759
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1c001930 <vQueueWaitForMessageRestricted+0x40> mv	a2,s2
1c001932 <vQueueWaitForMessageRestricted+0x42> mv	a1,s1
1c001934 <vQueueWaitForMessageRestricted+0x44> addi	a0,s0,36
1c001938 <vQueueWaitForMessageRestricted+0x48> jal	1c001c88 <vTaskPlaceOnEventListRestricted>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2765
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1c00193a <vQueueWaitForMessageRestricted+0x4a> mv	a0,s0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2766
	}
1c00193c <vQueueWaitForMessageRestricted+0x4c> lw	s0,8(sp)
1c00193e <vQueueWaitForMessageRestricted+0x4e> lw	ra,12(sp)
1c001940 <vQueueWaitForMessageRestricted+0x50> lw	s1,4(sp)
1c001942 <vQueueWaitForMessageRestricted+0x52> lw	s2,0(sp)
1c001944 <vQueueWaitForMessageRestricted+0x54> addi	sp,sp,16
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/queue.c:2765
		prvUnlockQueue( pxQueue );
1c001946 <vQueueWaitForMessageRestricted+0x56> j	1c001008 <prvUnlockQueue>
prvAddCurrentTaskToDelayedList():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:5178

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1c00194a <prvAddCurrentTaskToDelayedList> addi	sp,sp,-32
1c00194c <prvAddCurrentTaskToDelayedList+0x2> sw	s1,20(sp)
1c00194e <prvAddCurrentTaskToDelayedList+0x4> sw	s3,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:5180
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1c001950 <prvAddCurrentTaskToDelayedList+0x6> lw	s3,-632(gp) # 1c009164 <xTickCount>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:5187
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
1c001954 <prvAddCurrentTaskToDelayedList+0xa> addi	a5,gp,-684 # 1c009130 <pxCurrentTCB>
1c001958 <prvAddCurrentTaskToDelayedList+0xe> lw	a4,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:5178
{
1c00195a <prvAddCurrentTaskToDelayedList+0x10> sw	s0,24(sp)
1c00195c <prvAddCurrentTaskToDelayedList+0x12> mv	s0,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:5193
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1c00195e <prvAddCurrentTaskToDelayedList+0x14> lw	a0,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:5178
{
1c001960 <prvAddCurrentTaskToDelayedList+0x16> sw	s2,16(sp)
1c001962 <prvAddCurrentTaskToDelayedList+0x18> sw	ra,28(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:5187
		pxCurrentTCB->ucDelayAborted = pdFALSE;
1c001964 <prvAddCurrentTaskToDelayedList+0x1a> sb	zero,1157(a4) # 01000485 <__heap_l2_shared_size+0xf99e55>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:5193
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1c001968 <prvAddCurrentTaskToDelayedList+0x1e> addi	a0,a0,4
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:5178
{
1c00196a <prvAddCurrentTaskToDelayedList+0x20> mv	s2,a1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:5193
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1c00196c <prvAddCurrentTaskToDelayedList+0x22> jal	ra,1c000f26 <uxListRemove>
1c001970 <prvAddCurrentTaskToDelayedList+0x26> addi	a5,gp,-684 # 1c009130 <pxCurrentTCB>
1c001974 <prvAddCurrentTaskToDelayedList+0x2a> bnez	a0,1c00198e <prvAddCurrentTaskToDelayedList+0x44>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:5197
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
1c001976 <prvAddCurrentTaskToDelayedList+0x2c> lw	a4,0(a5)
1c001978 <prvAddCurrentTaskToDelayedList+0x2e> addi	a3,gp,-656 # 1c00914c <uxTopReadyPriority>
1c00197c <prvAddCurrentTaskToDelayedList+0x32> lw	a1,44(a4)
1c00197e <prvAddCurrentTaskToDelayedList+0x34> lw	a2,0(a3)
1c001980 <prvAddCurrentTaskToDelayedList+0x36> li	a4,1
1c001982 <prvAddCurrentTaskToDelayedList+0x38> sll	a4,a4,a1
1c001986 <prvAddCurrentTaskToDelayedList+0x3c> not	a4,a4
1c00198a <prvAddCurrentTaskToDelayedList+0x40> and	a4,a4,a2
1c00198c <prvAddCurrentTaskToDelayedList+0x42> sw	a4,0(a3)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:5206
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1c00198e <prvAddCurrentTaskToDelayedList+0x44> li	a4,-1
1c001990 <prvAddCurrentTaskToDelayedList+0x46> bne	s0,a4,1c0019b0 <prvAddCurrentTaskToDelayedList+0x66>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:5206 (discriminator 1)
1c001994 <prvAddCurrentTaskToDelayedList+0x4a> beqz	s2,1c0019b0 <prvAddCurrentTaskToDelayedList+0x66>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:5211
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1c001998 <prvAddCurrentTaskToDelayedList+0x4e> lw	a1,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:5286

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1c00199a <prvAddCurrentTaskToDelayedList+0x50> lw	s0,24(sp)
1c00199c <prvAddCurrentTaskToDelayedList+0x52> lw	ra,28(sp)
1c00199e <prvAddCurrentTaskToDelayedList+0x54> lw	s1,20(sp)
1c0019a0 <prvAddCurrentTaskToDelayedList+0x56> lw	s2,16(sp)
1c0019a2 <prvAddCurrentTaskToDelayedList+0x58> lw	s3,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:5211
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1c0019a4 <prvAddCurrentTaskToDelayedList+0x5a> addi	a1,a1,4
1c0019a6 <prvAddCurrentTaskToDelayedList+0x5c> addi	a0,gp,-1716 # 1c008d28 <xSuspendedTaskList>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:5286
}
1c0019aa <prvAddCurrentTaskToDelayedList+0x60> addi	sp,sp,32
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:5211
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1c0019ac <prvAddCurrentTaskToDelayedList+0x62> j	1c000ee0 <vListInsertEnd>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:5221
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1c0019b0 <prvAddCurrentTaskToDelayedList+0x66> lw	a4,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:5218
			xTimeToWake = xConstTickCount + xTicksToWait;
1c0019b2 <prvAddCurrentTaskToDelayedList+0x68> add	s0,s0,s3
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:5221
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1c0019b4 <prvAddCurrentTaskToDelayedList+0x6a> sw	s0,4(a4)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:5223
			if( xTimeToWake < xConstTickCount )
1c0019b6 <prvAddCurrentTaskToDelayedList+0x6c> bgeu	s0,s3,1c0019d2 <prvAddCurrentTaskToDelayedList+0x88>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:5227
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1c0019ba <prvAddCurrentTaskToDelayedList+0x70> lw	a0,-676(gp) # 1c009138 <pxOverflowDelayedTaskList>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:5286
}
1c0019be <prvAddCurrentTaskToDelayedList+0x74> lw	s0,24(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:5227
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1c0019c0 <prvAddCurrentTaskToDelayedList+0x76> lw	a1,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:5286
}
1c0019c2 <prvAddCurrentTaskToDelayedList+0x78> lw	ra,28(sp)
1c0019c4 <prvAddCurrentTaskToDelayedList+0x7a> lw	s1,20(sp)
1c0019c6 <prvAddCurrentTaskToDelayedList+0x7c> lw	s2,16(sp)
1c0019c8 <prvAddCurrentTaskToDelayedList+0x7e> lw	s3,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:5227
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1c0019ca <prvAddCurrentTaskToDelayedList+0x80> addi	a1,a1,4
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:5286
}
1c0019cc <prvAddCurrentTaskToDelayedList+0x82> addi	sp,sp,32
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:5227
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1c0019ce <prvAddCurrentTaskToDelayedList+0x84> j	1c000ef8 <vListInsert>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:5233
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1c0019d2 <prvAddCurrentTaskToDelayedList+0x88> lw	a0,-680(gp) # 1c009134 <pxDelayedTaskList>
1c0019d6 <prvAddCurrentTaskToDelayedList+0x8c> lw	a1,0(a5)
1c0019d8 <prvAddCurrentTaskToDelayedList+0x8e> addi	a1,a1,4
1c0019da <prvAddCurrentTaskToDelayedList+0x90> jal	ra,1c000ef8 <vListInsert>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:5238
				if( xTimeToWake < xNextTaskUnblockTime )
1c0019de <prvAddCurrentTaskToDelayedList+0x94> addi	a5,gp,-648 # 1c009154 <xNextTaskUnblockTime>
1c0019e2 <prvAddCurrentTaskToDelayedList+0x98> lw	a4,0(a5)
1c0019e4 <prvAddCurrentTaskToDelayedList+0x9a> bgeu	s0,a4,1c0019ea <prvAddCurrentTaskToDelayedList+0xa0>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:5240
					xNextTaskUnblockTime = xTimeToWake;
1c0019e8 <prvAddCurrentTaskToDelayedList+0x9e> sw	s0,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:5286
}
1c0019ea <prvAddCurrentTaskToDelayedList+0xa0> lw	ra,28(sp)
1c0019ec <prvAddCurrentTaskToDelayedList+0xa2> lw	s0,24(sp)
1c0019ee <prvAddCurrentTaskToDelayedList+0xa4> lw	s1,20(sp)
1c0019f0 <prvAddCurrentTaskToDelayedList+0xa6> lw	s2,16(sp)
1c0019f2 <prvAddCurrentTaskToDelayedList+0xa8> lw	s3,12(sp)
1c0019f4 <prvAddCurrentTaskToDelayedList+0xaa> addi	sp,sp,32
1c0019f6 <prvAddCurrentTaskToDelayedList+0xac> ret
prvResetNextTaskUnblockTime():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3947
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1c0019f8 <prvResetNextTaskUnblockTime> addi	a4,gp,-680 # 1c009134 <pxDelayedTaskList>
1c0019fc <prvResetNextTaskUnblockTime+0x4> lw	a5,0(a4)
1c0019fe <prvResetNextTaskUnblockTime+0x6> lw	a3,0(a5)
1c001a00 <prvResetNextTaskUnblockTime+0x8> addi	a5,gp,-648 # 1c009154 <xNextTaskUnblockTime>
1c001a04 <prvResetNextTaskUnblockTime+0xc> bnez	a3,1c001a0c <prvResetNextTaskUnblockTime+0x14>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3953
		xNextTaskUnblockTime = portMAX_DELAY;
1c001a06 <prvResetNextTaskUnblockTime+0xe> li	a4,-1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3962
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1c001a08 <prvResetNextTaskUnblockTime+0x10> sw	a4,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3964
}
1c001a0a <prvResetNextTaskUnblockTime+0x12> ret
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3961
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
1c001a0c <prvResetNextTaskUnblockTime+0x14> lw	a4,0(a4)
1c001a0e <prvResetNextTaskUnblockTime+0x16> lw	a4,12(a4)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3962
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1c001a10 <prvResetNextTaskUnblockTime+0x18> lw	a4,12(a4)
1c001a12 <prvResetNextTaskUnblockTime+0x1a> lw	a4,4(a4)
1c001a14 <prvResetNextTaskUnblockTime+0x1c> j	1c001a08 <prvResetNextTaskUnblockTime+0x10>
vTaskSuspendAll():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2123
	++uxSchedulerSuspended;
1c001a16 <vTaskSuspendAll> addi	a5,gp,-664 # 1c009144 <uxSchedulerSuspended>
1c001a1a <vTaskSuspendAll+0x4> lw	a4,0(a5)
1c001a1c <vTaskSuspendAll+0x6> addi	a4,a4,1
1c001a1e <vTaskSuspendAll+0x8> sw	a4,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2128
}
1c001a20 <vTaskSuspendAll+0xa> ret
xTaskGetTickCount():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2311
		xTicks = xTickCount;
1c001a22 <xTaskGetTickCount> lw	a0,-632(gp) # 1c009164 <xTickCount>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2316
}
1c001a26 <xTaskGetTickCount+0x4> ret
xTaskIncrementTick():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2717
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1c001a28 <xTaskIncrementTick> lw	a5,-664(gp) # 1c009144 <uxSchedulerSuspended>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2708
{
1c001a2c <xTaskIncrementTick+0x4> addi	sp,sp,-48
1c001a2e <xTaskIncrementTick+0x6> sw	ra,44(sp)
1c001a30 <xTaskIncrementTick+0x8> sw	s0,40(sp)
1c001a32 <xTaskIncrementTick+0xa> sw	s1,36(sp)
1c001a34 <xTaskIncrementTick+0xc> sw	s2,32(sp)
1c001a36 <xTaskIncrementTick+0xe> sw	s3,28(sp)
1c001a38 <xTaskIncrementTick+0x10> sw	s4,24(sp)
1c001a3a <xTaskIncrementTick+0x12> sw	s5,20(sp)
1c001a3c <xTaskIncrementTick+0x14> sw	s6,16(sp)
1c001a3e <xTaskIncrementTick+0x16> sw	s7,12(sp)
1c001a40 <xTaskIncrementTick+0x18> sw	s8,8(sp)
1c001a42 <xTaskIncrementTick+0x1a> sw	s9,4(sp)
1c001a44 <xTaskIncrementTick+0x1c> sw	s10,0(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2717
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1c001a46 <xTaskIncrementTick+0x1e> bnez	a5,1c001b68 <xTaskIncrementTick+0x140>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2721
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1c001a4a <xTaskIncrementTick+0x22> addi	a5,gp,-632 # 1c009164 <xTickCount>
1c001a4e <xTaskIncrementTick+0x26> lw	s4,0(a5)
1c001a52 <xTaskIncrementTick+0x2a> addi	s4,s4,1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2725
		xTickCount = xConstTickCount;
1c001a54 <xTaskIncrementTick+0x2c> sw	s4,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2727
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1c001a58 <xTaskIncrementTick+0x30> bnez	s4,1c001aa0 <xTaskIncrementTick+0x78>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2729
			taskSWITCH_DELAYED_LISTS();
1c001a5c <xTaskIncrementTick+0x34> addi	a5,gp,-680 # 1c009134 <pxDelayedTaskList>
1c001a60 <xTaskIncrementTick+0x38> lw	a4,0(a5)
1c001a62 <xTaskIncrementTick+0x3a> lw	a4,0(a4)
1c001a64 <xTaskIncrementTick+0x3c> beqz	a4,1c001a88 <xTaskIncrementTick+0x60>
1c001a66 <xTaskIncrementTick+0x3e> lui	a3,0x1c008
1c001a6a <xTaskIncrementTick+0x42> lui	a2,0x1c008
1c001a6e <xTaskIncrementTick+0x46> lui	a1,0x1
1c001a70 <xTaskIncrementTick+0x48> lui	a0,0x1c008
1c001a74 <xTaskIncrementTick+0x4c> addi	a3,a3,1068 # 1c00842c <__func__.9+0x60>
1c001a78 <xTaskIncrementTick+0x50> addi	a2,a2,1484 # 1c0085cc <__func__.13>
1c001a7c <xTaskIncrementTick+0x54> addi	a1,a1,-1367 # 00000aa9 <__stack_size+0x2a9>
1c001a80 <xTaskIncrementTick+0x58> addi	a0,a0,1000 # 1c0083e8 <__func__.9+0x1c>
1c001a84 <xTaskIncrementTick+0x5c> jal	ra,1c0037c8 <__assert_func>
1c001a88 <xTaskIncrementTick+0x60> addi	a4,gp,-676 # 1c009138 <pxOverflowDelayedTaskList>
1c001a8c <xTaskIncrementTick+0x64> lw	a3,0(a5)
1c001a8e <xTaskIncrementTick+0x66> lw	a2,0(a4)
1c001a90 <xTaskIncrementTick+0x68> sw	a2,0(a5)
1c001a92 <xTaskIncrementTick+0x6a> sw	a3,0(a4)
1c001a94 <xTaskIncrementTick+0x6c> addi	a5,gp,-644 # 1c009158 <xNumOfOverflows>
1c001a98 <xTaskIncrementTick+0x70> lw	a4,0(a5)
1c001a9a <xTaskIncrementTick+0x72> addi	a4,a4,1
1c001a9c <xTaskIncrementTick+0x74> sw	a4,0(a5)
1c001a9e <xTaskIncrementTick+0x76> jal	1c0019f8 <prvResetNextTaskUnblockTime>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2740
		if( xConstTickCount >= xNextTaskUnblockTime )
1c001aa0 <xTaskIncrementTick+0x78> addi	a5,gp,-648 # 1c009154 <xNextTaskUnblockTime>
1c001aa4 <xTaskIncrementTick+0x7c> lw	a5,0(a5)
1c001aa6 <xTaskIncrementTick+0x7e> lui	s1,0x1c009
1c001aaa <xTaskIncrementTick+0x82> addi	s3,gp,-648 # 1c009154 <xNextTaskUnblockTime>
1c001aae <xTaskIncrementTick+0x86> addi	s1,s1,-888 # 1c008c88 <pxReadyTasksLists>
1c001ab2 <xTaskIncrementTick+0x8a> addi	s5,gp,-684 # 1c009130 <pxCurrentTCB>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2711
BaseType_t xSwitchRequired = pdFALSE;
1c001ab6 <xTaskIncrementTick+0x8e> li	s0,0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2740
		if( xConstTickCount >= xNextTaskUnblockTime )
1c001ab8 <xTaskIncrementTick+0x90> bgeu	s4,a5,1c001afa <xTaskIncrementTick+0xd2>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2823
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1c001abc <xTaskIncrementTick+0x94> lw	a5,0(s5)
1c001ac0 <xTaskIncrementTick+0x98> li	a4,20
1c001ac2 <xTaskIncrementTick+0x9a> lw	a5,44(a5)
1c001ac4 <xTaskIncrementTick+0x9c> mul	a5,a5,a4
1c001ac8 <xTaskIncrementTick+0xa0> add	s1,s1,a5
1c001aca <xTaskIncrementTick+0xa2> lw	a4,0(s1)
1c001acc <xTaskIncrementTick+0xa4> li	a5,1
1c001ace <xTaskIncrementTick+0xa6> bgeu	a5,a4,1c001ad4 <xTaskIncrementTick+0xac>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2825
				xSwitchRequired = pdTRUE;
1c001ad2 <xTaskIncrementTick+0xaa> li	s0,1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2851
			if( xYieldPending != pdFALSE )
1c001ad4 <xTaskIncrementTick+0xac> lw	a5,-628(gp) # 1c009168 <xYieldPending>
1c001ad8 <xTaskIncrementTick+0xb0> beqz	a5,1c001adc <xTaskIncrementTick+0xb4>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2853
				xSwitchRequired = pdTRUE;
1c001ada <xTaskIncrementTick+0xb2> li	s0,1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2876
}
1c001adc <xTaskIncrementTick+0xb4> lw	ra,44(sp)
1c001ade <xTaskIncrementTick+0xb6> mv	a0,s0
1c001ae0 <xTaskIncrementTick+0xb8> lw	s0,40(sp)
1c001ae2 <xTaskIncrementTick+0xba> lw	s1,36(sp)
1c001ae4 <xTaskIncrementTick+0xbc> lw	s2,32(sp)
1c001ae6 <xTaskIncrementTick+0xbe> lw	s3,28(sp)
1c001ae8 <xTaskIncrementTick+0xc0> lw	s4,24(sp)
1c001aea <xTaskIncrementTick+0xc2> lw	s5,20(sp)
1c001aec <xTaskIncrementTick+0xc4> lw	s6,16(sp)
1c001aee <xTaskIncrementTick+0xc6> lw	s7,12(sp)
1c001af0 <xTaskIncrementTick+0xc8> lw	s8,8(sp)
1c001af2 <xTaskIncrementTick+0xca> lw	s9,4(sp)
1c001af4 <xTaskIncrementTick+0xcc> lw	s10,0(sp)
1c001af6 <xTaskIncrementTick+0xce> addi	sp,sp,48
1c001af8 <xTaskIncrementTick+0xd0> ret
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2794
					prvAddTaskToReadyList( pxTCB );
1c001afa <xTaskIncrementTick+0xd2> li	s8,1
1c001afc <xTaskIncrementTick+0xd4> li	s9,20
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2744
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1c001afe <xTaskIncrementTick+0xd6> addi	a5,gp,-680 # 1c009134 <pxDelayedTaskList>
1c001b02 <xTaskIncrementTick+0xda> lw	a4,0(a5)
1c001b04 <xTaskIncrementTick+0xdc> lw	a4,0(a4)
1c001b06 <xTaskIncrementTick+0xde> bnez	a4,1c001b10 <xTaskIncrementTick+0xe8>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2751
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1c001b08 <xTaskIncrementTick+0xe0> li	a5,-1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2770
						xNextTaskUnblockTime = xItemValue;
1c001b0a <xTaskIncrementTick+0xe2> sw	a5,0(s3)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2771
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
1c001b0e <xTaskIncrementTick+0xe6> j	1c001abc <xTaskIncrementTick+0x94>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2760
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
1c001b10 <xTaskIncrementTick+0xe8> lw	a5,0(a5)
1c001b12 <xTaskIncrementTick+0xea> lw	a5,12(a5)
1c001b14 <xTaskIncrementTick+0xec> lw	s2,12(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2761
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1c001b18 <xTaskIncrementTick+0xf0> lw	a5,4(s2)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2763
					if( xConstTickCount < xItemValue )
1c001b1c <xTaskIncrementTick+0xf4> bltu	s4,a5,1c001b0a <xTaskIncrementTick+0xe2>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2779
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1c001b20 <xTaskIncrementTick+0xf8> addi	s10,s2,4
1c001b24 <xTaskIncrementTick+0xfc> mv	a0,s10
1c001b26 <xTaskIncrementTick+0xfe> jal	ra,1c000f26 <uxListRemove>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2783
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1c001b2a <xTaskIncrementTick+0x102> lw	a5,40(s2)
1c001b2e <xTaskIncrementTick+0x106> beqz	a5,1c001b38 <xTaskIncrementTick+0x110>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2785
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1c001b30 <xTaskIncrementTick+0x108> addi	a0,s2,24
1c001b34 <xTaskIncrementTick+0x10c> jal	ra,1c000f26 <uxListRemove>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2794
					prvAddTaskToReadyList( pxTCB );
1c001b38 <xTaskIncrementTick+0x110> lw	a0,44(s2)
1c001b3c <xTaskIncrementTick+0x114> addi	a4,gp,-656 # 1c00914c <uxTopReadyPriority>
1c001b40 <xTaskIncrementTick+0x118> lw	a3,0(a4)
1c001b42 <xTaskIncrementTick+0x11a> sll	a5,s8,a0
1c001b46 <xTaskIncrementTick+0x11e> mul	a0,a0,s9
1c001b4a <xTaskIncrementTick+0x122> or	a5,a5,a3
1c001b4c <xTaskIncrementTick+0x124> mv	a1,s10
1c001b4e <xTaskIncrementTick+0x126> sw	a5,0(a4)
1c001b50 <xTaskIncrementTick+0x128> add	a0,a0,s1
1c001b52 <xTaskIncrementTick+0x12a> jal	ra,1c000ee0 <vListInsertEnd>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2804
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1c001b56 <xTaskIncrementTick+0x12e> lw	a5,0(s5)
1c001b5a <xTaskIncrementTick+0x132> lw	a4,44(s2)
1c001b5e <xTaskIncrementTick+0x136> lw	a5,44(a5)
1c001b60 <xTaskIncrementTick+0x138> bltu	a4,a5,1c001afe <xTaskIncrementTick+0xd6>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2806
							xSwitchRequired = pdTRUE;
1c001b64 <xTaskIncrementTick+0x13c> li	s0,1
1c001b66 <xTaskIncrementTick+0x13e> j	1c001afe <xTaskIncrementTick+0xd6>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2864
		++xPendedTicks;
1c001b68 <xTaskIncrementTick+0x140> addi	a5,gp,-640 # 1c00915c <xPendedTicks>
1c001b6c <xTaskIncrementTick+0x144> lw	a4,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2711
BaseType_t xSwitchRequired = pdFALSE;
1c001b6e <xTaskIncrementTick+0x146> li	s0,0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2864
		++xPendedTicks;
1c001b70 <xTaskIncrementTick+0x148> addi	a4,a4,1
1c001b72 <xTaskIncrementTick+0x14a> sw	a4,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2875
	return xSwitchRequired;
1c001b74 <xTaskIncrementTick+0x14c> j	1c001adc <xTaskIncrementTick+0xb4>
vTaskSwitchContext():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2991
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1c001b76 <vTaskSwitchContext> lw	a4,-664(gp) # 1c009144 <uxSchedulerSuspended>
1c001b7a <vTaskSwitchContext+0x4> addi	a5,gp,-628 # 1c009168 <xYieldPending>
1c001b7e <vTaskSwitchContext+0x8> beqz	a4,1c001b86 <vTaskSwitchContext+0x10>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2995
		xYieldPending = pdTRUE;
1c001b80 <vTaskSwitchContext+0xa> li	a4,1
1c001b82 <vTaskSwitchContext+0xc> sw	a4,0(a5)
1c001b84 <vTaskSwitchContext+0xe> ret
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2990
{
1c001b86 <vTaskSwitchContext+0x10> addi	sp,sp,-16
1c001b88 <vTaskSwitchContext+0x12> sw	s0,8(sp)
1c001b8a <vTaskSwitchContext+0x14> sw	ra,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2999
		xYieldPending = pdFALSE;
1c001b8c <vTaskSwitchContext+0x16> sw	zero,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3030
		taskCHECK_FOR_STACK_OVERFLOW();
1c001b90 <vTaskSwitchContext+0x1a> addi	a5,gp,-684 # 1c009130 <pxCurrentTCB>
1c001b94 <vTaskSwitchContext+0x1e> lw	a5,0(a5)
1c001b96 <vTaskSwitchContext+0x20> lui	a4,0xa5a5a
1c001b9a <vTaskSwitchContext+0x24> addi	a4,a4,1445 # a5a5a5a5 <__heap_l2_shared_start+0x89a40bd5>
1c001b9e <vTaskSwitchContext+0x28> lw	a5,48(a5)
1c001ba0 <vTaskSwitchContext+0x2a> addi	s0,gp,-684 # 1c009130 <pxCurrentTCB>
1c001ba4 <vTaskSwitchContext+0x2e> lw	a2,0(a5)
1c001ba6 <vTaskSwitchContext+0x30> bne	a2,a4,1c001bbc <vTaskSwitchContext+0x46>
1c001baa <vTaskSwitchContext+0x34> lw	a3,4(a5)
1c001bac <vTaskSwitchContext+0x36> bne	a3,a2,1c001bbc <vTaskSwitchContext+0x46>
1c001bb0 <vTaskSwitchContext+0x3a> lw	a4,8(a5)
1c001bb2 <vTaskSwitchContext+0x3c> bne	a4,a3,1c001bbc <vTaskSwitchContext+0x46>
1c001bb6 <vTaskSwitchContext+0x40> lw	a5,12(a5)
1c001bb8 <vTaskSwitchContext+0x42> beq	a5,a4,1c001bc8 <vTaskSwitchContext+0x52>
1c001bbc <vTaskSwitchContext+0x46> lw	a0,0(s0)
1c001bbe <vTaskSwitchContext+0x48> lw	a1,0(s0)
1c001bc0 <vTaskSwitchContext+0x4a> addi	a1,a1,52
1c001bc4 <vTaskSwitchContext+0x4e> jal	ra,1c00319c <vApplicationStackOverflowHook>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3041
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
1c001bc8 <vTaskSwitchContext+0x52> lw	a0,-656(gp) # 1c00914c <uxTopReadyPriority>
1c001bcc <vTaskSwitchContext+0x56> jal	ra,1c000e8a <__clzsi2>
1c001bd0 <vTaskSwitchContext+0x5a> li	a4,31
1c001bd2 <vTaskSwitchContext+0x5c> sub	a0,a4,a0
1c001bd6 <vTaskSwitchContext+0x60> li	a5,20
1c001bd8 <vTaskSwitchContext+0x62> mul	a5,a0,a5
1c001bdc <vTaskSwitchContext+0x66> lui	a4,0x1c009
1c001be0 <vTaskSwitchContext+0x6a> addi	a3,a4,-888 # 1c008c88 <pxReadyTasksLists>
1c001be4 <vTaskSwitchContext+0x6e> addi	a4,a4,-888
1c001be8 <vTaskSwitchContext+0x72> add	a3,a3,a5
1c001bea <vTaskSwitchContext+0x74> lw	a2,0(a3)
1c001bec <vTaskSwitchContext+0x76> bnez	a2,1c001c10 <vTaskSwitchContext+0x9a>
1c001bee <vTaskSwitchContext+0x78> lui	a3,0x1c008
1c001bf2 <vTaskSwitchContext+0x7c> lui	a2,0x1c008
1c001bf6 <vTaskSwitchContext+0x80> lui	a1,0x1
1c001bf8 <vTaskSwitchContext+0x82> lui	a0,0x1c008
1c001bfc <vTaskSwitchContext+0x86> addi	a3,a3,1188 # 1c0084a4 <__func__.9+0xd8>
1c001c00 <vTaskSwitchContext+0x8a> addi	a2,a2,1464 # 1c0085b8 <__func__.12>
1c001c04 <vTaskSwitchContext+0x8e> addi	a1,a1,-1055 # 00000be1 <__stack_size+0x3e1>
1c001c08 <vTaskSwitchContext+0x92> addi	a0,a0,1000 # 1c0083e8 <__func__.9+0x1c>
1c001c0c <vTaskSwitchContext+0x96> jal	ra,1c0037c8 <__assert_func>
1c001c10 <vTaskSwitchContext+0x9a> lw	a2,4(a3)
1c001c12 <vTaskSwitchContext+0x9c> addi	a5,a5,8
1c001c14 <vTaskSwitchContext+0x9e> add	a5,a5,a4
1c001c16 <vTaskSwitchContext+0xa0> lw	a2,4(a2)
1c001c18 <vTaskSwitchContext+0xa2> sw	a2,4(a3)
1c001c1a <vTaskSwitchContext+0xa4> bne	a2,a5,1c001c22 <vTaskSwitchContext+0xac>
1c001c1e <vTaskSwitchContext+0xa8> lw	a5,4(a2)
1c001c20 <vTaskSwitchContext+0xaa> sw	a5,4(a3)
1c001c22 <vTaskSwitchContext+0xac> li	a5,20
1c001c24 <vTaskSwitchContext+0xae> mul	a0,a0,a5
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3061
}
1c001c28 <vTaskSwitchContext+0xb2> lw	ra,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3041
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
1c001c2a <vTaskSwitchContext+0xb4> add	a4,a4,a0
1c001c2c <vTaskSwitchContext+0xb6> lw	a5,4(a4)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3057
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1c001c2e <vTaskSwitchContext+0xb8> lui	a4,0x1c009
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3041
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
1c001c32 <vTaskSwitchContext+0xbc> lw	a5,12(a5)
1c001c34 <vTaskSwitchContext+0xbe> sw	a5,0(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3057
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1c001c36 <vTaskSwitchContext+0xc0> lw	a5,0(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3061
}
1c001c38 <vTaskSwitchContext+0xc2> lw	s0,8(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3057
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1c001c3a <vTaskSwitchContext+0xc4> addi	a5,a5,88
1c001c3e <vTaskSwitchContext+0xc8> sw	a5,-956(a4) # 1c008c44 <_impure_ptr>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3061
}
1c001c42 <vTaskSwitchContext+0xcc> addi	sp,sp,16
1c001c44 <vTaskSwitchContext+0xce> ret
vTaskPlaceOnEventList():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3065
{
1c001c46 <vTaskPlaceOnEventList> addi	sp,sp,-16
1c001c48 <vTaskPlaceOnEventList+0x2> sw	ra,12(sp)
1c001c4a <vTaskPlaceOnEventList+0x4> sw	s0,8(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3066
	configASSERT( pxEventList );
1c001c4c <vTaskPlaceOnEventList+0x6> bnez	a0,1c001c70 <vTaskPlaceOnEventList+0x2a>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3066 (discriminator 1)
1c001c4e <vTaskPlaceOnEventList+0x8> lui	a3,0x1c008
1c001c52 <vTaskPlaceOnEventList+0xc> lui	a2,0x1c008
1c001c56 <vTaskPlaceOnEventList+0x10> lui	a1,0x1
1c001c58 <vTaskPlaceOnEventList+0x12> lui	a0,0x1c008
1c001c5c <vTaskPlaceOnEventList+0x16> addi	a3,a3,1260 # 1c0084ec <__func__.9+0x120>
1c001c60 <vTaskPlaceOnEventList+0x1a> addi	a2,a2,1440 # 1c0085a0 <__func__.11>
1c001c64 <vTaskPlaceOnEventList+0x1e> addi	a1,a1,-1030 # 00000bfa <__stack_size+0x3fa>
1c001c68 <vTaskPlaceOnEventList+0x22> addi	a0,a0,1000 # 1c0083e8 <__func__.9+0x1c>
1c001c6c <vTaskPlaceOnEventList+0x26> jal	ra,1c0037c8 <__assert_func>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3075
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1c001c70 <vTaskPlaceOnEventList+0x2a> mv	s0,a1
1c001c72 <vTaskPlaceOnEventList+0x2c> lw	a1,-684(gp) # 1c009130 <pxCurrentTCB>
1c001c76 <vTaskPlaceOnEventList+0x30> addi	a1,a1,24
1c001c78 <vTaskPlaceOnEventList+0x32> jal	ra,1c000ef8 <vListInsert>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3077
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1c001c7c <vTaskPlaceOnEventList+0x36> mv	a0,s0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3078
}
1c001c7e <vTaskPlaceOnEventList+0x38> lw	s0,8(sp)
1c001c80 <vTaskPlaceOnEventList+0x3a> lw	ra,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3077
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1c001c82 <vTaskPlaceOnEventList+0x3c> li	a1,1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3078
}
1c001c84 <vTaskPlaceOnEventList+0x3e> addi	sp,sp,16
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3077
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1c001c86 <vTaskPlaceOnEventList+0x40> j	1c00194a <prvAddCurrentTaskToDelayedList>
vTaskPlaceOnEventListRestricted():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3108
	{
1c001c88 <vTaskPlaceOnEventListRestricted> addi	sp,sp,-16
1c001c8a <vTaskPlaceOnEventListRestricted+0x2> sw	ra,12(sp)
1c001c8c <vTaskPlaceOnEventListRestricted+0x4> sw	s0,8(sp)
1c001c8e <vTaskPlaceOnEventListRestricted+0x6> sw	s1,4(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3109
		configASSERT( pxEventList );
1c001c90 <vTaskPlaceOnEventListRestricted+0x8> bnez	a0,1c001cb4 <vTaskPlaceOnEventListRestricted+0x2c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3109 (discriminator 1)
1c001c92 <vTaskPlaceOnEventListRestricted+0xa> lui	a3,0x1c008
1c001c96 <vTaskPlaceOnEventListRestricted+0xe> lui	a2,0x1c008
1c001c9a <vTaskPlaceOnEventListRestricted+0x12> lui	a1,0x1
1c001c9c <vTaskPlaceOnEventListRestricted+0x14> lui	a0,0x1c008
1c001ca0 <vTaskPlaceOnEventListRestricted+0x18> addi	a3,a3,1260 # 1c0084ec <__func__.9+0x120>
1c001ca4 <vTaskPlaceOnEventListRestricted+0x1c> addi	a2,a2,1652 # 1c008674 <__func__.9>
1c001ca8 <vTaskPlaceOnEventListRestricted+0x20> addi	a1,a1,-987 # 00000c25 <__stack_size+0x425>
1c001cac <vTaskPlaceOnEventListRestricted+0x24> addi	a0,a0,1000 # 1c0083e8 <__func__.9+0x1c>
1c001cb0 <vTaskPlaceOnEventListRestricted+0x28> jal	ra,1c0037c8 <__assert_func>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3121
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1c001cb4 <vTaskPlaceOnEventListRestricted+0x2c> mv	s0,a1
1c001cb6 <vTaskPlaceOnEventListRestricted+0x2e> lw	a1,-684(gp) # 1c009130 <pxCurrentTCB>
1c001cba <vTaskPlaceOnEventListRestricted+0x32> mv	s1,a2
1c001cbc <vTaskPlaceOnEventListRestricted+0x34> addi	a1,a1,24
1c001cbe <vTaskPlaceOnEventListRestricted+0x36> jal	ra,1c000ee0 <vListInsertEnd>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3126
		if( xWaitIndefinitely != pdFALSE )
1c001cc2 <vTaskPlaceOnEventListRestricted+0x3a> beqz	s1,1c001cc6 <vTaskPlaceOnEventListRestricted+0x3e>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3128
			xTicksToWait = portMAX_DELAY;
1c001cc4 <vTaskPlaceOnEventListRestricted+0x3c> li	s0,-1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3132
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1c001cc6 <vTaskPlaceOnEventListRestricted+0x3e> mv	a0,s0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3133
	}
1c001cc8 <vTaskPlaceOnEventListRestricted+0x40> lw	s0,8(sp)
1c001cca <vTaskPlaceOnEventListRestricted+0x42> lw	ra,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3132
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1c001ccc <vTaskPlaceOnEventListRestricted+0x44> mv	a1,s1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3133
	}
1c001cce <vTaskPlaceOnEventListRestricted+0x46> lw	s1,4(sp)
1c001cd0 <vTaskPlaceOnEventListRestricted+0x48> addi	sp,sp,16
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3132
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1c001cd2 <vTaskPlaceOnEventListRestricted+0x4a> j	1c00194a <prvAddCurrentTaskToDelayedList>
xTaskRemoveFromEventList():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3156
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
1c001cd4 <xTaskRemoveFromEventList> lw	a5,12(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3139
{
1c001cd6 <xTaskRemoveFromEventList+0x2> addi	sp,sp,-32
1c001cd8 <xTaskRemoveFromEventList+0x4> sw	s0,24(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3156
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
1c001cda <xTaskRemoveFromEventList+0x6> lw	s0,12(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3139
{
1c001cdc <xTaskRemoveFromEventList+0x8> sw	ra,28(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3157
	configASSERT( pxUnblockedTCB );
1c001cde <xTaskRemoveFromEventList+0xa> bnez	s0,1c001d02 <xTaskRemoveFromEventList+0x2e>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3157 (discriminator 1)
1c001ce0 <xTaskRemoveFromEventList+0xc> lui	a3,0x1c008
1c001ce4 <xTaskRemoveFromEventList+0x10> lui	a2,0x1c008
1c001ce8 <xTaskRemoveFromEventList+0x14> lui	a1,0x1
1c001cea <xTaskRemoveFromEventList+0x16> lui	a0,0x1c008
1c001cee <xTaskRemoveFromEventList+0x1a> addi	a3,a3,1272 # 1c0084f8 <__func__.9+0x12c>
1c001cf2 <xTaskRemoveFromEventList+0x1e> addi	a2,a2,1624 # 1c008658 <__func__.8>
1c001cf6 <xTaskRemoveFromEventList+0x22> addi	a1,a1,-939 # 00000c55 <__stack_size+0x455>
1c001cfa <xTaskRemoveFromEventList+0x26> addi	a0,a0,1000 # 1c0083e8 <__func__.9+0x1c>
1c001cfe <xTaskRemoveFromEventList+0x2a> jal	ra,1c0037c8 <__assert_func>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3158
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1c001d02 <xTaskRemoveFromEventList+0x2e> addi	a1,s0,24
1c001d06 <xTaskRemoveFromEventList+0x32> mv	a0,a1
1c001d08 <xTaskRemoveFromEventList+0x34> sw	a1,12(sp)
1c001d0a <xTaskRemoveFromEventList+0x36> jal	ra,1c000f26 <uxListRemove>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3160
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1c001d0e <xTaskRemoveFromEventList+0x3a> lw	a5,-664(gp) # 1c009144 <uxSchedulerSuspended>
1c001d12 <xTaskRemoveFromEventList+0x3e> lw	a1,12(sp)
1c001d14 <xTaskRemoveFromEventList+0x40> bnez	a5,1c001d68 <xTaskRemoveFromEventList+0x94>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3162
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1c001d16 <xTaskRemoveFromEventList+0x42> addi	a1,s0,4
1c001d1a <xTaskRemoveFromEventList+0x46> mv	a0,a1
1c001d1c <xTaskRemoveFromEventList+0x48> sw	a1,12(sp)
1c001d1e <xTaskRemoveFromEventList+0x4a> jal	ra,1c000f26 <uxListRemove>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3163
		prvAddTaskToReadyList( pxUnblockedTCB );
1c001d22 <xTaskRemoveFromEventList+0x4e> lw	a0,44(s0)
1c001d24 <xTaskRemoveFromEventList+0x50> addi	a4,gp,-656 # 1c00914c <uxTopReadyPriority>
1c001d28 <xTaskRemoveFromEventList+0x54> lw	a3,0(a4)
1c001d2a <xTaskRemoveFromEventList+0x56> li	a5,1
1c001d2c <xTaskRemoveFromEventList+0x58> sll	a5,a5,a0
1c001d30 <xTaskRemoveFromEventList+0x5c> or	a5,a5,a3
1c001d32 <xTaskRemoveFromEventList+0x5e> sw	a5,0(a4)
1c001d34 <xTaskRemoveFromEventList+0x60> li	a5,20
1c001d36 <xTaskRemoveFromEventList+0x62> mul	a0,a0,a5
1c001d3a <xTaskRemoveFromEventList+0x66> lw	a1,12(sp)
1c001d3c <xTaskRemoveFromEventList+0x68> lui	a5,0x1c009
1c001d40 <xTaskRemoveFromEventList+0x6c> addi	a5,a5,-888 # 1c008c88 <pxReadyTasksLists>
1c001d44 <xTaskRemoveFromEventList+0x70> add	a0,a0,a5
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3183
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1c001d46 <xTaskRemoveFromEventList+0x72> jal	ra,1c000ee0 <vListInsertEnd>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3186
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1c001d4a <xTaskRemoveFromEventList+0x76> lw	a5,-684(gp) # 1c009130 <pxCurrentTCB>
1c001d4e <xTaskRemoveFromEventList+0x7a> lw	a4,44(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3199
		xReturn = pdFALSE;
1c001d50 <xTaskRemoveFromEventList+0x7c> li	a0,0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3186
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1c001d52 <xTaskRemoveFromEventList+0x7e> lw	a5,44(a5)
1c001d54 <xTaskRemoveFromEventList+0x80> bgeu	a5,a4,1c001d60 <xTaskRemoveFromEventList+0x8c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3195
		xYieldPending = pdTRUE;
1c001d58 <xTaskRemoveFromEventList+0x84> li	a4,1
1c001d5a <xTaskRemoveFromEventList+0x86> sw	a4,-628(gp) # 1c009168 <xYieldPending>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3191
		xReturn = pdTRUE;
1c001d5e <xTaskRemoveFromEventList+0x8a> li	a0,1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3203
}
1c001d60 <xTaskRemoveFromEventList+0x8c> lw	ra,28(sp)
1c001d62 <xTaskRemoveFromEventList+0x8e> lw	s0,24(sp)
1c001d64 <xTaskRemoveFromEventList+0x90> addi	sp,sp,32
1c001d66 <xTaskRemoveFromEventList+0x92> ret
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3183
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1c001d68 <xTaskRemoveFromEventList+0x94> addi	a0,gp,-1736 # 1c008d14 <xPendingReadyList>
1c001d6c <xTaskRemoveFromEventList+0x98> j	1c001d46 <xTaskRemoveFromEventList+0x72>
vTaskInternalSetTimeOutState():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3269
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1c001d6e <vTaskInternalSetTimeOutState> lw	a5,-644(gp) # 1c009158 <xNumOfOverflows>
1c001d72 <vTaskInternalSetTimeOutState+0x4> sw	a5,0(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3270
	pxTimeOut->xTimeOnEntering = xTickCount;
1c001d74 <vTaskInternalSetTimeOutState+0x6> lw	a5,-632(gp) # 1c009164 <xTickCount>
1c001d78 <vTaskInternalSetTimeOutState+0xa> sw	a5,4(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3271
}
1c001d7a <vTaskInternalSetTimeOutState+0xc> ret
vTaskMissedYield():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3339
	xYieldPending = pdTRUE;
1c001d7c <vTaskMissedYield> li	a4,1
1c001d7e <vTaskMissedYield+0x2> sw	a4,-628(gp) # 1c009168 <xYieldPending>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3340
}
1c001d82 <vTaskMissedYield+0x6> ret
xTaskGetSchedulerState():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3990
		if( xSchedulerRunning == pdFALSE )
1c001d84 <xTaskGetSchedulerState> lw	a5,-636(gp) # 1c009160 <xSchedulerRunning>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3992
			xReturn = taskSCHEDULER_NOT_STARTED;
1c001d88 <xTaskGetSchedulerState+0x4> li	a0,1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3990
		if( xSchedulerRunning == pdFALSE )
1c001d8a <xTaskGetSchedulerState+0x6> beqz	a5,1c001d96 <xTaskGetSchedulerState+0x12>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3996
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1c001d8c <xTaskGetSchedulerState+0x8> lw	a0,-664(gp) # 1c009144 <uxSchedulerSuspended>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4002
				xReturn = taskSCHEDULER_SUSPENDED;
1c001d90 <xTaskGetSchedulerState+0xc> seqz	a0,a0
1c001d94 <xTaskGetSchedulerState+0x10> slli	a0,a0,0x1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4007
	}
1c001d96 <xTaskGetSchedulerState+0x12> ret
xTaskPriorityInherit():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4022
		if( pxMutexHolder != NULL )
1c001d98 <xTaskPriorityInherit> beqz	a0,1c001e48 <xTaskPriorityInherit+0xb0>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4015
	{
1c001d9a <xTaskPriorityInherit+0x2> addi	sp,sp,-32
1c001d9c <xTaskPriorityInherit+0x4> sw	s1,20(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4027
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
1c001d9e <xTaskPriorityInherit+0x6> addi	a4,gp,-684 # 1c009130 <pxCurrentTCB>
1c001da2 <xTaskPriorityInherit+0xa> lw	a3,0(a4)
1c001da4 <xTaskPriorityInherit+0xc> lw	a5,44(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4015
	{
1c001da6 <xTaskPriorityInherit+0xe> sw	s0,24(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4027
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
1c001da8 <xTaskPriorityInherit+0x10> lw	a3,44(a3)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4015
	{
1c001daa <xTaskPriorityInherit+0x12> sw	ra,28(sp)
1c001dac <xTaskPriorityInherit+0x14> sw	s2,16(sp)
1c001dae <xTaskPriorityInherit+0x16> mv	s0,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4027
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
1c001db0 <xTaskPriorityInherit+0x18> addi	s1,gp,-684 # 1c009130 <pxCurrentTCB>
1c001db4 <xTaskPriorityInherit+0x1c> bgeu	a5,a3,1c001e3c <xTaskPriorityInherit+0xa4>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4032
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1c001db8 <xTaskPriorityInherit+0x20> lw	a4,24(a0)
1c001dba <xTaskPriorityInherit+0x22> bltz	a4,1c001dc8 <xTaskPriorityInherit+0x30>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4034
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1c001dbe <xTaskPriorityInherit+0x26> lw	a4,0(s1)
1c001dc0 <xTaskPriorityInherit+0x28> lw	a3,44(a4)
1c001dc2 <xTaskPriorityInherit+0x2a> li	a4,5
1c001dc4 <xTaskPriorityInherit+0x2c> sub	a4,a4,a3
1c001dc6 <xTaskPriorityInherit+0x2e> sw	a4,24(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4043
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
1c001dc8 <xTaskPriorityInherit+0x30> li	a3,20
1c001dca <xTaskPriorityInherit+0x32> mul	a5,a5,a3
1c001dce <xTaskPriorityInherit+0x36> lui	a0,0x1c009
1c001dd2 <xTaskPriorityInherit+0x3a> addi	a4,a0,-888 # 1c008c88 <pxReadyTasksLists>
1c001dd6 <xTaskPriorityInherit+0x3e> addi	s2,a0,-888
1c001dda <xTaskPriorityInherit+0x42> add	a5,a5,a4
1c001ddc <xTaskPriorityInherit+0x44> lw	a4,20(s0)
1c001dde <xTaskPriorityInherit+0x46> bne	a4,a5,1c001e34 <xTaskPriorityInherit+0x9c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4045
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1c001de2 <xTaskPriorityInherit+0x4a> addi	a1,s0,4
1c001de6 <xTaskPriorityInherit+0x4e> mv	a0,a1
1c001de8 <xTaskPriorityInherit+0x50> sw	a1,12(sp)
1c001dea <xTaskPriorityInherit+0x52> jal	ra,1c000f26 <uxListRemove>
1c001dee <xTaskPriorityInherit+0x56> lw	a1,12(sp)
1c001df0 <xTaskPriorityInherit+0x58> addi	a4,gp,-656 # 1c00914c <uxTopReadyPriority>
1c001df4 <xTaskPriorityInherit+0x5c> bnez	a0,1c001e08 <xTaskPriorityInherit+0x70>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4050
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
1c001df6 <xTaskPriorityInherit+0x5e> lw	a2,44(s0)
1c001df8 <xTaskPriorityInherit+0x60> lw	a3,0(a4)
1c001dfa <xTaskPriorityInherit+0x62> li	a5,1
1c001dfc <xTaskPriorityInherit+0x64> sll	a5,a5,a2
1c001e00 <xTaskPriorityInherit+0x68> not	a5,a5
1c001e04 <xTaskPriorityInherit+0x6c> and	a5,a5,a3
1c001e06 <xTaskPriorityInherit+0x6e> sw	a5,0(a4)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4058
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1c001e08 <xTaskPriorityInherit+0x70> lw	a5,0(s1)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4059
					prvAddTaskToReadyList( pxMutexHolderTCB );
1c001e0a <xTaskPriorityInherit+0x72> lw	a3,0(a4)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4058
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1c001e0c <xTaskPriorityInherit+0x74> lw	a0,44(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4059
					prvAddTaskToReadyList( pxMutexHolderTCB );
1c001e0e <xTaskPriorityInherit+0x76> li	a5,1
1c001e10 <xTaskPriorityInherit+0x78> sll	a5,a5,a0
1c001e14 <xTaskPriorityInherit+0x7c> or	a5,a5,a3
1c001e16 <xTaskPriorityInherit+0x7e> sw	a5,0(a4)
1c001e18 <xTaskPriorityInherit+0x80> li	a5,20
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4058
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1c001e1a <xTaskPriorityInherit+0x82> sw	a0,44(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4059
					prvAddTaskToReadyList( pxMutexHolderTCB );
1c001e1c <xTaskPriorityInherit+0x84> mul	a0,a0,a5
1c001e20 <xTaskPriorityInherit+0x88> add	a0,a0,s2
1c001e22 <xTaskPriorityInherit+0x8a> jal	ra,1c000ee0 <vListInsertEnd>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4070
				xReturn = pdTRUE;
1c001e26 <xTaskPriorityInherit+0x8e> li	a0,1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4097
	}
1c001e28 <xTaskPriorityInherit+0x90> lw	ra,28(sp)
1c001e2a <xTaskPriorityInherit+0x92> lw	s0,24(sp)
1c001e2c <xTaskPriorityInherit+0x94> lw	s1,20(sp)
1c001e2e <xTaskPriorityInherit+0x96> lw	s2,16(sp)
1c001e30 <xTaskPriorityInherit+0x98> addi	sp,sp,32
1c001e32 <xTaskPriorityInherit+0x9a> ret
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4064
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1c001e34 <xTaskPriorityInherit+0x9c> lw	a5,0(s1)
1c001e36 <xTaskPriorityInherit+0x9e> lw	a5,44(a5)
1c001e38 <xTaskPriorityInherit+0xa0> sw	a5,44(s0)
1c001e3a <xTaskPriorityInherit+0xa2> j	1c001e26 <xTaskPriorityInherit+0x8e>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4074
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
1c001e3c <xTaskPriorityInherit+0xa4> lw	a5,0(a4)
1c001e3e <xTaskPriorityInherit+0xa6> lw	a0,80(a0)
1c001e40 <xTaskPriorityInherit+0xa8> lw	a5,44(a5)
1c001e42 <xTaskPriorityInherit+0xaa> sltu	a0,a0,a5
1c001e46 <xTaskPriorityInherit+0xae> j	1c001e28 <xTaskPriorityInherit+0x90>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4017
	BaseType_t xReturn = pdFALSE;
1c001e48 <xTaskPriorityInherit+0xb0> li	a0,0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4097
	}
1c001e4a <xTaskPriorityInherit+0xb2> ret
xTaskPriorityDisinherit():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4109
		if( pxMutexHolder != NULL )
1c001e4c <xTaskPriorityDisinherit> bnez	a0,1c001e5c <xTaskPriorityDisinherit+0x10>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4107
	BaseType_t xReturn = pdFALSE;
1c001e4e <xTaskPriorityDisinherit+0x2> li	a0,0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4177
	}
1c001e50 <xTaskPriorityDisinherit+0x4> ret
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4107
	BaseType_t xReturn = pdFALSE;
1c001e52 <xTaskPriorityDisinherit+0x6> li	a0,0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4177
	}
1c001e54 <xTaskPriorityDisinherit+0x8> lw	ra,28(sp)
1c001e56 <xTaskPriorityDisinherit+0xa> lw	s0,24(sp)
1c001e58 <xTaskPriorityDisinherit+0xc> addi	sp,sp,32
1c001e5a <xTaskPriorityDisinherit+0xe> ret
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4115
			configASSERT( pxTCB == pxCurrentTCB );
1c001e5c <xTaskPriorityDisinherit+0x10> lw	a5,-684(gp) # 1c009130 <pxCurrentTCB>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4105
	{
1c001e60 <xTaskPriorityDisinherit+0x14> addi	sp,sp,-32
1c001e62 <xTaskPriorityDisinherit+0x16> sw	s0,24(sp)
1c001e64 <xTaskPriorityDisinherit+0x18> sw	ra,28(sp)
1c001e66 <xTaskPriorityDisinherit+0x1a> mv	s0,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4115
			configASSERT( pxTCB == pxCurrentTCB );
1c001e68 <xTaskPriorityDisinherit+0x1c> beq	a5,a0,1c001e8c <xTaskPriorityDisinherit+0x40>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4115 (discriminator 1)
1c001e6c <xTaskPriorityDisinherit+0x20> lui	a3,0x1c008
1c001e70 <xTaskPriorityDisinherit+0x24> lui	a2,0x1c008
1c001e74 <xTaskPriorityDisinherit+0x28> lui	a1,0x1
1c001e76 <xTaskPriorityDisinherit+0x2a> lui	a0,0x1c008
1c001e7a <xTaskPriorityDisinherit+0x2e> addi	a3,a3,1288 # 1c008508 <__func__.9+0x13c>
1c001e7e <xTaskPriorityDisinherit+0x32> addi	a2,a2,1576 # 1c008628 <__func__.4>
1c001e82 <xTaskPriorityDisinherit+0x36> addi	a1,a1,19
1c001e84 <xTaskPriorityDisinherit+0x38> addi	a0,a0,1000 # 1c0083e8 <__func__.9+0x1c>
1c001e88 <xTaskPriorityDisinherit+0x3c> jal	ra,1c0037c8 <__assert_func>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4116
			configASSERT( pxTCB->uxMutexesHeld );
1c001e8c <xTaskPriorityDisinherit+0x40> lw	a5,84(a5)
1c001e8e <xTaskPriorityDisinherit+0x42> bnez	a5,1c001eb0 <xTaskPriorityDisinherit+0x64>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4116 (discriminator 1)
1c001e90 <xTaskPriorityDisinherit+0x44> lui	a3,0x1c008
1c001e94 <xTaskPriorityDisinherit+0x48> lui	a2,0x1c008
1c001e98 <xTaskPriorityDisinherit+0x4c> lui	a1,0x1
1c001e9a <xTaskPriorityDisinherit+0x4e> lui	a0,0x1c008
1c001e9e <xTaskPriorityDisinherit+0x52> addi	a3,a3,1312 # 1c008520 <__func__.9+0x154>
1c001ea2 <xTaskPriorityDisinherit+0x56> addi	a2,a2,1576 # 1c008628 <__func__.4>
1c001ea6 <xTaskPriorityDisinherit+0x5a> addi	a1,a1,20
1c001ea8 <xTaskPriorityDisinherit+0x5c> addi	a0,a0,1000 # 1c0083e8 <__func__.9+0x1c>
1c001eac <xTaskPriorityDisinherit+0x60> jal	ra,1c0037c8 <__assert_func>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4121
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1c001eb0 <xTaskPriorityDisinherit+0x64> lw	a3,44(a0)
1c001eb2 <xTaskPriorityDisinherit+0x66> lw	a4,80(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4117
			( pxTCB->uxMutexesHeld )--;
1c001eb4 <xTaskPriorityDisinherit+0x68> addi	a5,a5,-1
1c001eb6 <xTaskPriorityDisinherit+0x6a> sw	a5,84(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4121
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1c001eb8 <xTaskPriorityDisinherit+0x6c> beq	a3,a4,1c001e52 <xTaskPriorityDisinherit+0x6>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4124
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1c001ebc <xTaskPriorityDisinherit+0x70> bnez	a5,1c001e52 <xTaskPriorityDisinherit+0x6>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4131
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1c001ebe <xTaskPriorityDisinherit+0x72> addi	a1,a0,4
1c001ec2 <xTaskPriorityDisinherit+0x76> mv	a0,a1
1c001ec4 <xTaskPriorityDisinherit+0x78> sw	a1,12(sp)
1c001ec6 <xTaskPriorityDisinherit+0x7a> jal	ra,1c000f26 <uxListRemove>
1c001eca <xTaskPriorityDisinherit+0x7e> lui	a2,0x1c009
1c001ece <xTaskPriorityDisinherit+0x82> lw	a1,12(sp)
1c001ed0 <xTaskPriorityDisinherit+0x84> addi	a2,a2,-888 # 1c008c88 <pxReadyTasksLists>
1c001ed4 <xTaskPriorityDisinherit+0x88> addi	a4,gp,-656 # 1c00914c <uxTopReadyPriority>
1c001ed8 <xTaskPriorityDisinherit+0x8c> bnez	a0,1c001ef8 <xTaskPriorityDisinherit+0xac>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4133
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1c001eda <xTaskPriorityDisinherit+0x8e> lw	a0,44(s0)
1c001edc <xTaskPriorityDisinherit+0x90> li	a3,20
1c001ede <xTaskPriorityDisinherit+0x92> mul	a3,a0,a3
1c001ee2 <xTaskPriorityDisinherit+0x96> add	a3,a3,a2
1c001ee4 <xTaskPriorityDisinherit+0x98> lw	a5,0(a3)
1c001ee6 <xTaskPriorityDisinherit+0x9a> bnez	a5,1c001ef8 <xTaskPriorityDisinherit+0xac>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4133 (discriminator 1)
1c001ee8 <xTaskPriorityDisinherit+0x9c> lw	a3,0(a4)
1c001eea <xTaskPriorityDisinherit+0x9e> li	a5,1
1c001eec <xTaskPriorityDisinherit+0xa0> sll	a5,a5,a0
1c001ef0 <xTaskPriorityDisinherit+0xa4> not	a5,a5
1c001ef4 <xTaskPriorityDisinherit+0xa8> and	a5,a5,a3
1c001ef6 <xTaskPriorityDisinherit+0xaa> sw	a5,0(a4)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4143
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1c001ef8 <xTaskPriorityDisinherit+0xac> lw	a5,80(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4148
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1c001efa <xTaskPriorityDisinherit+0xae> li	a3,5
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4149
					prvAddTaskToReadyList( pxTCB );
1c001efc <xTaskPriorityDisinherit+0xb0> lw	a0,0(a4)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4148
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1c001efe <xTaskPriorityDisinherit+0xb2> sub	a3,a3,a5
1c001f00 <xTaskPriorityDisinherit+0xb4> sw	a3,24(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4149
					prvAddTaskToReadyList( pxTCB );
1c001f02 <xTaskPriorityDisinherit+0xb6> li	a3,1
1c001f04 <xTaskPriorityDisinherit+0xb8> sll	a3,a3,a5
1c001f08 <xTaskPriorityDisinherit+0xbc> or	a3,a3,a0
1c001f0a <xTaskPriorityDisinherit+0xbe> li	a0,20
1c001f0c <xTaskPriorityDisinherit+0xc0> mul	a0,a5,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4143
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1c001f10 <xTaskPriorityDisinherit+0xc4> sw	a5,44(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4149
					prvAddTaskToReadyList( pxTCB );
1c001f12 <xTaskPriorityDisinherit+0xc6> sw	a3,0(a4)
1c001f14 <xTaskPriorityDisinherit+0xc8> add	a0,a0,a2
1c001f16 <xTaskPriorityDisinherit+0xca> jal	ra,1c000ee0 <vListInsertEnd>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4159
					xReturn = pdTRUE;
1c001f1a <xTaskPriorityDisinherit+0xce> li	a0,1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4176
		return xReturn;
1c001f1c <xTaskPriorityDisinherit+0xd0> j	1c001e54 <xTaskPriorityDisinherit+0x8>
vTaskPriorityDisinheritAfterTimeout():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4190
		if( pxMutexHolder != NULL )
1c001f1e <vTaskPriorityDisinheritAfterTimeout> beqz	a0,1c00200a <vTaskPriorityDisinheritAfterTimeout+0xec>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4194
			configASSERT( pxTCB->uxMutexesHeld );
1c001f22 <vTaskPriorityDisinheritAfterTimeout+0x4> lw	a3,84(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4185
	{
1c001f24 <vTaskPriorityDisinheritAfterTimeout+0x6> addi	sp,sp,-32
1c001f26 <vTaskPriorityDisinheritAfterTimeout+0x8> sw	s0,24(sp)
1c001f28 <vTaskPriorityDisinheritAfterTimeout+0xa> sw	ra,28(sp)
1c001f2a <vTaskPriorityDisinheritAfterTimeout+0xc> sw	s1,20(sp)
1c001f2c <vTaskPriorityDisinheritAfterTimeout+0xe> mv	s0,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4194
			configASSERT( pxTCB->uxMutexesHeld );
1c001f2e <vTaskPriorityDisinheritAfterTimeout+0x10> bnez	a3,1c001f52 <vTaskPriorityDisinheritAfterTimeout+0x34>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4194 (discriminator 1)
1c001f30 <vTaskPriorityDisinheritAfterTimeout+0x12> lui	a3,0x1c008
1c001f34 <vTaskPriorityDisinheritAfterTimeout+0x16> lui	a2,0x1c008
1c001f38 <vTaskPriorityDisinheritAfterTimeout+0x1a> lui	a1,0x1
1c001f3a <vTaskPriorityDisinheritAfterTimeout+0x1c> lui	a0,0x1c008
1c001f3e <vTaskPriorityDisinheritAfterTimeout+0x20> addi	a3,a3,1312 # 1c008520 <__func__.9+0x154>
1c001f42 <vTaskPriorityDisinheritAfterTimeout+0x24> addi	a2,a2,1540 # 1c008604 <__func__.3>
1c001f46 <vTaskPriorityDisinheritAfterTimeout+0x28> addi	a1,a1,98 # 00001062 <__stack_size+0x862>
1c001f4a <vTaskPriorityDisinheritAfterTimeout+0x2c> addi	a0,a0,1000 # 1c0083e8 <__func__.9+0x1c>
1c001f4e <vTaskPriorityDisinheritAfterTimeout+0x30> jal	ra,1c0037c8 <__assert_func>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4200
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
1c001f52 <vTaskPriorityDisinheritAfterTimeout+0x34> lw	a5,80(a0)
1c001f54 <vTaskPriorityDisinheritAfterTimeout+0x36> bgeu	a5,a1,1c001f5a <vTaskPriorityDisinheritAfterTimeout+0x3c>
1c001f58 <vTaskPriorityDisinheritAfterTimeout+0x3a> mv	a5,a1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4210
			if( pxTCB->uxPriority != uxPriorityToUse )
1c001f5a <vTaskPriorityDisinheritAfterTimeout+0x3c> lw	a4,44(s0)
1c001f5c <vTaskPriorityDisinheritAfterTimeout+0x3e> beq	a4,a5,1c002000 <vTaskPriorityDisinheritAfterTimeout+0xe2>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4216
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
1c001f60 <vTaskPriorityDisinheritAfterTimeout+0x42> li	a2,1
1c001f62 <vTaskPriorityDisinheritAfterTimeout+0x44> bne	a3,a2,1c002000 <vTaskPriorityDisinheritAfterTimeout+0xe2>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4221
					configASSERT( pxTCB != pxCurrentTCB );
1c001f66 <vTaskPriorityDisinheritAfterTimeout+0x48> lw	a3,-684(gp) # 1c009130 <pxCurrentTCB>
1c001f6a <vTaskPriorityDisinheritAfterTimeout+0x4c> bne	a3,s0,1c001f90 <vTaskPriorityDisinheritAfterTimeout+0x72>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4221 (discriminator 1)
1c001f6e <vTaskPriorityDisinheritAfterTimeout+0x50> lui	a3,0x1c008
1c001f72 <vTaskPriorityDisinheritAfterTimeout+0x54> lui	a2,0x1c008
1c001f76 <vTaskPriorityDisinheritAfterTimeout+0x58> lui	a1,0x1
1c001f78 <vTaskPriorityDisinheritAfterTimeout+0x5a> lui	a0,0x1c008
1c001f7c <vTaskPriorityDisinheritAfterTimeout+0x5e> addi	a3,a3,1336 # 1c008538 <__func__.9+0x16c>
1c001f80 <vTaskPriorityDisinheritAfterTimeout+0x62> addi	a2,a2,1540 # 1c008604 <__func__.3>
1c001f84 <vTaskPriorityDisinheritAfterTimeout+0x66> addi	a1,a1,125 # 0000107d <__stack_size+0x87d>
1c001f88 <vTaskPriorityDisinheritAfterTimeout+0x6a> addi	a0,a0,1000 # 1c0083e8 <__func__.9+0x1c>
1c001f8c <vTaskPriorityDisinheritAfterTimeout+0x6e> jal	ra,1c0037c8 <__assert_func>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4232
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1c001f90 <vTaskPriorityDisinheritAfterTimeout+0x72> lw	a3,24(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4228
					pxTCB->uxPriority = uxPriorityToUse;
1c001f92 <vTaskPriorityDisinheritAfterTimeout+0x74> sw	a5,44(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4232
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1c001f94 <vTaskPriorityDisinheritAfterTimeout+0x76> bltz	a3,1c001fa0 <vTaskPriorityDisinheritAfterTimeout+0x82>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4234
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1c001f98 <vTaskPriorityDisinheritAfterTimeout+0x7a> li	a3,5
1c001f9a <vTaskPriorityDisinheritAfterTimeout+0x7c> sub	a5,a3,a5
1c001f9e <vTaskPriorityDisinheritAfterTimeout+0x80> sw	a5,24(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4247
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
1c001fa0 <vTaskPriorityDisinheritAfterTimeout+0x82> li	a3,20
1c001fa2 <vTaskPriorityDisinheritAfterTimeout+0x84> mul	a4,a4,a3
1c001fa6 <vTaskPriorityDisinheritAfterTimeout+0x88> lui	a0,0x1c009
1c001faa <vTaskPriorityDisinheritAfterTimeout+0x8c> addi	a5,a0,-888 # 1c008c88 <pxReadyTasksLists>
1c001fae <vTaskPriorityDisinheritAfterTimeout+0x90> addi	s1,a0,-888
1c001fb2 <vTaskPriorityDisinheritAfterTimeout+0x94> add	a4,a4,a5
1c001fb4 <vTaskPriorityDisinheritAfterTimeout+0x96> lw	a5,20(s0)
1c001fb6 <vTaskPriorityDisinheritAfterTimeout+0x98> bne	a5,a4,1c002000 <vTaskPriorityDisinheritAfterTimeout+0xe2>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4249
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1c001fba <vTaskPriorityDisinheritAfterTimeout+0x9c> addi	a1,s0,4
1c001fbe <vTaskPriorityDisinheritAfterTimeout+0xa0> mv	a0,a1
1c001fc0 <vTaskPriorityDisinheritAfterTimeout+0xa2> sw	a1,12(sp)
1c001fc2 <vTaskPriorityDisinheritAfterTimeout+0xa4> jal	ra,1c000f26 <uxListRemove>
1c001fc6 <vTaskPriorityDisinheritAfterTimeout+0xa8> lw	a3,44(s0)
1c001fc8 <vTaskPriorityDisinheritAfterTimeout+0xaa> lw	a1,12(sp)
1c001fca <vTaskPriorityDisinheritAfterTimeout+0xac> addi	a4,gp,-656 # 1c00914c <uxTopReadyPriority>
1c001fce <vTaskPriorityDisinheritAfterTimeout+0xb0> bnez	a0,1c001fe0 <vTaskPriorityDisinheritAfterTimeout+0xc2>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4254
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
1c001fd0 <vTaskPriorityDisinheritAfterTimeout+0xb2> lw	a2,0(a4)
1c001fd2 <vTaskPriorityDisinheritAfterTimeout+0xb4> li	a5,1
1c001fd4 <vTaskPriorityDisinheritAfterTimeout+0xb6> sll	a5,a5,a3
1c001fd8 <vTaskPriorityDisinheritAfterTimeout+0xba> not	a5,a5
1c001fdc <vTaskPriorityDisinheritAfterTimeout+0xbe> and	a5,a5,a2
1c001fde <vTaskPriorityDisinheritAfterTimeout+0xc0> sw	a5,0(a4)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4261
						prvAddTaskToReadyList( pxTCB );
1c001fe0 <vTaskPriorityDisinheritAfterTimeout+0xc2> li	a0,20
1c001fe2 <vTaskPriorityDisinheritAfterTimeout+0xc4> mul	a0,a3,a0
1c001fe6 <vTaskPriorityDisinheritAfterTimeout+0xc8> lw	a2,0(a4)
1c001fe8 <vTaskPriorityDisinheritAfterTimeout+0xca> li	a5,1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4282
	}
1c001fea <vTaskPriorityDisinheritAfterTimeout+0xcc> lw	s0,24(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4261
						prvAddTaskToReadyList( pxTCB );
1c001fec <vTaskPriorityDisinheritAfterTimeout+0xce> sll	a5,a5,a3
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4282
	}
1c001ff0 <vTaskPriorityDisinheritAfterTimeout+0xd2> lw	ra,28(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4261
						prvAddTaskToReadyList( pxTCB );
1c001ff2 <vTaskPriorityDisinheritAfterTimeout+0xd4> or	a5,a5,a2
1c001ff4 <vTaskPriorityDisinheritAfterTimeout+0xd6> sw	a5,0(a4)
1c001ff6 <vTaskPriorityDisinheritAfterTimeout+0xd8> add	a0,a0,s1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4282
	}
1c001ff8 <vTaskPriorityDisinheritAfterTimeout+0xda> lw	s1,20(sp)
1c001ffa <vTaskPriorityDisinheritAfterTimeout+0xdc> addi	sp,sp,32
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4261
						prvAddTaskToReadyList( pxTCB );
1c001ffc <vTaskPriorityDisinheritAfterTimeout+0xde> j	1c000ee0 <vListInsertEnd>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4282
	}
1c002000 <vTaskPriorityDisinheritAfterTimeout+0xe2> lw	ra,28(sp)
1c002002 <vTaskPriorityDisinheritAfterTimeout+0xe4> lw	s0,24(sp)
1c002004 <vTaskPriorityDisinheritAfterTimeout+0xe6> lw	s1,20(sp)
1c002006 <vTaskPriorityDisinheritAfterTimeout+0xe8> addi	sp,sp,32
1c002008 <vTaskPriorityDisinheritAfterTimeout+0xea> ret
1c00200a <vTaskPriorityDisinheritAfterTimeout+0xec> ret
vTaskEnterCritical():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4291
		portDISABLE_INTERRUPTS();
1c00200c <vTaskEnterCritical> csrci	mstatus,8
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4293
		if( xSchedulerRunning != pdFALSE )
1c002010 <vTaskEnterCritical+0x4> lw	a5,-636(gp) # 1c009160 <xSchedulerRunning>
1c002014 <vTaskEnterCritical+0x8> beqz	a5,1c002024 <vTaskEnterCritical+0x18>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4295
			( pxCurrentTCB->uxCriticalNesting )++;
1c002016 <vTaskEnterCritical+0xa> addi	a5,gp,-684 # 1c009130 <pxCurrentTCB>
1c00201a <vTaskEnterCritical+0xe> lw	a3,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4303
			if( pxCurrentTCB->uxCriticalNesting == 1 )
1c00201c <vTaskEnterCritical+0x10> lw	a5,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4295
			( pxCurrentTCB->uxCriticalNesting )++;
1c00201e <vTaskEnterCritical+0x12> lw	a4,68(a3)
1c002020 <vTaskEnterCritical+0x14> addi	a4,a4,1
1c002022 <vTaskEnterCritical+0x16> sw	a4,68(a3)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4312
	}
1c002024 <vTaskEnterCritical+0x18> ret
vTaskExitCritical():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4321
		if( xSchedulerRunning != pdFALSE )
1c002026 <vTaskExitCritical> lw	a5,-636(gp) # 1c009160 <xSchedulerRunning>
1c00202a <vTaskExitCritical+0x4> beqz	a5,1c002048 <vTaskExitCritical+0x22>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4323
			if( pxCurrentTCB->uxCriticalNesting > 0U )
1c00202c <vTaskExitCritical+0x6> addi	a5,gp,-684 # 1c009130 <pxCurrentTCB>
1c002030 <vTaskExitCritical+0xa> lw	a4,0(a5)
1c002032 <vTaskExitCritical+0xc> lw	a4,68(a4)
1c002034 <vTaskExitCritical+0xe> beqz	a4,1c002048 <vTaskExitCritical+0x22>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4325
				( pxCurrentTCB->uxCriticalNesting )--;
1c002036 <vTaskExitCritical+0x10> lw	a3,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4327
				if( pxCurrentTCB->uxCriticalNesting == 0U )
1c002038 <vTaskExitCritical+0x12> lw	a5,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4325
				( pxCurrentTCB->uxCriticalNesting )--;
1c00203a <vTaskExitCritical+0x14> lw	a4,68(a3)
1c00203c <vTaskExitCritical+0x16> addi	a4,a4,-1
1c00203e <vTaskExitCritical+0x18> sw	a4,68(a3)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4327
				if( pxCurrentTCB->uxCriticalNesting == 0U )
1c002040 <vTaskExitCritical+0x1a> lw	a5,68(a5)
1c002042 <vTaskExitCritical+0x1c> bnez	a5,1c002048 <vTaskExitCritical+0x22>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4329
					portENABLE_INTERRUPTS();
1c002044 <vTaskExitCritical+0x1e> csrsi	mstatus,8
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4345
	}
1c002048 <vTaskExitCritical+0x22> ret
xTaskCreate():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:739
	{
1c00204a <xTaskCreate> addi	sp,sp,-48
1c00204c <xTaskCreate+0x2> sw	s3,28(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:773
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
1c00204e <xTaskCreate+0x4> slli	s3,a2,0x2
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:739
	{
1c002052 <xTaskCreate+0x8> sw	s6,16(sp)
1c002054 <xTaskCreate+0xa> mv	s6,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:773
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
1c002056 <xTaskCreate+0xc> mv	a0,s3
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:739
	{
1c002058 <xTaskCreate+0xe> sw	s1,36(sp)
1c00205a <xTaskCreate+0x10> sw	s2,32(sp)
1c00205c <xTaskCreate+0x12> sw	s5,20(sp)
1c00205e <xTaskCreate+0x14> sw	s7,12(sp)
1c002060 <xTaskCreate+0x16> sw	ra,44(sp)
1c002062 <xTaskCreate+0x18> sw	s0,40(sp)
1c002064 <xTaskCreate+0x1a> sw	s4,24(sp)
1c002066 <xTaskCreate+0x1c> sw	s8,8(sp)
1c002068 <xTaskCreate+0x1e> mv	s1,a1
1c00206a <xTaskCreate+0x20> mv	s7,a3
1c00206c <xTaskCreate+0x22> mv	s2,a4
1c00206e <xTaskCreate+0x24> mv	s5,a5
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:773
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
1c002070 <xTaskCreate+0x26> jal	ra,1c00296a <pvPortMalloc>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:775
			if( pxStack != NULL )
1c002074 <xTaskCreate+0x2a> beqz	a0,1c0020a6 <xTaskCreate+0x5c>
1c002076 <xTaskCreate+0x2c> mv	s4,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:778
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
1c002078 <xTaskCreate+0x2e> li	a0,1160
1c00207c <xTaskCreate+0x32> jal	ra,1c00296a <pvPortMalloc>
1c002080 <xTaskCreate+0x36> mv	s0,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:780
				if( pxNewTCB != NULL )
1c002082 <xTaskCreate+0x38> beqz	a0,1c0020a0 <xTaskCreate+0x56>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:783
					pxNewTCB->pxStack = pxStack;
1c002084 <xTaskCreate+0x3a> sw	s4,48(a0)
prvInitialiseNewTask():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:854
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1c002088 <xTaskCreate+0x3e> mv	a2,s3
1c00208a <xTaskCreate+0x40> li	a1,165
1c00208e <xTaskCreate+0x44> mv	a0,s4
1c002090 <xTaskCreate+0x46> jal	ra,1c000e7a <memset>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:864
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
1c002094 <xTaskCreate+0x4a> lw	s8,48(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:892
	if( pcName != NULL )
1c002098 <xTaskCreate+0x4e> bnez	s1,1c0020aa <xTaskCreate+0x60>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:919
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
1c00209a <xTaskCreate+0x50> sb	zero,52(s0)
1c00209e <xTaskCreate+0x54> j	1c0020ca <xTaskCreate+0x80>
xTaskCreate():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:789
					vPortFree( pxStack );
1c0020a0 <xTaskCreate+0x56> mv	a0,s4
1c0020a2 <xTaskCreate+0x58> jal	ra,1c002992 <vPortFree>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:815
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1c0020a6 <xTaskCreate+0x5c> li	a0,-1
1c0020a8 <xTaskCreate+0x5e> j	1c00223a <xTaskCreate+0x1f0>
1c0020aa <xTaskCreate+0x60> mv	a1,s1
1c0020ac <xTaskCreate+0x62> addi	a5,s0,52
1c0020b0 <xTaskCreate+0x66> addi	a3,s1,16
prvInitialiseNewTask():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:896
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1c0020b4 <xTaskCreate+0x6a> lb	a4,0(a1)
1c0020b8 <xTaskCreate+0x6e> sb	a4,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:901
			if( pcName[ x ] == ( char ) 0x00 )
1c0020bc <xTaskCreate+0x72> beqz	a4,1c0020c6 <xTaskCreate+0x7c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:894
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1c0020be <xTaskCreate+0x74> addi	a1,a1,1
1c0020c0 <xTaskCreate+0x76> addi	a5,a5,1
1c0020c2 <xTaskCreate+0x78> bne	a1,a3,1c0020b4 <xTaskCreate+0x6a>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:913
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1c0020c6 <xTaskCreate+0x7c> sb	zero,67(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:924
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1c0020ca <xTaskCreate+0x80> li	a5,4
1c0020cc <xTaskCreate+0x82> bgeu	a5,s2,1c0020d2 <xTaskCreate+0x88>
1c0020d0 <xTaskCreate+0x86> li	s2,4
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:941
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1c0020d2 <xTaskCreate+0x88> addi	s4,s0,4
1c0020d6 <xTaskCreate+0x8c> mv	a0,s4
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:933
	pxNewTCB->uxPriority = uxPriority;
1c0020d8 <xTaskCreate+0x8e> sw	s2,44(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:936
		pxNewTCB->uxBasePriority = uxPriority;
1c0020dc <xTaskCreate+0x92> sw	s2,80(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:937
		pxNewTCB->uxMutexesHeld = 0;
1c0020e0 <xTaskCreate+0x96> sw	zero,84(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:941
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1c0020e4 <xTaskCreate+0x9a> jal	ra,1c000eda <vListInitialiseItem>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:942
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1c0020e8 <xTaskCreate+0x9e> addi	a0,s0,24
1c0020ec <xTaskCreate+0xa2> jal	ra,1c000eda <vListInitialiseItem>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:949
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1c0020f0 <xTaskCreate+0xa6> li	a4,5
1c0020f2 <xTaskCreate+0xa8> sub	s1,a4,s2
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:992
		pxNewTCB->ulNotifiedValue = 0;
1c0020f6 <xTaskCreate+0xac> sw	zero,1152(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:1002
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
1c0020fa <xTaskCreate+0xb0> li	a2,1064
1c0020fe <xTaskCreate+0xb4> li	a1,0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:946
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1c002100 <xTaskCreate+0xb6> sw	s0,16(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:949
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1c002102 <xTaskCreate+0xb8> sw	s1,24(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:950
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1c002104 <xTaskCreate+0xba> sw	s0,36(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:954
		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
1c002106 <xTaskCreate+0xbc> sw	zero,68(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:993
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1c00210a <xTaskCreate+0xc0> sb	zero,1156(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:1002
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
1c00210e <xTaskCreate+0xc4> addi	a0,s0,88
1c002112 <xTaskCreate+0xc8> jal	ra,1c000e7a <memset>
1c002116 <xTaskCreate+0xcc> addi	a5,s0,836
1c00211a <xTaskCreate+0xd0> sw	a5,92(s0)
1c00211c <xTaskCreate+0xd2> addi	a5,s0,940
1c002120 <xTaskCreate+0xd6> sw	a5,96(s0)
1c002122 <xTaskCreate+0xd8> li	a4,1
1c002124 <xTaskCreate+0xda> addi	a5,s0,1044
1c002128 <xTaskCreate+0xde> sw	a5,100(s0)
1c00212a <xTaskCreate+0xe0> sw	a4,256(s0)
1c00212e <xTaskCreate+0xe4> li	a5,0
1c002130 <xTaskCreate+0xe6> lui	a4,0xabcd3
1c002134 <xTaskCreate+0xea> sw	a5,260(s0)
1c002138 <xTaskCreate+0xee> addi	a4,a4,782 # abcd330e <__heap_l2_shared_start+0x8fcb993e>
1c00213c <xTaskCreate+0xf2> addi	a5,s0,256
1c002140 <xTaskCreate+0xf6> sw	a4,8(a5)
1c002142 <xTaskCreate+0xf8> lui	a4,0xe66d1
1c002146 <xTaskCreate+0xfc> addi	a4,a4,564 # e66d1234 <__heap_l2_shared_start+0xca6b7864>
1c00214a <xTaskCreate+0x100> sw	a4,12(a5)
1c00214c <xTaskCreate+0x102> lui	a4,0x5e
1c002150 <xTaskCreate+0x106> addi	a4,a4,-276 # 0005deec <__heap_l1_cluster_size+0x4df0c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:864
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
1c002154 <xTaskCreate+0x10a> addi	s3,s3,-4
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:1002
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
1c002156 <xTaskCreate+0x10c> sw	a4,16(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:864
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
1c002158 <xTaskCreate+0x10e> add	s3,s3,s8
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:1002
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
1c00215a <xTaskCreate+0x110> li	a5,11
1c00215c <xTaskCreate+0x112> sh	a5,276(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:1008
		pxNewTCB->ucDelayAborted = pdFALSE;
1c002160 <xTaskCreate+0x116> sb	zero,1157(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:1058
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1c002164 <xTaskCreate+0x11a> mv	a2,s7
1c002166 <xTaskCreate+0x11c> mv	a1,s6
1c002168 <xTaskCreate+0x11e> andi	a0,s3,-16
1c00216c <xTaskCreate+0x122> jal	ra,1c000e00 <pxPortInitialiseStack>
1c002170 <xTaskCreate+0x126> sw	a0,0(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:1064
	if( pxCreatedTask != NULL )
1c002172 <xTaskCreate+0x128> beqz	s5,1c00217a <xTaskCreate+0x130>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:1068
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1c002176 <xTaskCreate+0x12c> sw	s0,0(s5)
prvAddNewTaskToReadyList():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:1081
	taskENTER_CRITICAL();
1c00217a <xTaskCreate+0x130> jal	1c00200c <vTaskEnterCritical>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:1083
		uxCurrentNumberOfTasks++;
1c00217c <xTaskCreate+0x132> addi	a5,gp,-672 # 1c00913c <uxCurrentNumberOfTasks>
1c002180 <xTaskCreate+0x136> lw	a4,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:1084
		if( pxCurrentTCB == NULL )
1c002182 <xTaskCreate+0x138> lui	s1,0x1c009
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:1083
		uxCurrentNumberOfTasks++;
1c002186 <xTaskCreate+0x13c> addi	a4,a4,1
1c002188 <xTaskCreate+0x13e> sw	a4,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:1084
		if( pxCurrentTCB == NULL )
1c00218a <xTaskCreate+0x140> addi	a4,gp,-684 # 1c009130 <pxCurrentTCB>
1c00218e <xTaskCreate+0x144> lw	a4,0(a4)
1c002190 <xTaskCreate+0x146> addi	s2,gp,-684 # 1c009130 <pxCurrentTCB>
1c002194 <xTaskCreate+0x14a> addi	s3,s1,-888 # 1c008c88 <pxReadyTasksLists>
1c002198 <xTaskCreate+0x14e> bnez	a4,1c002252 <xTaskCreate+0x208>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:1088
			pxCurrentTCB = pxNewTCB;
1c00219c <xTaskCreate+0x152> sw	s0,0(s2)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:1090
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1c0021a0 <xTaskCreate+0x156> lw	a4,0(a5)
1c0021a2 <xTaskCreate+0x158> li	a5,1
1c0021a4 <xTaskCreate+0x15a> bne	a4,a5,1c0021f4 <xTaskCreate+0x1aa>
1c0021a8 <xTaskCreate+0x15e> addi	s1,s1,-888
1c0021ac <xTaskCreate+0x162> addi	s5,s3,100
prvInitialiseTaskLists():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3613
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1c0021b0 <xTaskCreate+0x166> mv	a0,s1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3611
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1c0021b2 <xTaskCreate+0x168> addi	s1,s1,20
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3613
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1c0021b4 <xTaskCreate+0x16a> jal	ra,1c000ec6 <vListInitialise>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3611
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1c0021b8 <xTaskCreate+0x16e> bne	s5,s1,1c0021b0 <xTaskCreate+0x166>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3616
	vListInitialise( &xDelayedTaskList1 );
1c0021bc <xTaskCreate+0x172> addi	s5,gp,-1776 # 1c008cec <xDelayedTaskList1>
1c0021c0 <xTaskCreate+0x176> addi	a0,gp,-1776 # 1c008cec <xDelayedTaskList1>
1c0021c4 <xTaskCreate+0x17a> jal	ra,1c000ec6 <vListInitialise>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3617
	vListInitialise( &xDelayedTaskList2 );
1c0021c8 <xTaskCreate+0x17e> addi	s1,gp,-1756 # 1c008d00 <xDelayedTaskList2>
1c0021cc <xTaskCreate+0x182> addi	a0,gp,-1756 # 1c008d00 <xDelayedTaskList2>
1c0021d0 <xTaskCreate+0x186> jal	ra,1c000ec6 <vListInitialise>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3618
	vListInitialise( &xPendingReadyList );
1c0021d4 <xTaskCreate+0x18a> addi	a0,gp,-1736 # 1c008d14 <xPendingReadyList>
1c0021d8 <xTaskCreate+0x18e> jal	ra,1c000ec6 <vListInitialise>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3622
		vListInitialise( &xTasksWaitingTermination );
1c0021dc <xTaskCreate+0x192> addi	a0,gp,-1696 # 1c008d3c <xTasksWaitingTermination>
1c0021e0 <xTaskCreate+0x196> jal	ra,1c000ec6 <vListInitialise>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3628
		vListInitialise( &xSuspendedTaskList );
1c0021e4 <xTaskCreate+0x19a> addi	a0,gp,-1716 # 1c008d28 <xSuspendedTaskList>
1c0021e8 <xTaskCreate+0x19e> jal	ra,1c000ec6 <vListInitialise>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3634
	pxDelayedTaskList = &xDelayedTaskList1;
1c0021ec <xTaskCreate+0x1a2> sw	s5,-680(gp) # 1c009134 <pxDelayedTaskList>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3635
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1c0021f0 <xTaskCreate+0x1a6> sw	s1,-676(gp) # 1c009138 <pxOverflowDelayedTaskList>
prvAddNewTaskToReadyList():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:1124
		uxTaskNumber++;
1c0021f4 <xTaskCreate+0x1aa> addi	a4,gp,-660 # 1c009148 <uxTaskNumber>
1c0021f8 <xTaskCreate+0x1ae> lw	a5,0(a4)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:1134
		prvAddTaskToReadyList( pxNewTCB );
1c0021fa <xTaskCreate+0x1b0> lw	a0,44(s0)
1c0021fc <xTaskCreate+0x1b2> mv	a1,s4
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:1124
		uxTaskNumber++;
1c0021fe <xTaskCreate+0x1b4> addi	a5,a5,1
1c002200 <xTaskCreate+0x1b6> sw	a5,0(a4)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:1134
		prvAddTaskToReadyList( pxNewTCB );
1c002202 <xTaskCreate+0x1b8> addi	a4,gp,-656 # 1c00914c <uxTopReadyPriority>
1c002206 <xTaskCreate+0x1bc> lw	a3,0(a4)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:1129
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1c002208 <xTaskCreate+0x1be> sw	a5,72(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:1134
		prvAddTaskToReadyList( pxNewTCB );
1c00220a <xTaskCreate+0x1c0> li	a5,1
1c00220c <xTaskCreate+0x1c2> sll	a5,a5,a0
1c002210 <xTaskCreate+0x1c6> or	a5,a5,a3
1c002212 <xTaskCreate+0x1c8> sw	a5,0(a4)
1c002214 <xTaskCreate+0x1ca> li	a5,20
1c002216 <xTaskCreate+0x1cc> mul	a0,a0,a5
1c00221a <xTaskCreate+0x1d0> add	a0,a0,s3
1c00221c <xTaskCreate+0x1d2> jal	ra,1c000ee0 <vListInsertEnd>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:1138
	taskEXIT_CRITICAL();
1c002220 <xTaskCreate+0x1d6> jal	1c002026 <vTaskExitCritical>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:1140
	if( xSchedulerRunning != pdFALSE )
1c002222 <xTaskCreate+0x1d8> lw	a5,-636(gp) # 1c009160 <xSchedulerRunning>
xTaskCreate():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:811
			xReturn = pdPASS;
1c002226 <xTaskCreate+0x1dc> li	a0,1
prvAddNewTaskToReadyList():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:1140
	if( xSchedulerRunning != pdFALSE )
1c002228 <xTaskCreate+0x1de> beqz	a5,1c00223a <xTaskCreate+0x1f0>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:1144
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1c00222a <xTaskCreate+0x1e0> lw	a5,0(s2)
1c00222e <xTaskCreate+0x1e4> lw	a4,44(a5)
1c002230 <xTaskCreate+0x1e6> lw	a5,44(s0)
1c002232 <xTaskCreate+0x1e8> bgeu	a4,a5,1c00223a <xTaskCreate+0x1f0>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:1146
			taskYIELD_IF_USING_PREEMPTION();
1c002236 <xTaskCreate+0x1ec> ecall
xTaskCreate():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:819
	}
1c00223a <xTaskCreate+0x1f0> lw	ra,44(sp)
1c00223c <xTaskCreate+0x1f2> lw	s0,40(sp)
1c00223e <xTaskCreate+0x1f4> lw	s1,36(sp)
1c002240 <xTaskCreate+0x1f6> lw	s2,32(sp)
1c002242 <xTaskCreate+0x1f8> lw	s3,28(sp)
1c002244 <xTaskCreate+0x1fa> lw	s4,24(sp)
1c002246 <xTaskCreate+0x1fc> lw	s5,20(sp)
1c002248 <xTaskCreate+0x1fe> lw	s6,16(sp)
1c00224a <xTaskCreate+0x200> lw	s7,12(sp)
1c00224c <xTaskCreate+0x202> lw	s8,8(sp)
1c00224e <xTaskCreate+0x204> addi	sp,sp,48
1c002250 <xTaskCreate+0x206> ret
prvAddNewTaskToReadyList():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:1107
			if( xSchedulerRunning == pdFALSE )
1c002252 <xTaskCreate+0x208> lw	a5,-636(gp) # 1c009160 <xSchedulerRunning>
1c002256 <xTaskCreate+0x20c> bnez	a5,1c0021f4 <xTaskCreate+0x1aa>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:1109
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1c002258 <xTaskCreate+0x20e> lw	a5,0(s2)
1c00225c <xTaskCreate+0x212> lw	a4,44(s0)
1c00225e <xTaskCreate+0x214> lw	a5,44(a5)
1c002260 <xTaskCreate+0x216> bltu	a4,a5,1c0021f4 <xTaskCreate+0x1aa>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:1111
					pxCurrentTCB = pxNewTCB;
1c002264 <xTaskCreate+0x21a> sw	s0,0(s2)
1c002268 <xTaskCreate+0x21e> j	1c0021f4 <xTaskCreate+0x1aa>
vTaskStartScheduler():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2009
		xReturn = xTaskCreate(	prvIdleTask,
1c00226a <vTaskStartScheduler> lui	a1,0x1c008
1c00226e <vTaskStartScheduler+0x4> lui	a0,0x1c002
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:1976
{
1c002272 <vTaskStartScheduler+0x8> addi	sp,sp,-16
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2009
		xReturn = xTaskCreate(	prvIdleTask,
1c002274 <vTaskStartScheduler+0xa> addi	a5,gp,-652 # 1c009150 <xIdleTaskHandle>
1c002278 <vTaskStartScheduler+0xe> li	a4,0
1c00227a <vTaskStartScheduler+0x10> li	a3,0
1c00227c <vTaskStartScheduler+0x12> li	a2,400
1c002280 <vTaskStartScheduler+0x16> addi	a1,a1,1360 # 1c008550 <__func__.9+0x184>
1c002284 <vTaskStartScheduler+0x1a> addi	a0,a0,758 # 1c0022f6 <prvIdleTask>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:1976
{
1c002288 <vTaskStartScheduler+0x1e> sw	s0,8(sp)
1c00228a <vTaskStartScheduler+0x20> sw	ra,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2020
		if( xReturn == pdPASS )
1c00228c <vTaskStartScheduler+0x22> li	s0,1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2009
		xReturn = xTaskCreate(	prvIdleTask,
1c00228e <vTaskStartScheduler+0x24> jal	1c00204a <xTaskCreate>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2020
		if( xReturn == pdPASS )
1c002290 <vTaskStartScheduler+0x26> bne	a0,s0,1c0022c6 <vTaskStartScheduler+0x5c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2022
			xReturn = xTimerCreateTimerTask();
1c002294 <vTaskStartScheduler+0x2a> jal	1c0025c0 <xTimerCreateTimerTask>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2031
	if( xReturn == pdPASS )
1c002296 <vTaskStartScheduler+0x2c> bne	a0,s0,1c0022c6 <vTaskStartScheduler+0x5c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2047
		portDISABLE_INTERRUPTS();
1c00229a <vTaskStartScheduler+0x30> csrci	mstatus,8
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2055
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1c00229e <vTaskStartScheduler+0x34> lw	a5,-684(gp) # 1c009130 <pxCurrentTCB>
1c0022a2 <vTaskStartScheduler+0x38> lui	a4,0x1c009
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2096
}
1c0022a6 <vTaskStartScheduler+0x3c> lw	s0,8(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2055
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1c0022a8 <vTaskStartScheduler+0x3e> addi	a5,a5,88
1c0022ac <vTaskStartScheduler+0x42> sw	a5,-956(a4) # 1c008c44 <_impure_ptr>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2059
		xNextTaskUnblockTime = portMAX_DELAY;
1c0022b0 <vTaskStartScheduler+0x46> li	a4,-1
1c0022b2 <vTaskStartScheduler+0x48> sw	a4,-648(gp) # 1c009154 <xNextTaskUnblockTime>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2060
		xSchedulerRunning = pdTRUE;
1c0022b6 <vTaskStartScheduler+0x4c> sw	a0,-636(gp) # 1c009160 <xSchedulerRunning>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2096
}
1c0022ba <vTaskStartScheduler+0x50> lw	ra,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2061
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
1c0022bc <vTaskStartScheduler+0x52> sw	zero,-632(gp) # 1c009164 <xTickCount>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2096
}
1c0022c0 <vTaskStartScheduler+0x56> addi	sp,sp,16
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2075
		if( xPortStartScheduler() != pdFALSE )
1c0022c2 <vTaskStartScheduler+0x58> j	1c00291a <xPortStartScheduler>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2090
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1c0022c6 <vTaskStartScheduler+0x5c> li	a5,-1
1c0022c8 <vTaskStartScheduler+0x5e> bne	a0,a5,1c0022ee <vTaskStartScheduler+0x84>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2090 (discriminator 1)
1c0022cc <vTaskStartScheduler+0x62> lui	a3,0x1c008
1c0022d0 <vTaskStartScheduler+0x66> lui	a2,0x1c008
1c0022d4 <vTaskStartScheduler+0x6a> lui	a1,0x1
1c0022d6 <vTaskStartScheduler+0x6c> lui	a0,0x1c008
1c0022da <vTaskStartScheduler+0x70> addi	a3,a3,1368 # 1c008558 <__func__.9+0x18c>
1c0022de <vTaskStartScheduler+0x74> addi	a2,a2,1520 # 1c0085f0 <__func__.19>
1c0022e2 <vTaskStartScheduler+0x78> addi	a1,a1,-2006 # 0000082a <__stack_size+0x2a>
1c0022e6 <vTaskStartScheduler+0x7c> addi	a0,a0,1000 # 1c0083e8 <__func__.9+0x1c>
1c0022ea <vTaskStartScheduler+0x80> jal	ra,1c0037c8 <__assert_func>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2096
}
1c0022ee <vTaskStartScheduler+0x84> lw	ra,12(sp)
1c0022f0 <vTaskStartScheduler+0x86> lw	s0,8(sp)
1c0022f2 <vTaskStartScheduler+0x88> addi	sp,sp,16
1c0022f4 <vTaskStartScheduler+0x8a> ret
prvIdleTask():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3393
{
1c0022f6 <prvIdleTask> addi	sp,sp,-32
1c0022f8 <prvIdleTask+0x2> sw	s1,20(sp)
1c0022fa <prvIdleTask+0x4> sw	s3,12(sp)
1c0022fc <prvIdleTask+0x6> sw	s4,8(sp)
1c0022fe <prvIdleTask+0x8> sw	ra,28(sp)
1c002300 <prvIdleTask+0xa> sw	s0,24(sp)
1c002302 <prvIdleTask+0xc> sw	s2,16(sp)
prvCheckTasksWaitingTermination():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3654
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
1c002304 <prvIdleTask+0xe> addi	s1,gp,-1696 # 1c008d3c <xTasksWaitingTermination>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3650
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1c002308 <prvIdleTask+0x12> addi	s2,gp,-668 # 1c009140 <uxDeletedTasksWaitingCleanUp>
1c00230c <prvIdleTask+0x16> lw	a5,0(s2)
1c002310 <prvIdleTask+0x1a> beqz	a5,1c002308 <prvIdleTask+0x12>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3652
			taskENTER_CRITICAL();
1c002312 <prvIdleTask+0x1c> jal	1c00200c <vTaskEnterCritical>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3654
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
1c002314 <prvIdleTask+0x1e> lw	a5,12(s1)
1c002316 <prvIdleTask+0x20> lw	s0,12(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3655
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1c002318 <prvIdleTask+0x22> addi	a0,s0,4
1c00231c <prvIdleTask+0x26> jal	ra,1c000f26 <uxListRemove>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3656
				--uxCurrentNumberOfTasks;
1c002320 <prvIdleTask+0x2a> addi	a4,gp,-672 # 1c00913c <uxCurrentNumberOfTasks>
1c002324 <prvIdleTask+0x2e> lw	a5,0(a4)
1c002326 <prvIdleTask+0x30> addi	a5,a5,-1
1c002328 <prvIdleTask+0x32> sw	a5,0(a4)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3657
				--uxDeletedTasksWaitingCleanUp;
1c00232a <prvIdleTask+0x34> lw	a5,0(s2)
1c00232e <prvIdleTask+0x38> addi	a5,a5,-1
1c002330 <prvIdleTask+0x3a> sw	a5,0(s2)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3659
			taskEXIT_CRITICAL();
1c002334 <prvIdleTask+0x3e> jal	1c002026 <vTaskExitCritical>
prvDeleteTCB():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3900
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
1c002336 <prvIdleTask+0x40> addi	a0,s0,88
1c00233a <prvIdleTask+0x44> jal	ra,1c003f02 <_reclaim_reent>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3908
			vPortFree( pxTCB->pxStack );
1c00233e <prvIdleTask+0x48> lw	a0,48(s0)
1c002340 <prvIdleTask+0x4a> jal	ra,1c002992 <vPortFree>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3909
			vPortFree( pxTCB );
1c002344 <prvIdleTask+0x4e> mv	a0,s0
1c002346 <prvIdleTask+0x50> jal	ra,1c002992 <vPortFree>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3938
	}
1c00234a <prvIdleTask+0x54> j	1c002308 <prvIdleTask+0x12>
xTaskResumeAll():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2195
{
1c00234c <xTaskResumeAll> addi	sp,sp,-64
1c00234e <xTaskResumeAll+0x2> sw	s0,56(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2201
	configASSERT( uxSchedulerSuspended );
1c002350 <xTaskResumeAll+0x4> addi	s0,gp,-664 # 1c009144 <uxSchedulerSuspended>
1c002354 <xTaskResumeAll+0x8> lw	a5,0(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2195
{
1c002356 <xTaskResumeAll+0xa> sw	ra,60(sp)
1c002358 <xTaskResumeAll+0xc> sw	s1,52(sp)
1c00235a <xTaskResumeAll+0xe> sw	s2,48(sp)
1c00235c <xTaskResumeAll+0x10> sw	s3,44(sp)
1c00235e <xTaskResumeAll+0x12> sw	s4,40(sp)
1c002360 <xTaskResumeAll+0x14> sw	s5,36(sp)
1c002362 <xTaskResumeAll+0x16> sw	s6,32(sp)
1c002364 <xTaskResumeAll+0x18> sw	s7,28(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2201
	configASSERT( uxSchedulerSuspended );
1c002366 <xTaskResumeAll+0x1a> bnez	a5,1c00238a <xTaskResumeAll+0x3e>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2201 (discriminator 1)
1c002368 <xTaskResumeAll+0x1c> lui	a3,0x1c008
1c00236c <xTaskResumeAll+0x20> lui	a2,0x1c008
1c002370 <xTaskResumeAll+0x24> lui	a1,0x1
1c002372 <xTaskResumeAll+0x26> lui	a0,0x1c008
1c002376 <xTaskResumeAll+0x2a> addi	a3,a3,1388 # 1c00856c <__func__.9+0x1a0>
1c00237a <xTaskResumeAll+0x2e> addi	a2,a2,1504 # 1c0085e0 <__func__.18>
1c00237e <xTaskResumeAll+0x32> addi	a1,a1,-1895 # 00000899 <__stack_size+0x99>
1c002382 <xTaskResumeAll+0x36> addi	a0,a0,1000 # 1c0083e8 <__func__.9+0x1c>
1c002386 <xTaskResumeAll+0x3a> jal	ra,1c0037c8 <__assert_func>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2208
	taskENTER_CRITICAL();
1c00238a <xTaskResumeAll+0x3e> jal	ra,1c00200c <vTaskEnterCritical>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2210
		--uxSchedulerSuspended;
1c00238e <xTaskResumeAll+0x42> lw	a5,0(s0)
1c002390 <xTaskResumeAll+0x44> addi	a5,a5,-1
1c002392 <xTaskResumeAll+0x46> sw	a5,0(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2212
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1c002394 <xTaskResumeAll+0x48> lw	a5,0(s0)
1c002396 <xTaskResumeAll+0x4a> beqz	a5,1c0023b8 <xTaskResumeAll+0x6c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2197
BaseType_t xAlreadyYielded = pdFALSE;
1c002398 <xTaskResumeAll+0x4c> li	a0,0
1c00239a <xTaskResumeAll+0x4e> sw	a0,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2298
	taskEXIT_CRITICAL();
1c00239c <xTaskResumeAll+0x50> jal	ra,1c002026 <vTaskExitCritical>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2301
}
1c0023a0 <xTaskResumeAll+0x54> lw	ra,60(sp)
1c0023a2 <xTaskResumeAll+0x56> lw	s0,56(sp)
1c0023a4 <xTaskResumeAll+0x58> lw	a0,12(sp)
1c0023a6 <xTaskResumeAll+0x5a> lw	s1,52(sp)
1c0023a8 <xTaskResumeAll+0x5c> lw	s2,48(sp)
1c0023aa <xTaskResumeAll+0x5e> lw	s3,44(sp)
1c0023ac <xTaskResumeAll+0x60> lw	s4,40(sp)
1c0023ae <xTaskResumeAll+0x62> lw	s5,36(sp)
1c0023b0 <xTaskResumeAll+0x64> lw	s6,32(sp)
1c0023b2 <xTaskResumeAll+0x66> lw	s7,28(sp)
1c0023b4 <xTaskResumeAll+0x68> addi	sp,sp,64
1c0023b6 <xTaskResumeAll+0x6a> ret
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2214
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1c0023b8 <xTaskResumeAll+0x6c> lw	a5,-672(gp) # 1c00913c <uxCurrentNumberOfTasks>
1c0023bc <xTaskResumeAll+0x70> beqz	a5,1c002398 <xTaskResumeAll+0x4c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2223
					prvAddTaskToReadyList( pxTCB );
1c0023be <xTaskResumeAll+0x72> lui	s2,0x1c009
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2196
TCB_t *pxTCB = NULL;
1c0023c2 <xTaskResumeAll+0x76> li	s0,0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2218
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1c0023c4 <xTaskResumeAll+0x78> addi	s1,gp,-1736 # 1c008d14 <xPendingReadyList>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2223
					prvAddTaskToReadyList( pxTCB );
1c0023c8 <xTaskResumeAll+0x7c> li	s3,1
1c0023ca <xTaskResumeAll+0x7e> addi	s2,s2,-888 # 1c008c88 <pxReadyTasksLists>
1c0023ce <xTaskResumeAll+0x82> li	s5,20
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2229
						xYieldPending = pdTRUE;
1c0023d0 <xTaskResumeAll+0x84> j	1c00241c <xTaskResumeAll+0xd0>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2220
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
1c0023d2 <xTaskResumeAll+0x86> lw	a5,12(s1)
1c0023d4 <xTaskResumeAll+0x88> lw	s0,12(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2221
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1c0023d6 <xTaskResumeAll+0x8a> addi	a0,s0,24
1c0023da <xTaskResumeAll+0x8e> jal	ra,1c000f26 <uxListRemove>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2222
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1c0023de <xTaskResumeAll+0x92> addi	a1,s0,4
1c0023e2 <xTaskResumeAll+0x96> mv	a0,a1
1c0023e4 <xTaskResumeAll+0x98> sw	a1,12(sp)
1c0023e6 <xTaskResumeAll+0x9a> jal	ra,1c000f26 <uxListRemove>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2223
					prvAddTaskToReadyList( pxTCB );
1c0023ea <xTaskResumeAll+0x9e> lw	a0,44(s0)
1c0023ec <xTaskResumeAll+0xa0> addi	a4,gp,-656 # 1c00914c <uxTopReadyPriority>
1c0023f0 <xTaskResumeAll+0xa4> lw	a3,0(a4)
1c0023f2 <xTaskResumeAll+0xa6> sll	a5,s3,a0
1c0023f6 <xTaskResumeAll+0xaa> mul	a0,a0,s5
1c0023fa <xTaskResumeAll+0xae> lw	a1,12(sp)
1c0023fc <xTaskResumeAll+0xb0> or	a5,a5,a3
1c0023fe <xTaskResumeAll+0xb2> sw	a5,0(a4)
1c002400 <xTaskResumeAll+0xb4> add	a0,a0,s2
1c002402 <xTaskResumeAll+0xb6> jal	ra,1c000ee0 <vListInsertEnd>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2227
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1c002406 <xTaskResumeAll+0xba> addi	a5,gp,-684 # 1c009130 <pxCurrentTCB>
1c00240a <xTaskResumeAll+0xbe> lw	a5,0(a5)
1c00240c <xTaskResumeAll+0xc0> lw	a4,44(s0)
1c00240e <xTaskResumeAll+0xc2> lw	a5,44(a5)
1c002410 <xTaskResumeAll+0xc4> bltu	a4,a5,1c00241c <xTaskResumeAll+0xd0>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2229
						xYieldPending = pdTRUE;
1c002414 <xTaskResumeAll+0xc8> addi	a5,gp,-628 # 1c009168 <xYieldPending>
1c002418 <xTaskResumeAll+0xcc> sw	s3,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2218
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1c00241c <xTaskResumeAll+0xd0> lw	a5,0(s1)
1c00241e <xTaskResumeAll+0xd2> bnez	a5,1c0023d2 <xTaskResumeAll+0x86>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2237
				if( pxTCB != NULL )
1c002420 <xTaskResumeAll+0xd4> beqz	s0,1c002426 <xTaskResumeAll+0xda>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2245
					prvResetNextTaskUnblockTime();
1c002422 <xTaskResumeAll+0xd6> jal	ra,1c0019f8 <prvResetNextTaskUnblockTime>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2253
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
1c002426 <xTaskResumeAll+0xda> addi	a4,gp,-640 # 1c00915c <xPendedTicks>
1c00242a <xTaskResumeAll+0xde> lw	s1,0(a4)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2255
					if( xPendedCounts > ( TickType_t ) 0U )
1c00242c <xTaskResumeAll+0xe0> addi	s0,gp,-640 # 1c00915c <xPendedTicks>
1c002430 <xTaskResumeAll+0xe4> beqz	s1,1c00244a <xTaskResumeAll+0xfe>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2261
								xYieldPending = pdTRUE;
1c002432 <xTaskResumeAll+0xe6> li	s3,1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2259
							if( xTaskIncrementTick() != pdFALSE )
1c002434 <xTaskResumeAll+0xe8> jal	ra,1c001a28 <xTaskIncrementTick>
1c002438 <xTaskResumeAll+0xec> beqz	a0,1c002442 <xTaskResumeAll+0xf6>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2261
								xYieldPending = pdTRUE;
1c00243a <xTaskResumeAll+0xee> addi	a5,gp,-628 # 1c009168 <xYieldPending>
1c00243e <xTaskResumeAll+0xf2> sw	s3,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2267
							--xPendedCounts;
1c002442 <xTaskResumeAll+0xf6> addi	s1,s1,-1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2268
						} while( xPendedCounts > ( TickType_t ) 0U );
1c002444 <xTaskResumeAll+0xf8> bnez	s1,1c002434 <xTaskResumeAll+0xe8>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2270
						xPendedTicks = 0;
1c002446 <xTaskResumeAll+0xfa> sw	zero,0(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2278
				if( xYieldPending != pdFALSE )
1c00244a <xTaskResumeAll+0xfe> lw	a5,-628(gp) # 1c009168 <xYieldPending>
1c00244e <xTaskResumeAll+0x102> beqz	a5,1c002398 <xTaskResumeAll+0x4c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2285
					taskYIELD_IF_USING_PREEMPTION();
1c002450 <xTaskResumeAll+0x104> ecall
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:2282
						xAlreadyYielded = pdTRUE;
1c002454 <xTaskResumeAll+0x108> li	a0,1
1c002456 <xTaskResumeAll+0x10a> j	1c00239a <xTaskResumeAll+0x4e>
xTaskCheckForTimeOut():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3275
{
1c002458 <xTaskCheckForTimeOut> addi	sp,sp,-32
1c00245a <xTaskCheckForTimeOut+0x2> sw	ra,28(sp)
1c00245c <xTaskCheckForTimeOut+0x4> sw	s0,24(sp)
1c00245e <xTaskCheckForTimeOut+0x6> sw	s1,20(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3278
	configASSERT( pxTimeOut );
1c002460 <xTaskCheckForTimeOut+0x8> bnez	a0,1c002484 <xTaskCheckForTimeOut+0x2c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3278 (discriminator 1)
1c002462 <xTaskCheckForTimeOut+0xa> lui	a3,0x1c008
1c002466 <xTaskCheckForTimeOut+0xe> lui	a2,0x1c008
1c00246a <xTaskCheckForTimeOut+0x12> lui	a1,0x1
1c00246c <xTaskCheckForTimeOut+0x14> addi	a3,a3,1412 # 1c008584 <__func__.9+0x1b8>
1c002470 <xTaskCheckForTimeOut+0x18> addi	a2,a2,1600 # 1c008640 <__func__.5>
1c002474 <xTaskCheckForTimeOut+0x1c> addi	a1,a1,-818 # 00000cce <__stack_size+0x4ce>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3279 (discriminator 1)
	configASSERT( pxTicksToWait );
1c002478 <xTaskCheckForTimeOut+0x20> lui	a0,0x1c008
1c00247c <xTaskCheckForTimeOut+0x24> addi	a0,a0,1000 # 1c0083e8 <__func__.9+0x1c>
1c002480 <xTaskCheckForTimeOut+0x28> jal	ra,1c0037c8 <__assert_func>
1c002484 <xTaskCheckForTimeOut+0x2c> mv	s0,a1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3279
1c002486 <xTaskCheckForTimeOut+0x2e> bnez	a1,1c0024a0 <xTaskCheckForTimeOut+0x48>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3279 (discriminator 1)
1c002488 <xTaskCheckForTimeOut+0x30> lui	a3,0x1c008
1c00248c <xTaskCheckForTimeOut+0x34> lui	a2,0x1c008
1c002490 <xTaskCheckForTimeOut+0x38> lui	a1,0x1
1c002492 <xTaskCheckForTimeOut+0x3a> addi	a3,a3,1424 # 1c008590 <__func__.9+0x1c4>
1c002496 <xTaskCheckForTimeOut+0x3e> addi	a2,a2,1600 # 1c008640 <__func__.5>
1c00249a <xTaskCheckForTimeOut+0x42> addi	a1,a1,-817 # 00000ccf <__stack_size+0x4cf>
1c00249e <xTaskCheckForTimeOut+0x46> j	1c002478 <xTaskCheckForTimeOut+0x20>
1c0024a0 <xTaskCheckForTimeOut+0x48> mv	s1,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3281
	taskENTER_CRITICAL();
1c0024a2 <xTaskCheckForTimeOut+0x4a> jal	ra,1c00200c <vTaskEnterCritical>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3288
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
1c0024a6 <xTaskCheckForTimeOut+0x4e> addi	a4,gp,-684 # 1c009130 <pxCurrentTCB>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3284
		const TickType_t xConstTickCount = xTickCount;
1c0024aa <xTaskCheckForTimeOut+0x52> lw	a3,-632(gp) # 1c009164 <xTickCount>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3288
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
1c0024ae <xTaskCheckForTimeOut+0x56> lw	a5,0(a4)
1c0024b0 <xTaskCheckForTimeOut+0x58> lbu	a5,1157(a5)
1c0024b4 <xTaskCheckForTimeOut+0x5c> beqz	a5,1c0024c0 <xTaskCheckForTimeOut+0x68>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3292
				pxCurrentTCB->ucDelayAborted = pdFALSE;
1c0024b6 <xTaskCheckForTimeOut+0x5e> lw	a5,0(a4)
1c0024b8 <xTaskCheckForTimeOut+0x60> sb	zero,1157(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3328
			xReturn = pdTRUE;
1c0024bc <xTaskCheckForTimeOut+0x64> li	a0,1
1c0024be <xTaskCheckForTimeOut+0x66> j	1c0024f2 <xTaskCheckForTimeOut+0x9a>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3299
			if( *pxTicksToWait == portMAX_DELAY )
1c0024c0 <xTaskCheckForTimeOut+0x68> lw	a5,0(s0)
1c0024c2 <xTaskCheckForTimeOut+0x6a> li	a4,-1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3304
				xReturn = pdFALSE;
1c0024c4 <xTaskCheckForTimeOut+0x6c> li	a0,0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3299
			if( *pxTicksToWait == portMAX_DELAY )
1c0024c6 <xTaskCheckForTimeOut+0x6e> beq	a5,a4,1c0024f2 <xTaskCheckForTimeOut+0x9a>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3309
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1c0024ca <xTaskCheckForTimeOut+0x72> lw	a2,-644(gp) # 1c009158 <xNumOfOverflows>
1c0024ce <xTaskCheckForTimeOut+0x76> lw	a1,0(s1)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3285
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1c0024d0 <xTaskCheckForTimeOut+0x78> lw	a4,4(s1)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3309
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1c0024d2 <xTaskCheckForTimeOut+0x7a> beq	a1,a2,1c0024dc <xTaskCheckForTimeOut+0x84>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3316 (discriminator 1)
			xReturn = pdTRUE;
1c0024d6 <xTaskCheckForTimeOut+0x7e> li	a0,1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3309 (discriminator 1)
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1c0024d8 <xTaskCheckForTimeOut+0x80> bgeu	a3,a4,1c0024f2 <xTaskCheckForTimeOut+0x9a>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3285
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1c0024dc <xTaskCheckForTimeOut+0x84> sub	a2,a3,a4
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3318
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1c0024e0 <xTaskCheckForTimeOut+0x88> bgeu	a2,a5,1c002504 <xTaskCheckForTimeOut+0xac>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3321
			*pxTicksToWait -= xElapsedTime;
1c0024e4 <xTaskCheckForTimeOut+0x8c> sub	a5,a5,a3
1c0024e6 <xTaskCheckForTimeOut+0x8e> add	a5,a5,a4
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3322
			vTaskInternalSetTimeOutState( pxTimeOut );
1c0024e8 <xTaskCheckForTimeOut+0x90> mv	a0,s1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3321
			*pxTicksToWait -= xElapsedTime;
1c0024ea <xTaskCheckForTimeOut+0x92> sw	a5,0(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3322
			vTaskInternalSetTimeOutState( pxTimeOut );
1c0024ec <xTaskCheckForTimeOut+0x94> jal	ra,1c001d6e <vTaskInternalSetTimeOutState>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3323
			xReturn = pdFALSE;
1c0024f0 <xTaskCheckForTimeOut+0x98> li	a0,0
1c0024f2 <xTaskCheckForTimeOut+0x9a> sw	a0,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3331
	taskEXIT_CRITICAL();
1c0024f4 <xTaskCheckForTimeOut+0x9c> jal	ra,1c002026 <vTaskExitCritical>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3334
}
1c0024f8 <xTaskCheckForTimeOut+0xa0> lw	ra,28(sp)
1c0024fa <xTaskCheckForTimeOut+0xa2> lw	s0,24(sp)
1c0024fc <xTaskCheckForTimeOut+0xa4> lw	a0,12(sp)
1c0024fe <xTaskCheckForTimeOut+0xa6> lw	s1,20(sp)
1c002500 <xTaskCheckForTimeOut+0xa8> addi	sp,sp,32
1c002502 <xTaskCheckForTimeOut+0xaa> ret
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:3327
			*pxTicksToWait = 0;
1c002504 <xTaskCheckForTimeOut+0xac> sw	zero,0(s0)
1c002508 <xTaskCheckForTimeOut+0xb0> j	1c0024bc <xTaskCheckForTimeOut+0x64>
pvTaskIncrementMutexHeldCount():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4622
		if( pxCurrentTCB != NULL )
1c00250a <pvTaskIncrementMutexHeldCount> addi	a4,gp,-684 # 1c009130 <pxCurrentTCB>
1c00250e <pvTaskIncrementMutexHeldCount+0x4> lw	a4,0(a4)
1c002510 <pvTaskIncrementMutexHeldCount+0x6> addi	a5,gp,-684 # 1c009130 <pxCurrentTCB>
1c002514 <pvTaskIncrementMutexHeldCount+0xa> beqz	a4,1c00251e <pvTaskIncrementMutexHeldCount+0x14>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4624
			( pxCurrentTCB->uxMutexesHeld )++;
1c002516 <pvTaskIncrementMutexHeldCount+0xc> lw	a3,0(a5)
1c002518 <pvTaskIncrementMutexHeldCount+0xe> lw	a4,84(a3)
1c00251a <pvTaskIncrementMutexHeldCount+0x10> addi	a4,a4,1
1c00251c <pvTaskIncrementMutexHeldCount+0x12> sw	a4,84(a3)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4627
		return pxCurrentTCB;
1c00251e <pvTaskIncrementMutexHeldCount+0x14> lw	a0,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/tasks.c:4628
	}
1c002520 <pvTaskIncrementMutexHeldCount+0x16> ret
prvCheckForValidListAndQueue():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:942
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1c002522 <prvCheckForValidListAndQueue> addi	sp,sp,-16
1c002524 <prvCheckForValidListAndQueue+0x2> sw	s0,8(sp)
1c002526 <prvCheckForValidListAndQueue+0x4> sw	ra,12(sp)
1c002528 <prvCheckForValidListAndQueue+0x6> sw	s1,4(sp)
1c00252a <prvCheckForValidListAndQueue+0x8> sw	s2,0(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:948
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
1c00252c <prvCheckForValidListAndQueue+0xa> addi	s0,gp,-612 # 1c009178 <xTimerQueue>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:946
	taskENTER_CRITICAL();
1c002530 <prvCheckForValidListAndQueue+0xe> jal	ra,1c00200c <vTaskEnterCritical>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:948
		if( xTimerQueue == NULL )
1c002534 <prvCheckForValidListAndQueue+0x12> lw	a5,0(s0)
1c002536 <prvCheckForValidListAndQueue+0x14> bnez	a5,1c002572 <prvCheckForValidListAndQueue+0x50>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:950
		{
			vListInitialise( &xActiveTimerList1 );
1c002538 <prvCheckForValidListAndQueue+0x16> addi	s2,gp,-1676 # 1c008d50 <xActiveTimerList1>
1c00253c <prvCheckForValidListAndQueue+0x1a> addi	a0,gp,-1676 # 1c008d50 <xActiveTimerList1>
1c002540 <prvCheckForValidListAndQueue+0x1e> jal	ra,1c000ec6 <vListInitialise>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:951
			vListInitialise( &xActiveTimerList2 );
1c002544 <prvCheckForValidListAndQueue+0x22> addi	s1,gp,-1656 # 1c008d64 <xActiveTimerList2>
1c002548 <prvCheckForValidListAndQueue+0x26> addi	a0,gp,-1656 # 1c008d64 <xActiveTimerList2>
1c00254c <prvCheckForValidListAndQueue+0x2a> jal	ra,1c000ec6 <vListInitialise>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:952
			pxCurrentTimerList = &xActiveTimerList1;
1c002550 <prvCheckForValidListAndQueue+0x2e> sw	s2,-624(gp) # 1c00916c <pxCurrentTimerList>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:966

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
1c002554 <prvCheckForValidListAndQueue+0x32> li	a2,0
1c002556 <prvCheckForValidListAndQueue+0x34> li	a1,16
1c002558 <prvCheckForValidListAndQueue+0x36> li	a0,4
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:953
			pxOverflowTimerList = &xActiveTimerList2;
1c00255a <prvCheckForValidListAndQueue+0x38> sw	s1,-620(gp) # 1c009170 <pxOverflowTimerList>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:966
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
1c00255e <prvCheckForValidListAndQueue+0x3c> jal	ra,1c001114 <xQueueGenericCreate>
1c002562 <prvCheckForValidListAndQueue+0x40> sw	a0,0(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:972
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
1c002564 <prvCheckForValidListAndQueue+0x42> beqz	a0,1c002572 <prvCheckForValidListAndQueue+0x50>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:974
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1c002566 <prvCheckForValidListAndQueue+0x44> lui	a1,0x1c008
1c00256a <prvCheckForValidListAndQueue+0x48> addi	a1,a1,1684 # 1c008694 <__func__.9+0x20>
1c00256e <prvCheckForValidListAndQueue+0x4c> jal	ra,1c00185e <vQueueAddToRegistry>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:989
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
1c002572 <prvCheckForValidListAndQueue+0x50> lw	s0,8(sp)
1c002574 <prvCheckForValidListAndQueue+0x52> lw	ra,12(sp)
1c002576 <prvCheckForValidListAndQueue+0x54> lw	s1,4(sp)
1c002578 <prvCheckForValidListAndQueue+0x56> lw	s2,0(sp)
1c00257a <prvCheckForValidListAndQueue+0x58> addi	sp,sp,16
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:988
	taskEXIT_CRITICAL();
1c00257c <prvCheckForValidListAndQueue+0x5a> j	1c002026 <vTaskExitCritical>
prvInsertTimerInActiveList():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:694
{
1c002580 <prvInsertTimerInActiveList> addi	sp,sp,-16
1c002582 <prvInsertTimerInActiveList+0x2> sw	ra,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:697
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1c002584 <prvInsertTimerInActiveList+0x4> sw	a1,4(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:698
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1c002586 <prvInsertTimerInActiveList+0x6> sw	a0,16(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:694
{
1c002588 <prvInsertTimerInActiveList+0x8> mv	a5,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:700
	if( xNextExpiryTime <= xTimeNow )
1c00258a <prvInsertTimerInActiveList+0xa> bltu	a2,a1,1c0025ac <prvInsertTimerInActiveList+0x2c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:704
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1c00258e <prvInsertTimerInActiveList+0xe> lw	a4,24(a0)
1c002590 <prvInsertTimerInActiveList+0x10> sub	a2,a2,a3
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:708
			xProcessTimerNow = pdTRUE;
1c002592 <prvInsertTimerInActiveList+0x12> li	a0,1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:704
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1c002594 <prvInsertTimerInActiveList+0x14> bgeu	a2,a4,1c0025a6 <prvInsertTimerInActiveList+0x26>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:712
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1c002598 <prvInsertTimerInActiveList+0x18> addi	a1,a5,4
1c00259c <prvInsertTimerInActiveList+0x1c> lw	a0,-620(gp) # 1c009170 <pxOverflowTimerList>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:726
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1c0025a0 <prvInsertTimerInActiveList+0x20> jal	ra,1c000ef8 <vListInsert>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:695
BaseType_t xProcessTimerNow = pdFALSE;
1c0025a4 <prvInsertTimerInActiveList+0x24> li	a0,0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:731
}
1c0025a6 <prvInsertTimerInActiveList+0x26> lw	ra,12(sp)
1c0025a8 <prvInsertTimerInActiveList+0x28> addi	sp,sp,16
1c0025aa <prvInsertTimerInActiveList+0x2a> ret
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:717
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1c0025ac <prvInsertTimerInActiveList+0x2c> bgeu	a2,a3,1c0025b6 <prvInsertTimerInActiveList+0x36>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:708 (discriminator 1)
			xProcessTimerNow = pdTRUE;
1c0025b0 <prvInsertTimerInActiveList+0x30> li	a0,1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:717 (discriminator 1)
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1c0025b2 <prvInsertTimerInActiveList+0x32> bgeu	a1,a3,1c0025a6 <prvInsertTimerInActiveList+0x26>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:726
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1c0025b6 <prvInsertTimerInActiveList+0x36> addi	a1,a5,4
1c0025ba <prvInsertTimerInActiveList+0x3a> lw	a0,-624(gp) # 1c00916c <pxCurrentTimerList>
1c0025be <prvInsertTimerInActiveList+0x3e> j	1c0025a0 <prvInsertTimerInActiveList+0x20>
xTimerCreateTimerTask():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:228
{
1c0025c0 <xTimerCreateTimerTask> addi	sp,sp,-16
1c0025c2 <xTimerCreateTimerTask+0x2> sw	ra,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:235
	prvCheckForValidListAndQueue();
1c0025c4 <xTimerCreateTimerTask+0x4> jal	1c002522 <prvCheckForValidListAndQueue>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:237
	if( xTimerQueue != NULL )
1c0025c6 <xTimerCreateTimerTask+0x6> lw	a5,-612(gp) # 1c009178 <xTimerQueue>
1c0025ca <xTimerCreateTimerTask+0xa> bnez	a5,1c0025ec <xTimerCreateTimerTask+0x2c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:275
	configASSERT( xReturn );
1c0025cc <xTimerCreateTimerTask+0xc> lui	a3,0x1c008
1c0025d0 <xTimerCreateTimerTask+0x10> lui	a2,0x1c008
1c0025d4 <xTimerCreateTimerTask+0x14> lui	a0,0x1c008
1c0025d8 <xTimerCreateTimerTask+0x18> addi	a3,a3,1692 # 1c00869c <__func__.9+0x28>
1c0025dc <xTimerCreateTimerTask+0x1c> addi	a2,a2,1968 # 1c0087b0 <__func__.16>
1c0025e0 <xTimerCreateTimerTask+0x20> li	a1,275
1c0025e4 <xTimerCreateTimerTask+0x24> addi	a0,a0,1700 # 1c0086a4 <__func__.9+0x30>
1c0025e8 <xTimerCreateTimerTask+0x28> jal	ra,1c0037c8 <__assert_func>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:261
			xReturn = xTaskCreate(	prvTimerTask,
1c0025ec <xTimerCreateTimerTask+0x2c> lui	a1,0x1c008
1c0025f0 <xTimerCreateTimerTask+0x30> lui	a0,0x1c002
1c0025f4 <xTimerCreateTimerTask+0x34> addi	a5,gp,-608 # 1c00917c <xTimerTaskHandle>
1c0025f8 <xTimerCreateTimerTask+0x38> li	a4,4
1c0025fa <xTimerCreateTimerTask+0x3a> li	a3,0
1c0025fc <xTimerCreateTimerTask+0x3c> li	a2,400
1c002600 <xTimerCreateTimerTask+0x40> addi	a1,a1,1768 # 1c0086e8 <__func__.9+0x74>
1c002604 <xTimerCreateTimerTask+0x44> addi	a0,a0,1876 # 1c002754 <prvTimerTask>
1c002608 <xTimerCreateTimerTask+0x48> jal	ra,1c00204a <xTaskCreate>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:275
	configASSERT( xReturn );
1c00260c <xTimerCreateTimerTask+0x4c> beqz	a0,1c0025cc <xTimerCreateTimerTask+0xc>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:277
}
1c00260e <xTimerCreateTimerTask+0x4e> lw	ra,12(sp)
1c002610 <xTimerCreateTimerTask+0x50> addi	sp,sp,16
1c002612 <xTimerCreateTimerTask+0x52> ret
xTimerGenericCommand():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:382
{
1c002614 <xTimerGenericCommand> addi	sp,sp,-32
1c002616 <xTimerGenericCommand+0x2> sw	ra,28(sp)
1c002618 <xTimerGenericCommand+0x4> sw	s0,24(sp)
1c00261a <xTimerGenericCommand+0x6> sw	s1,20(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:386
	configASSERT( xTimer );
1c00261c <xTimerGenericCommand+0x8> bnez	a0,1c00263e <xTimerGenericCommand+0x2a>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:386 (discriminator 1)
1c00261e <xTimerGenericCommand+0xa> lui	a3,0x1c008
1c002622 <xTimerGenericCommand+0xe> lui	a2,0x1c008
1c002626 <xTimerGenericCommand+0x12> lui	a0,0x1c008
1c00262a <xTimerGenericCommand+0x16> addi	a3,a3,1776 # 1c0086f0 <__func__.9+0x7c>
1c00262e <xTimerGenericCommand+0x1a> addi	a2,a2,1872 # 1c008750 <__func__.10>
1c002632 <xTimerGenericCommand+0x1e> li	a1,386
1c002636 <xTimerGenericCommand+0x22> addi	a0,a0,1700 # 1c0086a4 <__func__.9+0x30>
1c00263a <xTimerGenericCommand+0x26> jal	ra,1c0037c8 <__assert_func>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:390
	if( xTimerQueue != NULL )
1c00263e <xTimerGenericCommand+0x2a> addi	s0,gp,-612 # 1c009178 <xTimerQueue>
1c002642 <xTimerGenericCommand+0x2e> mv	s1,a4
1c002644 <xTimerGenericCommand+0x30> lw	a4,0(s0)
1c002646 <xTimerGenericCommand+0x32> mv	a5,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:383
BaseType_t xReturn = pdFAIL;
1c002648 <xTimerGenericCommand+0x34> li	a0,0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:390
	if( xTimerQueue != NULL )
1c00264a <xTimerGenericCommand+0x36> beqz	a4,1c002672 <xTimerGenericCommand+0x5e>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:395
		xMessage.u.xTimerParameters.pxTimer = xTimer;
1c00264c <xTimerGenericCommand+0x38> sw	a5,8(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:393
		xMessage.xMessageID = xCommandID;
1c00264e <xTimerGenericCommand+0x3a> sw	a1,0(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:394
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1c002650 <xTimerGenericCommand+0x3c> sw	a2,4(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:397
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1c002652 <xTimerGenericCommand+0x3e> li	a5,5
1c002654 <xTimerGenericCommand+0x40> blt	a5,a1,1c00267c <xTimerGenericCommand+0x68>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:399
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1c002658 <xTimerGenericCommand+0x44> jal	ra,1c001d84 <xTaskGetSchedulerState>
1c00265c <xTimerGenericCommand+0x48> mv	a4,a0
1c00265e <xTimerGenericCommand+0x4a> li	a5,2
1c002660 <xTimerGenericCommand+0x4c> lw	a0,0(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:401
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1c002662 <xTimerGenericCommand+0x4e> li	a3,0
1c002664 <xTimerGenericCommand+0x50> mv	a2,s1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:399
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1c002666 <xTimerGenericCommand+0x52> beq	a4,a5,1c00266c <xTimerGenericCommand+0x58>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:405
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1c00266a <xTimerGenericCommand+0x56> li	a2,0
1c00266c <xTimerGenericCommand+0x58> mv	a1,sp
1c00266e <xTimerGenericCommand+0x5a> jal	ra,1c0011d8 <xQueueGenericSend>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:421
}
1c002672 <xTimerGenericCommand+0x5e> lw	ra,28(sp)
1c002674 <xTimerGenericCommand+0x60> lw	s0,24(sp)
1c002676 <xTimerGenericCommand+0x62> lw	s1,20(sp)
1c002678 <xTimerGenericCommand+0x64> addi	sp,sp,32
1c00267a <xTimerGenericCommand+0x66> ret
1c00267c <xTimerGenericCommand+0x68> mv	a6,a3
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:410
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1c00267e <xTimerGenericCommand+0x6a> mv	a2,a6
1c002680 <xTimerGenericCommand+0x6c> li	a3,0
1c002682 <xTimerGenericCommand+0x6e> mv	a1,sp
1c002684 <xTimerGenericCommand+0x70> mv	a0,a4
1c002686 <xTimerGenericCommand+0x72> jal	ra,1c001356 <xQueueGenericSendFromISR>
1c00268a <xTimerGenericCommand+0x76> j	1c002672 <xTimerGenericCommand+0x5e>
prvSampleTimeNow():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:671
{
1c00268c <prvSampleTimeNow> addi	sp,sp,-48
1c00268e <prvSampleTimeNow+0x2> sw	s1,36(sp)
1c002690 <prvSampleTimeNow+0x4> sw	s2,32(sp)
1c002692 <prvSampleTimeNow+0x6> sw	s3,28(sp)
1c002694 <prvSampleTimeNow+0x8> sw	ra,44(sp)
1c002696 <prvSampleTimeNow+0xa> sw	s0,40(sp)
1c002698 <prvSampleTimeNow+0xc> sw	s4,24(sp)
1c00269a <prvSampleTimeNow+0xe> sw	s5,20(sp)
1c00269c <prvSampleTimeNow+0x10> mv	s3,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:675
	xTimeNow = xTaskGetTickCount();
1c00269e <prvSampleTimeNow+0x12> jal	ra,1c001a22 <xTaskGetTickCount>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:677
	if( xTimeNow < xLastTime )
1c0026a2 <prvSampleTimeNow+0x16> lw	a5,-616(gp) # 1c009174 <xLastTime.15>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:675
	xTimeNow = xTaskGetTickCount();
1c0026a6 <prvSampleTimeNow+0x1a> mv	s1,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:677
	if( xTimeNow < xLastTime )
1c0026a8 <prvSampleTimeNow+0x1c> addi	s2,gp,-616 # 1c009174 <xLastTime.15>
1c0026ac <prvSampleTimeNow+0x20> bgeu	a0,a5,1c00274e <prvSampleTimeNow+0xc2>
prvSwitchTimerLists():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:893
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1c0026b0 <prvSampleTimeNow+0x24> addi	s4,gp,-624 # 1c00916c <pxCurrentTimerList>
1c0026b4 <prvSampleTimeNow+0x28> lw	a4,0(s4)
1c0026b8 <prvSampleTimeNow+0x2c> lw	a5,0(a4)
1c0026ba <prvSampleTimeNow+0x2e> bnez	a5,1c0026e6 <prvSampleTimeNow+0x5a>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:936
	pxCurrentTimerList = pxOverflowTimerList;
1c0026bc <prvSampleTimeNow+0x30> addi	a5,gp,-620 # 1c009170 <pxOverflowTimerList>
1c0026c0 <prvSampleTimeNow+0x34> lw	a3,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:937
	pxOverflowTimerList = pxTemp;
1c0026c2 <prvSampleTimeNow+0x36> sw	a4,0(a5)
prvSampleTimeNow():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:680
		*pxTimerListsWereSwitched = pdTRUE;
1c0026c4 <prvSampleTimeNow+0x38> li	a5,1
prvSwitchTimerLists():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:936
	pxCurrentTimerList = pxOverflowTimerList;
1c0026c6 <prvSampleTimeNow+0x3a> sw	a3,0(s4)
prvSampleTimeNow():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:680
		*pxTimerListsWereSwitched = pdTRUE;
1c0026ca <prvSampleTimeNow+0x3e> sw	a5,0(s3)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:690
}
1c0026ce <prvSampleTimeNow+0x42> lw	ra,44(sp)
1c0026d0 <prvSampleTimeNow+0x44> lw	s0,40(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:687
	xLastTime = xTimeNow;
1c0026d2 <prvSampleTimeNow+0x46> sw	s1,0(s2)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:690
}
1c0026d6 <prvSampleTimeNow+0x4a> lw	s3,28(sp)
1c0026d8 <prvSampleTimeNow+0x4c> lw	s2,32(sp)
1c0026da <prvSampleTimeNow+0x4e> lw	s4,24(sp)
1c0026dc <prvSampleTimeNow+0x50> lw	s5,20(sp)
1c0026de <prvSampleTimeNow+0x52> mv	a0,s1
1c0026e0 <prvSampleTimeNow+0x54> lw	s1,36(sp)
1c0026e2 <prvSampleTimeNow+0x56> addi	sp,sp,48
1c0026e4 <prvSampleTimeNow+0x58> ret
prvSwitchTimerLists():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:895
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1c0026e6 <prvSampleTimeNow+0x5a> lw	a5,12(a4)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:898
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
1c0026e8 <prvSampleTimeNow+0x5c> lw	s0,12(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:895
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1c0026ea <prvSampleTimeNow+0x5e> lw	a2,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:899
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1c0026ec <prvSampleTimeNow+0x60> addi	a1,s0,4
1c0026f0 <prvSampleTimeNow+0x64> mv	a0,a1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:895
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1c0026f2 <prvSampleTimeNow+0x66> sw	a2,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:899
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1c0026f4 <prvSampleTimeNow+0x68> sw	a1,8(sp)
1c0026f6 <prvSampleTimeNow+0x6a> jal	ra,1c000f26 <uxListRemove>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:905
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1c0026fa <prvSampleTimeNow+0x6e> lw	a5,32(s0)
1c0026fc <prvSampleTimeNow+0x70> mv	a0,s0
1c0026fe <prvSampleTimeNow+0x72> jalr	a5
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:907
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
1c002700 <prvSampleTimeNow+0x74> lbu	a5,40(s0)
1c002704 <prvSampleTimeNow+0x78> lw	a1,8(sp)
1c002706 <prvSampleTimeNow+0x7a> lw	a2,12(sp)
1c002708 <prvSampleTimeNow+0x7c> andi	a5,a5,4
1c00270a <prvSampleTimeNow+0x7e> beqz	a5,1c0026b0 <prvSampleTimeNow+0x24>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:915
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1c00270c <prvSampleTimeNow+0x80> lw	a5,24(s0)
1c00270e <prvSampleTimeNow+0x82> add	a5,a5,a2
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:916
			if( xReloadTime > xNextExpireTime )
1c002710 <prvSampleTimeNow+0x84> bgeu	a2,a5,1c002722 <prvSampleTimeNow+0x96>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:920
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1c002714 <prvSampleTimeNow+0x88> lw	a0,0(s4)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:918
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1c002718 <prvSampleTimeNow+0x8c> sw	a5,4(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:919
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1c00271a <prvSampleTimeNow+0x8e> sw	s0,16(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:920
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1c00271c <prvSampleTimeNow+0x90> jal	ra,1c000ef8 <vListInsert>
1c002720 <prvSampleTimeNow+0x94> j	1c0026b0 <prvSampleTimeNow+0x24>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:924
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1c002722 <prvSampleTimeNow+0x96> li	a4,0
1c002724 <prvSampleTimeNow+0x98> li	a3,0
1c002726 <prvSampleTimeNow+0x9a> li	a1,0
1c002728 <prvSampleTimeNow+0x9c> mv	a0,s0
1c00272a <prvSampleTimeNow+0x9e> jal	1c002614 <xTimerGenericCommand>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:925
				configASSERT( xResult );
1c00272c <prvSampleTimeNow+0xa0> bnez	a0,1c0026b0 <prvSampleTimeNow+0x24>
1c00272e <prvSampleTimeNow+0xa2> lui	a3,0x1c008
1c002732 <prvSampleTimeNow+0xa6> lui	a2,0x1c008
1c002736 <prvSampleTimeNow+0xaa> lui	a0,0x1c008
1c00273a <prvSampleTimeNow+0xae> addi	a3,a3,1784 # 1c0086f8 <__func__.9+0x84>
1c00273e <prvSampleTimeNow+0xb2> addi	a2,a2,1948 # 1c00879c <__func__.14>
1c002742 <prvSampleTimeNow+0xb6> li	a1,925
1c002746 <prvSampleTimeNow+0xba> addi	a0,a0,1700 # 1c0086a4 <__func__.9+0x30>
1c00274a <prvSampleTimeNow+0xbe> jal	ra,1c0037c8 <__assert_func>
prvSampleTimeNow():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:684
		*pxTimerListsWereSwitched = pdFALSE;
1c00274e <prvSampleTimeNow+0xc2> sw	zero,0(s3)
1c002752 <prvSampleTimeNow+0xc6> j	1c0026ce <prvSampleTimeNow+0x42>
prvTimerTask():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:549
{
1c002754 <prvTimerTask> addi	sp,sp,-80
1c002756 <prvTimerTask+0x2> sw	s2,64(sp)
1c002758 <prvTimerTask+0x4> lui	s2,0x1c008
1c00275c <prvTimerTask+0x8> sw	s3,60(sp)
1c00275e <prvTimerTask+0xa> sw	s5,52(sp)
1c002760 <prvTimerTask+0xc> sw	ra,76(sp)
1c002762 <prvTimerTask+0xe> sw	s0,72(sp)
1c002764 <prvTimerTask+0x10> sw	s1,68(sp)
1c002766 <prvTimerTask+0x12> sw	s4,56(sp)
1c002768 <prvTimerTask+0x14> sw	s6,48(sp)
1c00276a <prvTimerTask+0x16> sw	s7,44(sp)
prvGetNextExpireTime():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:655
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1c00276c <prvTimerTask+0x18> addi	s2,s2,1832 # 1c008728 <__func__.9+0xb4>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:655 (discriminator 1)
1c002770 <prvTimerTask+0x1c> lw	a5,-624(gp) # 1c00916c <pxCurrentTimerList>
1c002774 <prvTimerTask+0x20> addi	s7,gp,-624 # 1c00916c <pxCurrentTimerList>
1c002778 <prvTimerTask+0x24> li	s0,1
1c00277a <prvTimerTask+0x26> lw	s1,0(a5)
1c00277c <prvTimerTask+0x28> beqz	s1,1c002784 <prvTimerTask+0x30>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:658
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1c00277e <prvTimerTask+0x2a> lw	a5,12(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:655
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1c002780 <prvTimerTask+0x2c> li	s0,0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:658
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1c002782 <prvTimerTask+0x2e> lw	s1,0(a5)
prvProcessTimerOrBlockTask():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:589
	vTaskSuspendAll();
1c002784 <prvTimerTask+0x30> jal	ra,1c001a16 <vTaskSuspendAll>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:596
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1c002788 <prvTimerTask+0x34> addi	a0,sp,16
1c00278a <prvTimerTask+0x36> jal	1c00268c <prvSampleTimeNow>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:597
		if( xTimerListsWereSwitched == pdFALSE )
1c00278c <prvTimerTask+0x38> lw	a5,16(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:596
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1c00278e <prvTimerTask+0x3a> mv	s6,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:597
		if( xTimerListsWereSwitched == pdFALSE )
1c002790 <prvTimerTask+0x3c> addi	s4,gp,-612 # 1c009178 <xTimerQueue>
1c002794 <prvTimerTask+0x40> bnez	a5,1c00285a <prvTimerTask+0x106>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:600
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1c002796 <prvTimerTask+0x42> bnez	s0,1c002836 <prvTimerTask+0xe2>
1c002798 <prvTimerTask+0x44> bltu	a0,s1,1c002840 <prvTimerTask+0xec>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:602
				( void ) xTaskResumeAll();
1c00279c <prvTimerTask+0x48> jal	ra,1c00234c <xTaskResumeAll>
prvProcessExpiredTimer():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:510
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
1c0027a0 <prvTimerTask+0x4c> lw	a5,0(s7)
1c0027a4 <prvTimerTask+0x50> lw	a5,12(a5)
1c0027a6 <prvTimerTask+0x52> lw	s0,12(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:514
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1c0027a8 <prvTimerTask+0x54> addi	a0,s0,4
1c0027ac <prvTimerTask+0x58> jal	ra,1c000f26 <uxListRemove>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:519
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
1c0027b0 <prvTimerTask+0x5c> lbu	a5,40(s0)
1c0027b4 <prvTimerTask+0x60> andi	a4,a5,4
1c0027b8 <prvTimerTask+0x64> beqz	a4,1c0027f8 <prvTimerTask+0xa4>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:524
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1c0027ba <prvTimerTask+0x66> lw	a1,24(s0)
1c0027bc <prvTimerTask+0x68> mv	a3,s1
1c0027be <prvTimerTask+0x6a> mv	a2,s6
1c0027c0 <prvTimerTask+0x6c> add	a1,a1,s1
1c0027c2 <prvTimerTask+0x6e> mv	a0,s0
1c0027c4 <prvTimerTask+0x70> jal	ra,1c002580 <prvInsertTimerInActiveList>
1c0027c8 <prvTimerTask+0x74> beqz	a0,1c0027fe <prvTimerTask+0xaa>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:528
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1c0027ca <prvTimerTask+0x76> li	a4,0
1c0027cc <prvTimerTask+0x78> li	a3,0
1c0027ce <prvTimerTask+0x7a> mv	a2,s1
1c0027d0 <prvTimerTask+0x7c> li	a1,0
1c0027d2 <prvTimerTask+0x7e> mv	a0,s0
1c0027d4 <prvTimerTask+0x80> jal	1c002614 <xTimerGenericCommand>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:529
			configASSERT( xResult );
1c0027d6 <prvTimerTask+0x82> bnez	a0,1c0027fe <prvTimerTask+0xaa>
1c0027d8 <prvTimerTask+0x84> lui	a3,0x1c008
1c0027dc <prvTimerTask+0x88> lui	a2,0x1c008
1c0027e0 <prvTimerTask+0x8c> addi	a3,a3,1784 # 1c0086f8 <__func__.9+0x84>
1c0027e4 <prvTimerTask+0x90> addi	a2,a2,1924 # 1c008784 <__func__.13>
1c0027e8 <prvTimerTask+0x94> li	a1,529
prvProcessReceivedCommands():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:812
							configASSERT( xResult );
1c0027ec <prvTimerTask+0x98> lui	a0,0x1c008
1c0027f0 <prvTimerTask+0x9c> addi	a0,a0,1700 # 1c0086a4 <__func__.9+0x30>
1c0027f4 <prvTimerTask+0xa0> jal	ra,1c0037c8 <__assert_func>
prvProcessExpiredTimer():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:539
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
1c0027f8 <prvTimerTask+0xa4> andi	a5,a5,-2
1c0027fa <prvTimerTask+0xa6> sb	a5,40(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:544
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1c0027fe <prvTimerTask+0xaa> lw	a5,32(s0)
1c002800 <prvTimerTask+0xac> mv	a0,s0
1c002802 <prvTimerTask+0xae> jalr	a5
1c002804 <prvTimerTask+0xb0> li	s1,9
prvProcessReceivedCommands():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:741
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1c002806 <prvTimerTask+0xb2> lw	a0,0(s4)
1c00280a <prvTimerTask+0xb6> li	a2,0
1c00280c <prvTimerTask+0xb8> addi	a1,sp,16
1c00280e <prvTimerTask+0xba> jal	ra,1c0014d4 <xQueueReceive>
1c002812 <prvTimerTask+0xbe> beqz	a0,1c002770 <prvTimerTask+0x1c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:747
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1c002814 <prvTimerTask+0xc0> lw	a5,16(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:756
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1c002816 <prvTimerTask+0xc2> lw	a0,24(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:747
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1c002818 <prvTimerTask+0xc4> bltz	a5,1c002860 <prvTimerTask+0x10c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:771
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1c00281c <prvTimerTask+0xc8> lw	s0,24(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:773
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1c00281e <prvTimerTask+0xca> lw	a5,20(s0)
1c002820 <prvTimerTask+0xcc> bnez	a5,1c00286e <prvTimerTask+0x11a>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:791
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1c002822 <prvTimerTask+0xce> addi	a0,sp,12
1c002824 <prvTimerTask+0xd0> jal	1c00268c <prvSampleTimeNow>
1c002826 <prvTimerTask+0xd2> lw	a5,16(sp)
1c002828 <prvTimerTask+0xd4> mv	a2,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:793
			switch( xMessage.xMessageID )
1c00282a <prvTimerTask+0xd6> bltu	s1,a5,1c002806 <prvTimerTask+0xb2>
1c00282e <prvTimerTask+0xda> slli	a5,a5,0x2
1c002830 <prvTimerTask+0xdc> add	a5,a5,s2
1c002832 <prvTimerTask+0xde> lw	a5,0(a5)
1c002834 <prvTimerTask+0xe0> jr	a5
prvProcessTimerOrBlockTask():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:617
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1c002836 <prvTimerTask+0xe2> lw	a5,-620(gp) # 1c009170 <pxOverflowTimerList>
1c00283a <prvTimerTask+0xe6> lw	s0,0(a5)
1c00283c <prvTimerTask+0xe8> seqz	s0,s0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:620
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1c002840 <prvTimerTask+0xec> lw	a0,0(s4)
1c002844 <prvTimerTask+0xf0> mv	a2,s0
1c002846 <prvTimerTask+0xf2> sub	a1,s1,s6
1c00284a <prvTimerTask+0xf6> jal	ra,1c0018f0 <vQueueWaitForMessageRestricted>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:622
				if( xTaskResumeAll() == pdFALSE )
1c00284e <prvTimerTask+0xfa> jal	ra,1c00234c <xTaskResumeAll>
1c002852 <prvTimerTask+0xfe> bnez	a0,1c002804 <prvTimerTask+0xb0>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:628
					portYIELD_WITHIN_API();
1c002854 <prvTimerTask+0x100> ecall
1c002858 <prvTimerTask+0x104> j	1c002804 <prvTimerTask+0xb0>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:638
			( void ) xTaskResumeAll();
1c00285a <prvTimerTask+0x106> jal	ra,1c00234c <xTaskResumeAll>
1c00285e <prvTimerTask+0x10a> j	1c002804 <prvTimerTask+0xb0>
prvProcessReceivedCommands():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:756
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1c002860 <prvTimerTask+0x10c> lw	a5,20(sp)
1c002862 <prvTimerTask+0x10e> lw	a1,28(sp)
1c002864 <prvTimerTask+0x110> jalr	a5
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:767
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1c002866 <prvTimerTask+0x112> lw	a5,16(sp)
1c002868 <prvTimerTask+0x114> bltz	a5,1c002806 <prvTimerTask+0xb2>
1c00286c <prvTimerTask+0x118> j	1c00281c <prvTimerTask+0xc8>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:776
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1c00286e <prvTimerTask+0x11a> addi	a0,s0,4
1c002872 <prvTimerTask+0x11e> jal	ra,1c000f26 <uxListRemove>
1c002876 <prvTimerTask+0x122> j	1c002822 <prvTimerTask+0xce>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:801
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
1c002878 <prvTimerTask+0x124> lbu	a5,40(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:802
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1c00287c <prvTimerTask+0x128> lw	a1,24(s0)
1c00287e <prvTimerTask+0x12a> mv	a0,s0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:801
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
1c002880 <prvTimerTask+0x12c> ori	a5,a5,1
1c002884 <prvTimerTask+0x130> sb	a5,40(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:802
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1c002888 <prvTimerTask+0x134> lw	a3,20(sp)
1c00288a <prvTimerTask+0x136> add	a1,a1,a3
1c00288c <prvTimerTask+0x138> jal	ra,1c002580 <prvInsertTimerInActiveList>
1c002890 <prvTimerTask+0x13c> beqz	a0,1c002806 <prvTimerTask+0xb2>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:806
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1c002892 <prvTimerTask+0x13e> lw	a5,32(s0)
1c002894 <prvTimerTask+0x140> mv	a0,s0
1c002896 <prvTimerTask+0x142> jalr	a5
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:809
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
1c002898 <prvTimerTask+0x144> lbu	a5,40(s0)
1c00289c <prvTimerTask+0x148> andi	a5,a5,4
1c00289e <prvTimerTask+0x14a> beqz	a5,1c002806 <prvTimerTask+0xb2>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:811
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1c0028a0 <prvTimerTask+0x14c> lw	a5,24(s0)
1c0028a2 <prvTimerTask+0x14e> lw	a2,20(sp)
1c0028a4 <prvTimerTask+0x150> li	a4,0
1c0028a6 <prvTimerTask+0x152> li	a3,0
1c0028a8 <prvTimerTask+0x154> add	a2,a2,a5
1c0028aa <prvTimerTask+0x156> li	a1,0
1c0028ac <prvTimerTask+0x158> mv	a0,s0
1c0028ae <prvTimerTask+0x15a> jal	ra,1c002614 <xTimerGenericCommand>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:812
							configASSERT( xResult );
1c0028b2 <prvTimerTask+0x15e> bnez	a0,1c002806 <prvTimerTask+0xb2>
1c0028b4 <prvTimerTask+0x160> lui	a3,0x1c008
1c0028b8 <prvTimerTask+0x164> lui	a2,0x1c008
1c0028bc <prvTimerTask+0x168> addi	a3,a3,1784 # 1c0086f8 <__func__.9+0x84>
1c0028c0 <prvTimerTask+0x16c> addi	a2,a2,1896 # 1c008768 <__func__.12>
1c0028c4 <prvTimerTask+0x170> li	a1,812
1c0028c8 <prvTimerTask+0x174> j	1c0027ec <prvTimerTask+0x98>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:829
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
1c0028ca <prvTimerTask+0x176> lbu	a5,40(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:859
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
1c0028ce <prvTimerTask+0x17a> andi	a5,a5,-2
1c0028d0 <prvTimerTask+0x17c> sb	a5,40(s0)
1c0028d4 <prvTimerTask+0x180> j	1c002806 <prvTimerTask+0xb2>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:834
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
1c0028d6 <prvTimerTask+0x182> lbu	a5,40(s0)
1c0028da <prvTimerTask+0x186> ori	a5,a5,1
1c0028de <prvTimerTask+0x18a> sb	a5,40(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:835
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1c0028e2 <prvTimerTask+0x18e> lw	a1,20(sp)
1c0028e4 <prvTimerTask+0x190> sw	a1,24(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:836
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1c0028e6 <prvTimerTask+0x192> bnez	a1,1c0028fe <prvTimerTask+0x1aa>
1c0028e8 <prvTimerTask+0x194> lui	a3,0x1c008
1c0028ec <prvTimerTask+0x198> lui	a2,0x1c008
1c0028f0 <prvTimerTask+0x19c> addi	a3,a3,1792 # 1c008700 <__func__.9+0x8c>
1c0028f4 <prvTimerTask+0x1a0> addi	a2,a2,1896 # 1c008768 <__func__.12>
1c0028f8 <prvTimerTask+0x1a4> li	a1,836
1c0028fc <prvTimerTask+0x1a8> j	1c0027ec <prvTimerTask+0x98>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:844
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1c0028fe <prvTimerTask+0x1aa> mv	a3,a0
1c002900 <prvTimerTask+0x1ac> add	a1,a1,a0
1c002902 <prvTimerTask+0x1ae> mv	a0,s0
1c002904 <prvTimerTask+0x1b0> jal	ra,1c002580 <prvInsertTimerInActiveList>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:845
					break;
1c002908 <prvTimerTask+0x1b4> j	1c002806 <prvTimerTask+0xb2>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:853
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
1c00290a <prvTimerTask+0x1b6> lbu	a5,40(s0)
1c00290e <prvTimerTask+0x1ba> andi	a4,a5,2
1c002912 <prvTimerTask+0x1be> bnez	a4,1c0028ce <prvTimerTask+0x17a>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/timers.c:855
							vPortFree( pxTimer );
1c002914 <prvTimerTask+0x1c0> mv	a0,s0
1c002916 <prvTimerTask+0x1c2> jal	1c002992 <vPortFree>
1c002918 <prvTimerTask+0x1c4> j	1c002806 <prvTimerTask+0xb2>
xPortStartScheduler():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/port.c:151

#endif /* ( configMTIME_BASE_ADDRESS != 0 ) && ( configMTIME_BASE_ADDRESS != 0 ) */
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void )
{
1c00291a <xPortStartScheduler> addi	sp,sp,-32
1c00291c <xPortStartScheduler+0x2> sw	ra,28(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/port.c:156
extern void xPortStartFirstTask( void );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t mtvec = 0;
1c00291e <xPortStartScheduler+0x4> sw	zero,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/port.c:160

		/* Check the least significant two bits of mtvec are 00 - indicating
		single vector mode. */
		__asm volatile( "csrr %0, mtvec" : "=r"( mtvec ) );
1c002920 <xPortStartScheduler+0x6> csrr	a5,mtvec
1c002924 <xPortStartScheduler+0xa> sw	a5,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/port.c:169


		/* Check alignment of the interrupt stack - which is the same as the
		stack that was being used by main() prior to the scheduler being
		started. */
		configASSERT( ( xISRStackTop & portBYTE_ALIGNMENT_MASK ) == 0 );
1c002926 <xPortStartScheduler+0xc> lui	a5,0x1c01a
1c00292a <xPortStartScheduler+0x10> addi	a5,a5,-1616 # 1c0199b0 <__cluster_text_end>
1c00292e <xPortStartScheduler+0x14> andi	a5,a5,15
1c002930 <xPortStartScheduler+0x16> beqz	a5,1c002952 <xPortStartScheduler+0x38>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/port.c:169 (discriminator 1)
1c002932 <xPortStartScheduler+0x18> lui	a3,0x1c008
1c002936 <xPortStartScheduler+0x1c> lui	a2,0x1c009
1c00293a <xPortStartScheduler+0x20> lui	a0,0x1c008
1c00293e <xPortStartScheduler+0x24> addi	a3,a3,1992 # 1c0087c8 <__func__.16+0x18>
1c002942 <xPortStartScheduler+0x28> addi	a2,a2,-1980 # 1c008844 <__func__.0>
1c002946 <xPortStartScheduler+0x2c> li	a1,169
1c00294a <xPortStartScheduler+0x30> addi	a0,a0,2028 # 1c0087ec <__func__.16+0x3c>
1c00294e <xPortStartScheduler+0x34> jal	ra,1c0037c8 <__assert_func>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/port.c:182
	#endif /* configASSERT_DEFINED */

	/* If there is a CLINT then it is ok to use the default implementation
	in this file, otherwise vPortSetupTimerInterrupt() must be implemented to
	configure whichever clock is to be used to generate the tick interrupt. */
	vPortSetupTimerInterrupt();
1c002952 <xPortStartScheduler+0x38> jal	1c002aee <vPortSetupTimerInterrupt>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/port.c:194
		__asm volatile( "csrs mie, %0" :: "r"(0x880) );
	}
	#else
	{
		/* Enable external interrupts. */
		__asm volatile( "csrs mie, %0" :: "r"(0x800) );
1c002954 <xPortStartScheduler+0x3a> lui	a5,0x1
1c002956 <xPortStartScheduler+0x3c> addi	a5,a5,-2048 # 00000800 <__stack_size>
1c00295a <xPortStartScheduler+0x40> csrs	mie,a5
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/port.c:198
	}
	#endif /* ( configMTIME_BASE_ADDRESS != 0 ) && ( configMTIMECMP_BASE_ADDRESS != 0 ) */

	xPortStartFirstTask();
1c00295e <xPortStartScheduler+0x44> jal	ra,1c000d00 <xPortStartFirstTask>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/GCC/RISC-V/port.c:203

	/* Should not get here as after calling xPortStartFirstTask() only tasks
	should be executing. */
	return pdFAIL;
}
1c002962 <xPortStartScheduler+0x48> lw	ra,28(sp)
1c002964 <xPortStartScheduler+0x4a> li	a0,0
1c002966 <xPortStartScheduler+0x4c> addi	sp,sp,32
1c002968 <xPortStartScheduler+0x4e> ret
pvPortMalloc():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/MemMang/heap_3.c:59
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
1c00296a <pvPortMalloc> addi	sp,sp,-32
1c00296c <pvPortMalloc+0x2> sw	ra,28(sp)
1c00296e <pvPortMalloc+0x4> sw	s0,24(sp)
1c002970 <pvPortMalloc+0x6> sw	a0,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/MemMang/heap_3.c:62
void *pvReturn;

	vTaskSuspendAll();
1c002972 <pvPortMalloc+0x8> jal	ra,1c001a16 <vTaskSuspendAll>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/MemMang/heap_3.c:64
	{
		pvReturn = malloc( xWantedSize );
1c002976 <pvPortMalloc+0xc> lw	a0,12(sp)
1c002978 <pvPortMalloc+0xe> jal	ra,1c003908 <malloc>
1c00297c <pvPortMalloc+0x12> mv	s0,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/MemMang/heap_3.c:67
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1c00297e <pvPortMalloc+0x14> jal	ra,1c00234c <xTaskResumeAll>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/MemMang/heap_3.c:71

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
1c002982 <pvPortMalloc+0x18> bnez	s0,1c002988 <pvPortMalloc+0x1e>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/MemMang/heap_3.c:74
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1c002984 <pvPortMalloc+0x1a> jal	ra,1c003184 <vApplicationMallocFailedHook>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/MemMang/heap_3.c:80
		}
	}
	#endif

	return pvReturn;
}
1c002988 <pvPortMalloc+0x1e> lw	ra,28(sp)
1c00298a <pvPortMalloc+0x20> mv	a0,s0
1c00298c <pvPortMalloc+0x22> lw	s0,24(sp)
1c00298e <pvPortMalloc+0x24> addi	sp,sp,32
1c002990 <pvPortMalloc+0x26> ret
vPortFree():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/MemMang/heap_3.c:84
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
1c002992 <vPortFree> addi	sp,sp,-32
1c002994 <vPortFree+0x2> sw	ra,28(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/MemMang/heap_3.c:85
	if( pv )
1c002996 <vPortFree+0x4> sw	a0,12(sp)
1c002998 <vPortFree+0x6> beqz	a0,1c0029ac <vPortFree+0x1a>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/MemMang/heap_3.c:87
	{
		vTaskSuspendAll();
1c00299a <vPortFree+0x8> jal	ra,1c001a16 <vTaskSuspendAll>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/MemMang/heap_3.c:89
		{
			free( pv );
1c00299e <vPortFree+0xc> lw	a0,12(sp)
1c0029a0 <vPortFree+0xe> jal	ra,1c003914 <free>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/MemMang/heap_3.c:94
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
	}
}
1c0029a4 <vPortFree+0x12> lw	ra,28(sp)
1c0029a6 <vPortFree+0x14> addi	sp,sp,32
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/MemMang/heap_3.c:92
		( void ) xTaskResumeAll();
1c0029a8 <vPortFree+0x16> j	1c00234c <xTaskResumeAll>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/kernel/portable/MemMang/heap_3.c:94
}
1c0029ac <vPortFree+0x1a> lw	ra,28(sp)
1c0029ae <vPortFree+0x1c> addi	sp,sp,32
1c0029b0 <vPortFree+0x1e> ret
_close():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:134
}

int _close(int file)
{
	return -1;
}
1c0029b2 <_close> li	a0,-1
1c0029b4 <_close+0x2> ret
_exit():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:155
	/* there is no way to check when the udma output fifo is empty so we
	 * just wait a few cycles */
	for (volatile int i = 0; i < 1024 * 3; i++)
	    ;
#endif
	writew(exit_status | (1 << APB_SOC_STATUS_EOC_BIT),
1c0029b6 <_exit> lui	a5,0x80000
1c0029ba <_exit+0x4> or	a0,a0,a5
writew():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/arch/io.h:45
		     : "r"(val), "r"((volatile uint16_t *)addr));
}

static inline void writew(uint32_t val, uintptr_t addr)
{
	asm volatile("sw %0, 0(%1)"
1c0029bc <_exit+0x6> lui	a5,0x1a104
1c0029c0 <_exit+0xa> addi	a5,a5,160 # 1a1040a0 <__heap_l1_cluster_start+0xa104080>
1c0029c4 <_exit+0xe> sw	a0,0(a5)
_exit():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:158 (discriminator 1)
	       (uintptr_t)(PULP_APB_SOC_CTRL_ADDR + APB_SOC_CORESTATUS_OFFSET));
	for (;;)
	    asm volatile("wfi");
1c0029c6 <_exit+0x10> wfi
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:157 (discriminator 1)
	for (;;)
1c0029ca <_exit+0x14> j	1c0029c6 <_exit+0x10>
_fstat():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:175
	return -1;
}

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
1c0029cc <_fstat> lui	a5,0x2
1c0029ce <_fstat+0x2> sw	a5,4(a1)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:179
	return 0;
	// errno = -ENOSYS;
	// return -1;
}
1c0029d0 <_fstat+0x4> li	a0,0
1c0029d2 <_fstat+0x6> ret
_getpid():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:202
}

int _getpid()
{
	return 1;
}
1c0029d4 <_getpid> li	a0,1
1c0029d6 <_getpid+0x2> ret
_isatty():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:212
	return -1;
}

int _isatty(int file)
{
	return (file == STDOUT_FILENO);
1c0029d8 <_isatty> addi	a0,a0,-1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:213
}
1c0029da <_isatty+0x2> seqz	a0,a0
1c0029de <_isatty+0x6> ret
_kill():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:217

int _kill(int pid, int sig)
{
	errno = EINVAL;
1c0029e0 <_kill> li	a4,22
1c0029e2 <_kill+0x2> sw	a4,-576(gp) # 1c00919c <errno>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:219
	return -1;
}
1c0029e6 <_kill+0x6> li	a0,-1
1c0029e8 <_kill+0x8> ret
_lseek():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:230
}

off_t _lseek(int file, off_t ptr, int dir)
{
	return 0;
}
1c0029ea <_lseek> li	a0,0
1c0029ec <_lseek+0x2> ret
_read():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:252
}

ssize_t _read(int file, void *ptr, size_t len)
{
	return 0;
}
1c0029ee <_read> li	a0,0
1c0029f0 <_read+0x2> ret
_write():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:308
}

ssize_t _write(int file, const void *ptr, size_t len)
{
	/* fuse stout and stderr. remains to be seen if this is a good idea */
	if (file != STDOUT_FILENO && file != STDERR_FILENO) {
1c0029f2 <_write> addi	a0,a0,-1
1c0029f4 <_write+0x2> li	a5,1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:314
		errno = ENOSYS;
		return -1;
	}

#if CONFIG_STDIO == STDIO_FAKE
	const void *eptr = ptr + len;
1c0029f6 <_write+0x4> add	a6,a1,a2
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:308
	if (file != STDOUT_FILENO && file != STDERR_FILENO) {
1c0029fa <_write+0x8> bltu	a5,a0,1c002a10 <_write+0x1e>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:319
	while (ptr != eptr)
		writew(*(unsigned char *)(ptr++),
		       (uintptr_t)(PULP_STDOUT_ADDR + STDOUT_PUTC_OFFSET +
				   (pulp_core_id() << 3) +
				   (pulp_cluster_id() << 7)));
1c0029fe <_write+0xc> lui	a3,0x2
1c002a00 <_write+0xe> addi	a3,a3,-128 # 00001f80 <__stack_size+0x1780>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:318
				   (pulp_core_id() << 3) +
1c002a04 <_write+0x12> lui	a0,0x1a10f
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:315
	while (ptr != eptr)
1c002a08 <_write+0x16> bne	a1,a6,1c002a1c <_write+0x2a>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:320
	return len;
1c002a0c <_write+0x1a> mv	a0,a2
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:353
	/* just nop */
	return len;
#else
#error "CONFIG_STDIO is undefined"
#endif
}
1c002a0e <_write+0x1c> ret
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:309
		errno = ENOSYS;
1c002a10 <_write+0x1e> li	a4,88
1c002a14 <_write+0x22> sw	a4,-576(gp) # 1c00919c <errno>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:310
		return -1;
1c002a18 <_write+0x26> li	a0,-1
1c002a1a <_write+0x28> ret
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:316
		writew(*(unsigned char *)(ptr++),
1c002a1c <_write+0x2a> addi	a1,a1,1
1c002a1e <_write+0x2c> lbu	a7,-1(a1)
pulp_core_id():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:294
	uint32_t mhartid = csr_read(CSR_MHARTID);
1c002a22 <_write+0x30> csrr	a4,mhartid
pulp_cluster_id():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:301
	uint32_t mhartid = csr_read(CSR_MHARTID);
1c002a26 <_write+0x34> csrr	a5,mhartid
_write():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:318
				   (pulp_core_id() << 3) +
1c002a2a <_write+0x38> slli	a4,a4,0x3
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:319
				   (pulp_cluster_id() << 7)));
1c002a2c <_write+0x3a> slli	a5,a5,0x2
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:318
				   (pulp_core_id() << 3) +
1c002a2e <_write+0x3c> andi	a4,a4,255
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:319
				   (pulp_cluster_id() << 7)));
1c002a32 <_write+0x40> and	a5,a5,a3
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:318
				   (pulp_core_id() << 3) +
1c002a34 <_write+0x42> add	a4,a4,a0
1c002a36 <_write+0x44> add	a5,a5,a4
writew():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/arch/io.h:45
1c002a38 <_write+0x46> sw	a7,0(a5) # 00002000 <__stack_size+0x1800>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/arch/io.h:48
		     :
		     : "r"(val), "r"((volatile uint32_t *)addr));
}
1c002a3c <_write+0x4a> j	1c002a08 <_write+0x16>
_sbrk():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:368
}

void *_sbrk(ptrdiff_t incr)
{
	/* TODO: Check for stack collision by reading sp */
	char *old_brk = brk;
1c002a3e <_sbrk> lui	a5,0x1c009
1c002a42 <_sbrk+0x4> addi	a5,a5,-964 # 1c008c3c <brk>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:366
{
1c002a46 <_sbrk+0x8> mv	a4,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:368
	char *old_brk = brk;
1c002a48 <_sbrk+0xa> lw	a0,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:370

	if (brk + incr >= __heap_end) {
1c002a4a <_sbrk+0xc> lui	a3,0x1c019
1c002a4e <_sbrk+0x10> addi	a3,a3,432 # 1c0191b0 <__heap_end>
1c002a52 <_sbrk+0x14> add	a4,a4,a0
1c002a54 <_sbrk+0x16> bltu	a4,a3,1c002a62 <_sbrk+0x24>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:371
		errno = ENOMEM;
1c002a58 <_sbrk+0x1a> li	a4,12
1c002a5a <_sbrk+0x1c> sw	a4,-576(gp) # 1c00919c <errno>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:372
		return (void *)-1;
1c002a5e <_sbrk+0x20> li	a0,-1
1c002a60 <_sbrk+0x22> ret
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:375
	}

	brk += incr;
1c002a62 <_sbrk+0x24> sw	a4,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:377
	return old_brk;
}
1c002a64 <_sbrk+0x26> ret
__malloc_lock():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:384
void __malloc_lock(struct _reent *p)
{
	/* Make sure no mallocs inside ISRs */
	/* configASSERT(!xPortIsInsideInterrupt()); */
#ifdef CONFIG_FREERTOS_KERNEL
	vTaskSuspendAll();
1c002a66 <__malloc_lock> j	1c001a16 <vTaskSuspendAll>
__malloc_unlock():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/syscalls.c:391
}

void __malloc_unlock(struct _reent *p)
{
#ifdef CONFIG_FREERTOS_KERNEL
	(void)xTaskResumeAll();
1c002a6a <__malloc_unlock> j	1c00234c <xTaskResumeAll>
pi_l2_malloc():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/libc/pulp_malloc.c:26

#include <stdlib.h>

void *pi_l2_malloc(int size)
{
	return malloc(size);
1c002a6e <pi_l2_malloc> j	1c003908 <malloc>
timer_irq_handler():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/system.c:136
	system_core_clock_update();
	return system_core_clock;
}

void timer_irq_handler(void)
{
1c002a72 <timer_irq_handler> addi	sp,sp,-16
1c002a74 <timer_irq_handler+0x2> sw	ra,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/system.c:139
#warning requires critical section if interrupt nesting is used.

	if (xTaskIncrementTick() != 0) {
1c002a76 <timer_irq_handler+0x4> jal	ra,1c001a28 <xTaskIncrementTick>
1c002a7a <timer_irq_handler+0x8> beqz	a0,1c002a84 <timer_irq_handler+0x12>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/system.c:142
		vTaskSwitchContext();
	}
}
1c002a7c <timer_irq_handler+0xa> lw	ra,12(sp)
1c002a7e <timer_irq_handler+0xc> addi	sp,sp,16
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/system.c:140
		vTaskSwitchContext();
1c002a80 <timer_irq_handler+0xe> j	1c001b76 <vTaskSwitchContext>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/system.c:142
}
1c002a84 <timer_irq_handler+0x12> lw	ra,12(sp)
1c002a86 <timer_irq_handler+0x14> addi	sp,sp,16
1c002a88 <timer_irq_handler+0x16> ret
system_init():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/system.c:73
{
1c002a8a <system_init> addi	sp,sp,-16
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/system.c:76
		pi_fll_init(i, 0);
1c002a8c <system_init+0x2> li	a1,0
1c002a8e <system_init+0x4> li	a0,0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/system.c:73
{
1c002a90 <system_init+0x6> sw	ra,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/system.c:76
		pi_fll_init(i, 0);
1c002a92 <system_init+0x8> jal	ra,1c003260 <pi_fll_init>
1c002a96 <system_init+0xc> li	a1,0
1c002a98 <system_init+0xe> li	a0,1
1c002a9a <system_init+0x10> jal	ra,1c003260 <pi_fll_init>
1c002a9e <system_init+0x14> li	a1,0
1c002aa0 <system_init+0x16> li	a0,2
1c002aa2 <system_init+0x18> jal	ra,1c003260 <pi_fll_init>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/system.c:80
	pulp_irq_init();
1c002aa6 <system_init+0x1c> jal	ra,1c00333c <pulp_irq_init>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/system.c:88
	isr_table[0xa] = timer_irq_handler;
1c002aaa <system_init+0x20> lui	a4,0x1c003
1c002aae <system_init+0x24> addi	a5,gp,-1636 # 1c008d78 <isr_table>
1c002ab2 <system_init+0x28> addi	a4,a4,-1422 # 1c002a72 <timer_irq_handler>
1c002ab6 <system_init+0x2c> sw	a4,40(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/system.c:89
	isr_table[0x1a] = fc_soc_event_handler; // 26
1c002ab8 <system_init+0x2e> lui	a4,0x1c001
1c002abc <system_init+0x32> addi	a4,a4,-446 # 1c000e42 <fc_soc_event_handler>
1c002ac0 <system_init+0x36> sw	a4,104(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/system.c:94
	soc_eu_event_init();
1c002ac2 <system_init+0x38> jal	ra,1c00334a <soc_eu_event_init>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/system.c:98
	pi_fc_event_handler_init(26); /* TODO: FIX THIS */
1c002ac6 <system_init+0x3c> li	a0,26
1c002ac8 <system_init+0x3e> jal	ra,1c003384 <pi_fc_event_handler_init>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/system.c:122
}
1c002acc <system_init+0x42> lw	ra,12(sp)
1c002ace <system_init+0x44> addi	sp,sp,16
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/system.c:102
	irq_clint_global_enable();
1c002ad0 <system_init+0x46> j	1c003336 <irq_clint_global_enable>
system_core_clock_update():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/system.c:125
{
1c002ad4 <system_core_clock_update> addi	sp,sp,-16
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/system.c:126
	system_core_clock = pi_fll_get_frequency(FLL_SOC, 0);
1c002ad6 <system_core_clock_update+0x2> li	a1,0
1c002ad8 <system_core_clock_update+0x4> li	a0,0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/system.c:125
{
1c002ada <system_core_clock_update+0x6> sw	ra,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/system.c:126
	system_core_clock = pi_fll_get_frequency(FLL_SOC, 0);
1c002adc <system_core_clock_update+0x8> jal	ra,1c00322c <pi_fll_get_frequency>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/system.c:127
}
1c002ae0 <system_core_clock_update+0xc> lw	ra,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/system.c:126
	system_core_clock = pi_fll_get_frequency(FLL_SOC, 0);
1c002ae2 <system_core_clock_update+0xe> lui	a5,0x1c009
1c002ae6 <system_core_clock_update+0x12> sw	a0,-960(a5) # 1c008c40 <system_core_clock>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/system.c:127
}
1c002aea <system_core_clock_update+0x16> addi	sp,sp,16
1c002aec <system_core_clock_update+0x18> ret
vPortSetupTimerInterrupt():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/system.c:156
		;
#endif
}

void vPortSetupTimerInterrupt(void)
{
1c002aee <vPortSetupTimerInterrupt> addi	sp,sp,-16
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/system.c:161
	extern int timer_irq_init(uint32_t ticks);

	/* No CLINT so use the PULP timer to generate the tick interrupt. */
	/* TODO: configKERNEL_INTERRUPT_PRIORITY - 1 ? */
	timer_irq_init(ARCHI_REF_CLOCK / configTICK_RATE_HZ);
1c002af0 <vPortSetupTimerInterrupt+0x2> li	a0,32
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/system.c:156
{
1c002af4 <vPortSetupTimerInterrupt+0x6> sw	ra,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/system.c:161
	timer_irq_init(ARCHI_REF_CLOCK / configTICK_RATE_HZ);
1c002af6 <vPortSetupTimerInterrupt+0x8> jal	ra,1c00330e <timer_irq_init>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/system.c:164
	/* TODO: allow setting interrupt priority (to super high(?)) */
	irq_enable(IRQ_FC_EVT_TIMER0_LO);
}
1c002afa <vPortSetupTimerInterrupt+0xc> lw	ra,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/system.c:163
	irq_enable(IRQ_FC_EVT_TIMER0_LO);
1c002afc <vPortSetupTimerInterrupt+0xe> li	a0,1024
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/system.c:164
}
1c002b00 <vPortSetupTimerInterrupt+0x12> addi	sp,sp,16
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/system.c:163
	irq_enable(IRQ_FC_EVT_TIMER0_LO);
1c002b02 <vPortSetupTimerInterrupt+0x14> j	1c00332a <irq_enable>
vSystemIrqHandler():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/system.c:169

void vSystemIrqHandler(uint32_t mcause)
{
	extern void (*isr_table[32])(void);
	isr_table[mcause & 0x1f]();
1c002b06 <vSystemIrqHandler> andi	a0,a0,31
1c002b08 <vSystemIrqHandler+0x2> slli	a5,a0,0x2
1c002b0c <vSystemIrqHandler+0x6> addi	a0,gp,-1636 # 1c008d78 <isr_table>
1c002b10 <vSystemIrqHandler+0xa> add	a0,a0,a5
1c002b12 <vSystemIrqHandler+0xc> lw	a5,0(a0)
1c002b14 <vSystemIrqHandler+0xe> jr	a5
pi_spi_conf_init():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../pulpos/pulp/drivers/spim/spim-v3.c:83

void pi_spi_conf_init(struct pi_spi_conf *conf)
{
    conf->wordsize = PI_SPI_WORDSIZE_8;
    conf->big_endian = 0;
    conf->max_baudrate = 10000000;
1c002b16 <pi_spi_conf_init> lui	a5,0x989
1c002b1a <pi_spi_conf_init+0x4> addi	a5,a5,1664 # 00989680 <__heap_l2_shared_size+0x923050>
1c002b1e <pi_spi_conf_init+0x8> sw	a5,0(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../pulpos/pulp/drivers/spim/spim-v3.c:84
    conf->cs = -1;
1c002b20 <pi_spi_conf_init+0xa> li	a5,255
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../pulpos/pulp/drivers/spim/spim-v3.c:81
    conf->wordsize = PI_SPI_WORDSIZE_8;
1c002b24 <pi_spi_conf_init+0xe> sh	zero,4(a0) # 1a10f004 <__heap_l1_cluster_start+0xa10efe4>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../pulpos/pulp/drivers/spim/spim-v3.c:86
    conf->itf = 0;
    conf->polarity = 0;
1c002b28 <pi_spi_conf_init+0x12> sw	zero,8(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../pulpos/pulp/drivers/spim/spim-v3.c:87
    conf->phase = 0;
1c002b2c <pi_spi_conf_init+0x16> sw	zero,12(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../pulpos/pulp/drivers/spim/spim-v3.c:84
    conf->cs = -1;
1c002b30 <pi_spi_conf_init+0x1a> sh	a5,16(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../pulpos/pulp/drivers/spim/spim-v3.c:88
}
1c002b34 <pi_spi_conf_init+0x1e> ret
pi_spi_open():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../pulpos/pulp/drivers/spim/spim-v3.c:93

int pi_spi_open(struct pi_device *device)
{
    int status = -1;
    status = __pi_spi_open((struct spim_cs_data **)(&device->data), (struct pi_spi_conf *)device->config);
1c002b36 <pi_spi_open> lw	a1,4(a0)
1c002b38 <pi_spi_open+0x2> addi	a0,a0,8
1c002b3a <pi_spi_open+0x4> j	1c002ecc <__pi_spi_open>
pi_spi_close():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../pulpos/pulp/drivers/spim/spim-v3.c:99
    return status;
}

void pi_spi_close(struct pi_device *device)
{
    __pi_spi_close((struct spim_cs_data *)(device->data), (struct pi_spi_conf *)device->config);
1c002b3c <pi_spi_close> lw	a1,4(a0)
1c002b3e <pi_spi_close+0x2> lw	a0,8(a0)
1c002b40 <pi_spi_close+0x4> j	1c003050 <__pi_spi_close>
pi_spi_send_async():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../pulpos/pulp/drivers/spim/spim-v3.c:119
}

void pi_spi_send_async(struct pi_device *device, void *data, size_t len, pi_spi_flags_e flag, pi_task_t *task)
{
    DEBUG_PRINTF("...start -> pi_spi_send_async...\n");
    __pi_spi_send_async(device->data, data, len, flag, task);
1c002b42 <pi_spi_send_async> lw	a0,8(a0)
1c002b44 <pi_spi_send_async+0x2> j	1c002dc6 <__pi_spi_send_async>
pi_spi_send():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../pulpos/pulp/drivers/spim/spim-v3.c:108
{
1c002b46 <pi_spi_send> addi	sp,sp,-112
1c002b48 <pi_spi_send+0x2> sw	s0,104(sp)
1c002b4a <pi_spi_send+0x4> mv	s0,a0
pi_task_block():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/pmsis_task.h:86
 */
void __pi_task_destroy(pi_task_t *task);

static inline pi_task_t *pi_task_block(pi_task_t *task)
{
	return __pi_task_block(task);
1c002b4c <pi_spi_send+0x6> addi	a0,sp,24
pi_spi_send():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../pulpos/pulp/drivers/spim/spim-v3.c:108
1c002b4e <pi_spi_send+0x8> sw	ra,108(sp)
1c002b50 <pi_spi_send+0xa> sw	a1,12(sp)
1c002b52 <pi_spi_send+0xc> sw	a2,8(sp)
1c002b54 <pi_spi_send+0xe> sw	a3,4(sp)
pi_task_block():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/pmsis_task.h:86
1c002b56 <pi_spi_send+0x10> jal	ra,1c00343a <__pi_task_block>
pi_spi_send():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../pulpos/pulp/drivers/spim/spim-v3.c:111
    pi_spi_send_async(device, data, len, flag, &task_block);
1c002b5a <pi_spi_send+0x14> lw	a3,4(sp)
1c002b5c <pi_spi_send+0x16> lw	a2,8(sp)
1c002b5e <pi_spi_send+0x18> lw	a1,12(sp)
1c002b60 <pi_spi_send+0x1a> addi	a4,sp,24
1c002b62 <pi_spi_send+0x1c> mv	a0,s0
1c002b64 <pi_spi_send+0x1e> jal	1c002b42 <pi_spi_send_async>
pi_task_wait_on():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/pmsis_task.h:130
 * \note The notification event is released just before returning from this call
 *       and must be reinitialized before it can be re-used.
 */
static inline void pi_task_wait_on(pi_task_t *task)
{
	__pi_task_wait_on(task);
1c002b66 <pi_spi_send+0x20> addi	a0,sp,24
1c002b68 <pi_spi_send+0x22> jal	ra,1c0034b6 <__pi_task_wait_on>
pi_task_destroy():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/pmsis_task.h:149
	__pi_task_push(task);
}

static inline void pi_task_destroy(pi_task_t *task)
{
	__pi_task_destroy(task);
1c002b6c <pi_spi_send+0x26> addi	a0,sp,24
1c002b6e <pi_spi_send+0x28> jal	ra,1c003482 <__pi_task_destroy>
pi_spi_send():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../pulpos/pulp/drivers/spim/spim-v3.c:114
}
1c002b72 <pi_spi_send+0x2c> lw	ra,108(sp)
1c002b74 <pi_spi_send+0x2e> lw	s0,104(sp)
1c002b76 <pi_spi_send+0x30> addi	sp,sp,112
1c002b78 <pi_spi_send+0x32> ret
pi_spi_receive_async():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../pulpos/pulp/drivers/spim/spim-v3.c:143

void pi_spi_receive_async(struct pi_device *device, void *data, size_t len,
                          pi_spi_flags_e flag, pi_task_t *task)
{
    DEBUG_PRINTF("...start -> pi_spi_receive_async...\n");
    __pi_spi_receive_async(device->data, data, len, flag, task);
1c002b7a <pi_spi_receive_async> lw	a0,8(a0)
1c002b7c <pi_spi_receive_async+0x2> j	1c002ca0 <__pi_spi_receive_async>
pi_spi_receive():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../pulpos/pulp/drivers/spim/spim-v3.c:124
{
1c002b7e <pi_spi_receive> addi	sp,sp,-112
1c002b80 <pi_spi_receive+0x2> sw	s0,104(sp)
1c002b82 <pi_spi_receive+0x4> mv	s0,a0
pi_task_block():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/pmsis_task.h:86
	return __pi_task_block(task);
1c002b84 <pi_spi_receive+0x6> addi	a0,sp,24
pi_spi_receive():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../pulpos/pulp/drivers/spim/spim-v3.c:124
1c002b86 <pi_spi_receive+0x8> sw	ra,108(sp)
1c002b88 <pi_spi_receive+0xa> sw	a1,12(sp)
1c002b8a <pi_spi_receive+0xc> sw	a2,8(sp)
1c002b8c <pi_spi_receive+0xe> sw	a3,4(sp)
pi_task_block():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/pmsis_task.h:86
1c002b8e <pi_spi_receive+0x10> jal	ra,1c00343a <__pi_task_block>
pi_spi_receive():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../pulpos/pulp/drivers/spim/spim-v3.c:129
    pi_spi_receive_async(device, data, len, flag, &task_block);
1c002b92 <pi_spi_receive+0x14> lw	a3,4(sp)
1c002b94 <pi_spi_receive+0x16> lw	a2,8(sp)
1c002b96 <pi_spi_receive+0x18> lw	a1,12(sp)
1c002b98 <pi_spi_receive+0x1a> addi	a4,sp,24
1c002b9a <pi_spi_receive+0x1c> mv	a0,s0
1c002b9c <pi_spi_receive+0x1e> jal	1c002b7a <pi_spi_receive_async>
pi_task_wait_on():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/pmsis_task.h:130
	__pi_task_wait_on(task);
1c002b9e <pi_spi_receive+0x20> addi	a0,sp,24
1c002ba0 <pi_spi_receive+0x22> jal	ra,1c0034b6 <__pi_task_wait_on>
pi_task_destroy():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/pmsis_task.h:149
	__pi_task_destroy(task);
1c002ba4 <pi_spi_receive+0x26> addi	a0,sp,24
1c002ba6 <pi_spi_receive+0x28> jal	ra,1c003482 <__pi_task_destroy>
pi_spi_receive():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../pulpos/pulp/drivers/spim/spim-v3.c:137
}
1c002baa <pi_spi_receive+0x2c> lw	ra,108(sp)
1c002bac <pi_spi_receive+0x2e> lw	s0,104(sp)
1c002bae <pi_spi_receive+0x30> addi	sp,sp,112
1c002bb0 <pi_spi_receive+0x32> ret
__disable_irq():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/arch/riscv.h:177
  \details Disables IRQ interrupts by clearing the MPIE-bit in the CPSR.
	   Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) static inline uint32_t __disable_irq(void)
{
	uint32_t val = csr_read_clear(MSTATUS_ADDR, BIT(MSTATUS_MIE_Pos));
1c002bb2 <deactive_irq> csrrci	a0,mstatus,8
deactive_irq():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:43
    return hal_irq_disable();
#endif
#ifdef USE_FREERTOS_TEST
    return __disable_irq();
#endif
}
1c002bb6 <deactive_irq+0x4> ret
__restore_irq():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/arch/riscv.h:157
	csr_write(MSTATUS_ADDR, irq);
1c002bb8 <active_irq> csrw	mstatus,a0
active_irq():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:53
#endif 
#ifdef USE_FREERTOS_TEST
    __restore_irq(irq);
#endif 
 
}
1c002bbc <active_irq+0x4> ret
__disable_irq():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/arch/riscv.h:177
	uint32_t val = csr_read_clear(MSTATUS_ADDR, BIT(MSTATUS_MIE_Pos));
1c002bbe <__pi_spim_drv_fifo_enqueue> csrrci	a4,mstatus,8
__pi_spim_drv_fifo_enqueue():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:69
{
	uint32_t irq = deactive_irq();
	struct spim_driver_data *drv_data = cs_data->drv_data;
	/* Callback args. */
	end_task->data[0] = (uintptr_t)cs_data;
	end_task->data[1] = (uintptr_t)transfer->data;
1c002bc2 <__pi_spim_drv_fifo_enqueue+0x4> lw	a3,4(a1)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:66
	struct spim_driver_data *drv_data = cs_data->drv_data;
1c002bc4 <__pi_spim_drv_fifo_enqueue+0x6> lw	a5,4(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:68
	end_task->data[0] = (uintptr_t)cs_data;
1c002bc6 <__pi_spim_drv_fifo_enqueue+0x8> sw	a0,20(a2)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:69
	end_task->data[1] = (uintptr_t)transfer->data;
1c002bc8 <__pi_spim_drv_fifo_enqueue+0xa> sw	a3,24(a2)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:70
	end_task->data[2] = (uintptr_t)transfer->len;
1c002bca <__pi_spim_drv_fifo_enqueue+0xc> lw	a3,8(a1)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:76
	end_task->data[3] = (uintptr_t)transfer->flags;
	end_task->data[4] = (uintptr_t)end_task;
	end_task->data[5] = (uintptr_t)transfer->is_send;
	end_task->next = NULL;
	/* Enqueue transfer in drv fifo. */
	if (drv_data->drv_fifo->fifo_head == NULL)
1c002bcc <__pi_spim_drv_fifo_enqueue+0xe> lw	a5,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:70
	end_task->data[2] = (uintptr_t)transfer->len;
1c002bce <__pi_spim_drv_fifo_enqueue+0x10> sw	a3,28(a2)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:71
	end_task->data[3] = (uintptr_t)transfer->flags;
1c002bd0 <__pi_spim_drv_fifo_enqueue+0x12> lw	a3,0(a1)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:72
	end_task->data[4] = (uintptr_t)end_task;
1c002bd2 <__pi_spim_drv_fifo_enqueue+0x14> sw	a2,36(a2)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:71
	end_task->data[3] = (uintptr_t)transfer->flags;
1c002bd4 <__pi_spim_drv_fifo_enqueue+0x16> sw	a3,32(a2)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:73
	end_task->data[5] = (uintptr_t)transfer->is_send;
1c002bd6 <__pi_spim_drv_fifo_enqueue+0x18> lw	a3,20(a1)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:74
	end_task->next = NULL;
1c002bd8 <__pi_spim_drv_fifo_enqueue+0x1a> sw	zero,64(a2)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:73
	end_task->data[5] = (uintptr_t)transfer->is_send;
1c002bdc <__pi_spim_drv_fifo_enqueue+0x1e> sw	a3,40(a2)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:76
	if (drv_data->drv_fifo->fifo_head == NULL)
1c002bde <__pi_spim_drv_fifo_enqueue+0x20> lw	a3,0(a5)
1c002be0 <__pi_spim_drv_fifo_enqueue+0x22> bnez	a3,1c002bee <__pi_spim_drv_fifo_enqueue+0x30>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:79
	{
		/* Empty fifo. */
		drv_data->drv_fifo->fifo_head = end_task;
1c002be2 <__pi_spim_drv_fifo_enqueue+0x24> sw	a2,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:86
	}
	else
	{
		/* Enqueue to tail. */
		drv_data->drv_fifo->fifo_tail->next = end_task;
		drv_data->drv_fifo->fifo_tail =
1c002be4 <__pi_spim_drv_fifo_enqueue+0x26> sw	a2,4(a5)
__restore_irq():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/arch/riscv.h:157
	csr_write(MSTATUS_ADDR, irq);
1c002be6 <__pi_spim_drv_fifo_enqueue+0x28> csrw	mstatus,a4
__pi_spim_drv_fifo_enqueue():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:91
			drv_data->drv_fifo->fifo_tail->next;
	}
	active_irq(irq);
	return 0;
}
1c002bea <__pi_spim_drv_fifo_enqueue+0x2c> li	a0,0
1c002bec <__pi_spim_drv_fifo_enqueue+0x2e> ret
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:85
		drv_data->drv_fifo->fifo_tail->next = end_task;
1c002bee <__pi_spim_drv_fifo_enqueue+0x30> lw	a3,4(a5)
1c002bf0 <__pi_spim_drv_fifo_enqueue+0x32> sw	a2,64(a3)
1c002bf2 <__pi_spim_drv_fifo_enqueue+0x34> j	1c002be4 <__pi_spim_drv_fifo_enqueue+0x26>
__pi_spim_drv_fifo_pop():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:100
	// DBG_PRINTF("%s:%s:%d: \n", __FILE__, __func__, __LINE__);
	pi_task_t *task_return = NULL;
	// clean the value in the position 7 of regiter 0x300
	// irq = 1100010000000
	int check_300 = 0;
	asm volatile("csrr %0, 0x300"
1c002bf4 <__pi_spim_drv_fifo_pop> csrr	a5,mstatus
__disable_irq():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/arch/riscv.h:177
	uint32_t val = csr_read_clear(MSTATUS_ADDR, BIT(MSTATUS_MIE_Pos));
1c002bf8 <__pi_spim_drv_fifo_pop+0x4> csrrci	a3,mstatus,8
__pi_spim_drv_fifo_pop():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:103
				 : "=r"(check_300));
	uint32_t irq = deactive_irq();
	if (data->drv_fifo->fifo_head != NULL)
1c002bfc <__pi_spim_drv_fifo_pop+0x8> lw	a5,0(a0)
1c002bfe <__pi_spim_drv_fifo_pop+0xa> lw	a0,0(a5)
1c002c00 <__pi_spim_drv_fifo_pop+0xc> beqz	a0,1c002c0c <__pi_spim_drv_fifo_pop+0x18>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:106
	{
		task_return = data->drv_fifo->fifo_head;
		data->drv_fifo->fifo_head = data->drv_fifo->fifo_head->next;
1c002c02 <__pi_spim_drv_fifo_pop+0xe> lw	a4,64(a0)
1c002c04 <__pi_spim_drv_fifo_pop+0x10> sw	a4,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:107
		if (data->drv_fifo->fifo_head == NULL)
1c002c06 <__pi_spim_drv_fifo_pop+0x12> bnez	a4,1c002c0c <__pi_spim_drv_fifo_pop+0x18>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:109
		{
			data->drv_fifo->fifo_tail = NULL;
1c002c08 <__pi_spim_drv_fifo_pop+0x14> sw	zero,4(a5)
__restore_irq():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/arch/riscv.h:157
	csr_write(MSTATUS_ADDR, irq);
1c002c0c <__pi_spim_drv_fifo_pop+0x18> csrw	mstatus,a3
__pi_spim_drv_fifo_pop():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:115
		}
	}
	// write in the 0x300 register
	active_irq(irq);
	return task_return;
}
1c002c10 <__pi_spim_drv_fifo_pop+0x1c> ret
__pi_spim_get_cs_data():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:119

struct spim_cs_data *__pi_spim_get_cs_data(struct spim_driver_data *drv_data, int cs)
{
	struct spim_cs_data *cs_cur = drv_data->cs_list;
1c002c12 <__pi_spim_get_cs_data> lw	a0,4(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:120
	while (cs_cur != NULL && cs_cur->cs != cs)
1c002c14 <__pi_spim_get_cs_data+0x2> beqz	a0,1c002c1e <__pi_spim_get_cs_data+0xc>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:120 (discriminator 1)
1c002c16 <__pi_spim_get_cs_data+0x4> lbu	a5,56(a0)
1c002c1a <__pi_spim_get_cs_data+0x8> bne	a5,a1,1c002c20 <__pi_spim_get_cs_data+0xe>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:125
	{
		cs_cur = cs_cur->next;
	}
	return cs_cur;
}
1c002c1e <__pi_spim_get_cs_data+0xc> ret
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:122
		cs_cur = cs_cur->next;
1c002c20 <__pi_spim_get_cs_data+0xe> lw	a0,0(a0)
1c002c22 <__pi_spim_get_cs_data+0x10> j	1c002c14 <__pi_spim_get_cs_data+0x2>
__pi_spim_cs_data_del():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:130

void __pi_spim_cs_data_del(struct spim_driver_data *drv_data,
										 int cs)
{
	struct spim_cs_data *cs_cur = drv_data->cs_list;
1c002c24 <__pi_spim_cs_data_del> lw	a5,4(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:131
	struct spim_cs_data *cs_prev = cs_cur;
1c002c26 <__pi_spim_cs_data_del+0x2> mv	a4,a5
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:132
	while (cs_cur != NULL && cs_cur->cs != cs)
1c002c28 <__pi_spim_cs_data_del+0x4> beqz	a5,1c002c3a <__pi_spim_cs_data_del+0x16>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:132 (discriminator 1)
1c002c2a <__pi_spim_cs_data_del+0x6> lbu	a2,56(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:135 (discriminator 1)
	{
		cs_prev = cs_cur;
		cs_cur = cs_cur->next;
1c002c2e <__pi_spim_cs_data_del+0xa> lw	a3,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:132 (discriminator 1)
	while (cs_cur != NULL && cs_cur->cs != cs)
1c002c30 <__pi_spim_cs_data_del+0xc> bne	a2,a1,1c002c3c <__pi_spim_cs_data_del+0x18>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:139
	}
	if (cs_cur)
	{
		cs_prev->next = cs_cur->next;
1c002c34 <__pi_spim_cs_data_del+0x10> sw	a3,0(a4)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:140
		cs_cur->next = NULL;
1c002c36 <__pi_spim_cs_data_del+0x12> sw	zero,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:142
	}
}
1c002c3a <__pi_spim_cs_data_del+0x16> ret
1c002c3c <__pi_spim_cs_data_del+0x18> mv	a4,a5
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:135
		cs_cur = cs_cur->next;
1c002c3e <__pi_spim_cs_data_del+0x1a> mv	a5,a3
1c002c40 <__pi_spim_cs_data_del+0x1c> j	1c002c28 <__pi_spim_cs_data_del+0x4>
__pi_spim_cs_data_add():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:148

void __pi_spim_cs_data_add(struct spim_driver_data *drv_data, struct spim_cs_data *cs_data)
{
	// head insert, most recently allocated should be most recently used
	cs_data->drv_data = drv_data;
	cs_data->next = drv_data->cs_list;
1c002c42 <__pi_spim_cs_data_add> lw	a5,4(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:147
	cs_data->drv_data = drv_data;
1c002c44 <__pi_spim_cs_data_add+0x2> sw	a0,4(a1)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:148
	cs_data->next = drv_data->cs_list;
1c002c46 <__pi_spim_cs_data_add+0x4> sw	a5,0(a1)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:149
}
1c002c48 <__pi_spim_cs_data_add+0x6> ret
__pi_spi_clk_div_get():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:152

uint32_t __pi_spi_clk_div_get(uint32_t spi_freq)
{
1c002c4a <__pi_spi_clk_div_get> addi	sp,sp,-16
1c002c4c <__pi_spi_clk_div_get+0x2> sw	s0,8(sp)
1c002c4e <__pi_spi_clk_div_get+0x4> mv	s0,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:153
	uint32_t periph_freq = pi_freq_get(PI_FREQ_DOMAIN_PERIPH);
1c002c50 <__pi_spi_clk_div_get+0x6> li	a0,2
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:152
{
1c002c52 <__pi_spi_clk_div_get+0x8> sw	ra,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:153
	uint32_t periph_freq = pi_freq_get(PI_FREQ_DOMAIN_PERIPH);
1c002c54 <__pi_spi_clk_div_get+0xa> jal	ra,1c0032ee <pi_freq_get>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:154
	if (spi_freq < periph_freq)
1c002c58 <__pi_spi_clk_div_get+0xe> bgeu	s0,a0,1c002c78 <__pi_spi_clk_div_get+0x2e>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:157
	{
		uint32_t clk_div = 0;
		clk_div = (periph_freq + spi_freq - 1) / spi_freq;
1c002c5c <__pi_spi_clk_div_get+0x12> addi	a5,s0,-1
1c002c60 <__pi_spi_clk_div_get+0x16> add	a5,a5,a0
1c002c62 <__pi_spi_clk_div_get+0x18> divu	a0,a5,s0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:158
		if (clk_div & 1)
1c002c66 <__pi_spi_clk_div_get+0x1c> andi	a5,a0,1
1c002c6a <__pi_spi_clk_div_get+0x20> beqz	a5,1c002c6e <__pi_spi_clk_div_get+0x24>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:160
		{
			clk_div += 1;
1c002c6c <__pi_spi_clk_div_get+0x22> addi	a0,a0,1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:165
		}
		/* The SPIM always divide by 2 once we activate the divider,
	   thus increase by 1 in case it is even to not go above the max
	   frequency. */
		clk_div = clk_div >> 1;
1c002c6e <__pi_spi_clk_div_get+0x24> srli	a0,a0,0x1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:169
		return clk_div;
	}
	return 0;
1c002c70 <__pi_spi_clk_div_get+0x26> lw	ra,12(sp)
1c002c72 <__pi_spi_clk_div_get+0x28> lw	s0,8(sp)
1c002c74 <__pi_spi_clk_div_get+0x2a> addi	sp,sp,16
1c002c76 <__pi_spi_clk_div_get+0x2c> ret
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/../common_function/common_file_spi/src/common_spi.c:168
	return 0;
1c002c78 <__pi_spi_clk_div_get+0x2e> li	a0,0
1c002c7a <__pi_spi_clk_div_get+0x30> j	1c002c70 <__pi_spi_clk_div_get+0x26>
hal_soc_eu_clear_fc_mask():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/soc_eu.h:258
			reg_offset);
}

static inline void hal_soc_eu_clear_fc_mask(int evt)
{
	if (evt >= 256 || evt < 0)
1c002c7c <hal_soc_eu_clear_fc_mask> li	a5,255
1c002c80 <hal_soc_eu_clear_fc_mask+0x4> bltu	a5,a0,1c002c9e <hal_soc_eu_clear_fc_mask+0x22>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/soc_eu.h:262
		return;

	int shift = evt % 32;
	uint32_t reg_offset = (uint32_t)evt / 32 * 4;
1c002c84 <hal_soc_eu_clear_fc_mask+0x8> srli	a5,a0,0x5
soc_eu_fc_read():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/soc_eu.h:200
	return readw((uintptr_t)(SOC_EU_ADDR + SOC_FC_MASK0_OFFSET + reg));
1c002c88 <hal_soc_eu_clear_fc_mask+0xc> lui	a4,0x1a106
1c002c8c <hal_soc_eu_clear_fc_mask+0x10> addi	a4,a4,4
hal_soc_eu_clear_fc_mask():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/soc_eu.h:262
	uint32_t reg_offset = (uint32_t)evt / 32 * 4;
1c002c8e <hal_soc_eu_clear_fc_mask+0x12> slli	a5,a5,0x2
soc_eu_fc_read():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/soc_eu.h:200
	return readw((uintptr_t)(SOC_EU_ADDR + SOC_FC_MASK0_OFFSET + reg));
1c002c90 <hal_soc_eu_clear_fc_mask+0x14> add	a5,a5,a4
readw():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/arch/io.h:82

static inline uint32_t readw(const uintptr_t addr)
{
	uint32_t val;

	asm volatile("lw %0, 0(%1)"
1c002c92 <hal_soc_eu_clear_fc_mask+0x16> lw	a3,0(a5)
hal_soc_eu_clear_fc_mask():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/soc_eu.h:263
	soc_eu_fc_write(soc_eu_fc_read(reg_offset) | (1u << shift), reg_offset);
1c002c94 <hal_soc_eu_clear_fc_mask+0x18> li	a4,1
1c002c96 <hal_soc_eu_clear_fc_mask+0x1a> sll	a0,a4,a0
1c002c9a <hal_soc_eu_clear_fc_mask+0x1e> or	a0,a0,a3
writew():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/arch/io.h:45
	asm volatile("sw %0, 0(%1)"
1c002c9c <hal_soc_eu_clear_fc_mask+0x20> sw	a0,0(a5)
hal_soc_eu_clear_fc_mask():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/soc_eu.h:264
}
1c002c9e <hal_soc_eu_clear_fc_mask+0x22> ret
__pi_spi_receive_async():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:43
/**================================================================================================
 **                                         FUNCTION
 *================================================================================================**/
void __pi_spi_receive_async(struct spim_cs_data *cs_data, void *data, size_t len,
			    pi_spi_flags_e flags, pi_task_t *task)
{
1c002ca0 <__pi_spi_receive_async> addi	sp,sp,-96
1c002ca2 <__pi_spi_receive_async+0x2> sw	s6,64(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:46
	DBG_PRINTF("...start -> __pi_spi_receive_async...\n");
	// SPIM_CS_DATA_GET_DRV_DATA(cs_data) = (cs_data->drv_data)
	struct spim_driver_data *drv_data = SPIM_CS_DATA_GET_DRV_DATA(cs_data);
1c002ca4 <__pi_spi_receive_async+0x4> lw	s6,4(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:43
{
1c002ca8 <__pi_spi_receive_async+0x8> sw	s2,80(sp)
1c002caa <__pi_spi_receive_async+0xa> sw	s7,60(sp)
1c002cac <__pi_spi_receive_async+0xc> sw	ra,92(sp)
1c002cae <__pi_spi_receive_async+0xe> sw	s0,88(sp)
1c002cb0 <__pi_spi_receive_async+0x10> sw	s1,84(sp)
1c002cb2 <__pi_spi_receive_async+0x12> sw	s3,76(sp)
1c002cb4 <__pi_spi_receive_async+0x14> sw	s4,72(sp)
1c002cb6 <__pi_spi_receive_async+0x16> sw	s5,68(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:60
		   __FILE__, __func__, __LINE__, system_core_clock_get(), cs_data->max_baudrate,
		   system_core_clock_get() / cs_data->max_baudrate, cfg, qspi);

	int buffer_size = (len + 7) >> 3;

	if (len > 8192 * 8) {
1c002cb8 <__pi_spi_receive_async+0x18> lui	a5,0x10
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:51
	int device_id = drv_data->device_id;
1c002cba <__pi_spi_receive_async+0x1a> lbu	s1,20(s6)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:52
	uint32_t cfg = cs_data->cfg;
1c002cbe <__pi_spi_receive_async+0x1e> lw	s7,8(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:43
{
1c002cc2 <__pi_spi_receive_async+0x22> mv	s2,a2
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:60
	if (len > 8192 * 8) {
1c002cc4 <__pi_spi_receive_async+0x24> bgeu	a5,a2,1c002ccc <__pi_spi_receive_async+0x2c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:63
		DBG_PRINTF("%s:%s:%d: Transaction splitting unimplemented, too large", __FILE__,
			   __func__, __LINE__);
		abort(); /* TODO: unimplemented transaction splitting */
1c002cc8 <__pi_spi_receive_async+0x28> jal	ra,1c0037b8 <abort>
1c002ccc <__pi_spi_receive_async+0x2c> mv	s0,a0
1c002cce <__pi_spi_receive_async+0x2e> mv	s4,a1
1c002cd0 <__pi_spi_receive_async+0x30> mv	s3,a3
1c002cd2 <__pi_spi_receive_async+0x32> sw	a4,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:68
	}

	DBG_PRINTF("%s:%s:%d: udma_cmd = %p\n", __FILE__, __func__, __LINE__,
		   &(cs_data->udma_cmd[0]));
	uint32_t irq = deactive_irq();
1c002cd4 <__pi_spi_receive_async+0x34> jal	ra,1c002bb2 <deactive_irq>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:74

	uint8_t bitsword = 0;
	uint8_t UDMA_CORE_CFG = 0;
	uint32_t byte_align = 0;

	if (cs_data->wordsize == PI_SPI_WORDSIZE_8) {
1c002cd8 <__pi_spi_receive_async+0x38> lbu	a6,57(s0)
1c002cdc <__pi_spi_receive_async+0x3c> lw	a2,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:68
	uint32_t irq = deactive_irq();
1c002cde <__pi_spi_receive_async+0x3e> mv	s5,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:74
	if (cs_data->wordsize == PI_SPI_WORDSIZE_8) {
1c002ce0 <__pi_spi_receive_async+0x40> beqz	a6,1c002cfc <__pi_spi_receive_async+0x5c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:82
		byte_align = (cs_data->wordsize) && cs_data->big_endian;

	} else if (cs_data->wordsize == PI_SPI_WORDSIZE_16) {
		bitsword = 16;
		UDMA_CORE_CFG = UDMA_CORE_CFG_DATASIZE_16; // 0x1
		byte_align = (cs_data->wordsize) && cs_data->big_endian;
1c002ce4 <__pi_spi_receive_async+0x44> lbu	a5,58(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:79
	} else if (cs_data->wordsize == PI_SPI_WORDSIZE_16) {
1c002ce8 <__pi_spi_receive_async+0x48> li	a4,1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:80
		bitsword = 16;
1c002cea <__pi_spi_receive_async+0x4a> li	a7,16
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:82
		byte_align = (cs_data->wordsize) && cs_data->big_endian;
1c002cec <__pi_spi_receive_async+0x4c> snez	a5,a5
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:79
	} else if (cs_data->wordsize == PI_SPI_WORDSIZE_16) {
1c002cf0 <__pi_spi_receive_async+0x50> beq	a6,a4,1c002d00 <__pi_spi_receive_async+0x60>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:85
	} else {
		bitsword = 32;
		UDMA_CORE_CFG = UDMA_CORE_CFG_DATASIZE_32; // 0x2
1c002cf4 <__pi_spi_receive_async+0x54> li	a6,2
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:84
		bitsword = 32;
1c002cf6 <__pi_spi_receive_async+0x56> li	a7,32
1c002cfa <__pi_spi_receive_async+0x5a> j	1c002d00 <__pi_spi_receive_async+0x60>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:77
		byte_align = (cs_data->wordsize) && cs_data->big_endian;
1c002cfc <__pi_spi_receive_async+0x5c> li	a5,0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:75
		bitsword = 8;
1c002cfe <__pi_spi_receive_async+0x5e> li	a7,8
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:92
	}

	DBG_PRINTF("%s:%s:%d: bitsword = %u\n", __FILE__, __func__, __LINE__, bitsword);
	DBG_PRINTF("%s:%s:%d: UDMA_CORE_CFG = %u\n", __FILE__, __func__, __LINE__, UDMA_CORE_CFG);

	if (!drv_data->end_of_transfer) {
1c002d00 <__pi_spi_receive_async+0x60> lw	a4,12(s6)
1c002d04 <__pi_spi_receive_async+0x64> bnez	a4,1c002db0 <__pi_spi_receive_async+0x110>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:94
		cs_data->udma_cmd[0] = cfg;
		cs_data->udma_cmd[1] = SPI_CMD_SOT(cs_data->cs);
1c002d06 <__pi_spi_receive_async+0x66> lbu	a5,56(s0)
1c002d0a <__pi_spi_receive_async+0x6a> lui	a4,0x10000
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:93
		cs_data->udma_cmd[0] = cfg;
1c002d0e <__pi_spi_receive_async+0x6e> sw	s7,12(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:94
		cs_data->udma_cmd[1] = SPI_CMD_SOT(cs_data->cs);
1c002d12 <__pi_spi_receive_async+0x72> or	a5,a5,a4
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:95
		cs_data->udma_cmd[2] = SPI_CMD_RX_DATA(len / bitsword, SPI_CMD_1_WORD_PER_TRANSF,
1c002d14 <__pi_spi_receive_async+0x74> addi	a4,a7,-1
1c002d18 <__pi_spi_receive_async+0x78> divu	a7,s2,a7
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:94
		cs_data->udma_cmd[1] = SPI_CMD_SOT(cs_data->cs);
1c002d1c <__pi_spi_receive_async+0x7c> sw	a5,16(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:47
	int qspi = (flags & (0x3 << 2)) == PI_SPI_LINES_QUAD;
1c002d1e <__pi_spi_receive_async+0x7e> andi	a5,s3,12
1c002d22 <__pi_spi_receive_async+0x82> addi	a5,a5,-4
1c002d24 <__pi_spi_receive_async+0x84> seqz	a5,a5
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:95
		cs_data->udma_cmd[2] = SPI_CMD_RX_DATA(len / bitsword, SPI_CMD_1_WORD_PER_TRANSF,
1c002d28 <__pi_spi_receive_async+0x88> slli	a4,a4,0x10
1c002d2a <__pi_spi_receive_async+0x8a> slli	a5,a5,0x1b
1c002d2c <__pi_spi_receive_async+0x8c> or	a5,a5,a4
1c002d2e <__pi_spi_receive_async+0x8e> lui	a4,0x70000
1c002d32 <__pi_spi_receive_async+0x92> or	a5,a5,a4
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:49
	int cs_mode = (flags >> 0) & 0x3;
1c002d34 <__pi_spi_receive_async+0x94> andi	s3,s3,3
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:95
		cs_data->udma_cmd[2] = SPI_CMD_RX_DATA(len / bitsword, SPI_CMD_1_WORD_PER_TRANSF,
1c002d38 <__pi_spi_receive_async+0x98> addi	a7,a7,-1
1c002d3a <__pi_spi_receive_async+0x9a> or	a5,a5,a7
1c002d3e <__pi_spi_receive_async+0x9e> sw	a5,20(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:97
						       bitsword, qspi, SPI_CMD_MSB_FIRST);
		cs_data->udma_cmd[3] = SPI_CMD_EOT(1, cs_mode == PI_SPI_CS_KEEP);
1c002d40 <__pi_spi_receive_async+0xa0> li	a5,1
1c002d42 <__pi_spi_receive_async+0xa2> beq	s3,a5,1c002da8 <__pi_spi_receive_async+0x108>
1c002d46 <__pi_spi_receive_async+0xa6> lui	a5,0x90000
1c002d4a <__pi_spi_receive_async+0xaa> addi	a5,a5,1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:97 (discriminator 4)
1c002d4c <__pi_spi_receive_async+0xac> sw	a5,24(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:107 (discriminator 4)
		// number of byteword
		uint32_t rx_conf =
			UDMA_CORE_TX_CFG_EN(1) | UDMA_CORE_TX_CFG_DATASIZE(UDMA_CORE_CFG);

		/* receive data stream with 32-bit data size */
		spim_enqueue_channel(SPIM(device_id), (uint32_t)data, buffer_size, rx_conf,
1c002d4e <__pi_spi_receive_async+0xae> lui	a4,0x1a102
1c002d52 <__pi_spi_receive_async+0xb2> addi	a5,s1,1
1c002d56 <__pi_spi_receive_async+0xb6> addi	a4,a4,128 # 1a102080 <__heap_l1_cluster_start+0xa102060>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:104 (discriminator 4)
			UDMA_CORE_TX_CFG_EN(1) | UDMA_CORE_TX_CFG_DATASIZE(UDMA_CORE_CFG);
1c002d5a <__pi_spi_receive_async+0xba> slli	a6,a6,0x1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:107 (discriminator 4)
		spim_enqueue_channel(SPIM(device_id), (uint32_t)data, buffer_size, rx_conf,
1c002d5c <__pi_spi_receive_async+0xbc> slli	a5,a5,0x7
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:99 (discriminator 4)
		drv_data->end_of_transfer = task;
1c002d5e <__pi_spi_receive_async+0xbe> sw	a2,12(s6)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:100 (discriminator 4)
		drv_data->repeat_transfer = NULL;
1c002d62 <__pi_spi_receive_async+0xc2> sw	zero,8(s6)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:103 (discriminator 4)
		uint32_t rx_conf =
1c002d66 <__pi_spi_receive_async+0xc6> ori	a6,a6,16
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:107 (discriminator 4)
		spim_enqueue_channel(SPIM(device_id), (uint32_t)data, buffer_size, rx_conf,
1c002d6a <__pi_spi_receive_async+0xca> add	a5,a5,a4
hal_write32():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/include/target.h:35 (discriminator 4)
}

static inline void hal_write32(volatile void *addr, uint32_t value)
{
	asm volatile("" : : : "memory");
	*((volatile uint32_t *)addr) = value;
1c002d6c <__pi_spi_receive_async+0xcc> sw	s4,0(a5) # 90000000 <__heap_l2_shared_start+0x73fe6630>
__pi_spi_receive_async():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:58 (discriminator 4)
	int buffer_size = (len + 7) >> 3;
1c002d70 <__pi_spi_receive_async+0xd0> addi	s2,s2,7
1c002d72 <__pi_spi_receive_async+0xd2> srli	s2,s2,0x3
hal_write32():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/include/target.h:35 (discriminator 4)
1c002d76 <__pi_spi_receive_async+0xd6> mv	a5,a5
1c002d7a <__pi_spi_receive_async+0xda> sw	s2,4(a5)
1c002d7e <__pi_spi_receive_async+0xde> sw	a6,8(a5)
__pi_spi_receive_async():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:113 (discriminator 4)
				     RX_CHANNEL);
		// number of byteword
		uint32_t cmd_conf = UDMA_CORE_TX_CFG_EN(1) |
				    UDMA_CORE_TX_CFG_DATASIZE(UDMA_CORE_CFG_DATASIZE_32);
		/* send command stream with 32-bit data size */
		spim_enqueue_channel(SPIM(device_id), (uint32_t)cs_data->udma_cmd,
1c002d82 <__pi_spi_receive_async+0xe2> addi	s0,s0,12
hal_write32():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/include/target.h:35 (discriminator 4)
1c002d84 <__pi_spi_receive_async+0xe4> sw	s0,32(a5)
1c002d86 <__pi_spi_receive_async+0xe6> li	a4,16
1c002d88 <__pi_spi_receive_async+0xe8> sw	a4,36(a5)
1c002d8a <__pi_spi_receive_async+0xea> li	a4,20
1c002d8c <__pi_spi_receive_async+0xec> sw	a4,40(a5)
__pi_spi_receive_async():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:129
		transfer.is_send = 0;
		__pi_spim_drv_fifo_enqueue(cs_data, &transfer, task);
	}
	active_irq(irq);
	DBG_PRINTF("...end -> __pi_spi_receive_async...\n");
}
1c002d8e <__pi_spi_receive_async+0xee> lw	s0,88(sp)
1c002d90 <__pi_spi_receive_async+0xf0> lw	ra,92(sp)
1c002d92 <__pi_spi_receive_async+0xf2> lw	s1,84(sp)
1c002d94 <__pi_spi_receive_async+0xf4> lw	s2,80(sp)
1c002d96 <__pi_spi_receive_async+0xf6> lw	s3,76(sp)
1c002d98 <__pi_spi_receive_async+0xf8> lw	s4,72(sp)
1c002d9a <__pi_spi_receive_async+0xfa> lw	s6,64(sp)
1c002d9c <__pi_spi_receive_async+0xfc> lw	s7,60(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:127
	active_irq(irq);
1c002d9e <__pi_spi_receive_async+0xfe> mv	a0,s5
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:129
}
1c002da0 <__pi_spi_receive_async+0x100> lw	s5,68(sp)
1c002da2 <__pi_spi_receive_async+0x102> addi	sp,sp,96
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:127
	active_irq(irq);
1c002da4 <__pi_spi_receive_async+0x104> j	1c002bb8 <active_irq>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:97
		cs_data->udma_cmd[3] = SPI_CMD_EOT(1, cs_mode == PI_SPI_CS_KEEP);
1c002da8 <__pi_spi_receive_async+0x108> lui	a5,0x90000
1c002dac <__pi_spi_receive_async+0x10c> addi	a5,a5,3
1c002dae <__pi_spi_receive_async+0x10e> j	1c002d4c <__pi_spi_receive_async+0xac>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:125
		__pi_spim_drv_fifo_enqueue(cs_data, &transfer, task);
1c002db0 <__pi_spi_receive_async+0x110> addi	a1,sp,24
1c002db2 <__pi_spi_receive_async+0x112> mv	a0,s0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:119
		transfer.data = data;
1c002db4 <__pi_spi_receive_async+0x114> sw	s4,28(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:120
		transfer.flags = flags;
1c002db6 <__pi_spi_receive_async+0x116> sw	s3,24(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:121
		transfer.len = len;
1c002db8 <__pi_spi_receive_async+0x118> sw	s2,32(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:122
		transfer.cfg_cmd = cfg;
1c002dba <__pi_spi_receive_async+0x11a> sw	s7,36(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:123
		transfer.byte_align = byte_align;
1c002dbc <__pi_spi_receive_async+0x11c> sw	a5,40(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:124
		transfer.is_send = 0;
1c002dbe <__pi_spi_receive_async+0x11e> sw	zero,44(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:125
		__pi_spim_drv_fifo_enqueue(cs_data, &transfer, task);
1c002dc0 <__pi_spi_receive_async+0x120> jal	ra,1c002bbe <__pi_spim_drv_fifo_enqueue>
1c002dc4 <__pi_spi_receive_async+0x124> j	1c002d8e <__pi_spi_receive_async+0xee>
__pi_spi_send_async():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:135

void __pi_spi_send_async(struct spim_cs_data *cs_data, void *data, size_t len, pi_spi_flags_e flags,
			 pi_task_t *task)
{
	DBG_PRINTF("...start -> __pi_spi_send_async...\n");
	struct spim_driver_data *drv_data = SPIM_CS_DATA_GET_DRV_DATA(cs_data);
1c002dc6 <__pi_spi_send_async> lw	t4,4(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:133
{
1c002dca <__pi_spi_send_async+0x4> addi	sp,sp,-48
1c002dcc <__pi_spi_send_async+0x6> sw	ra,44(sp)
1c002dce <__pi_spi_send_async+0x8> sw	s0,40(sp)
1c002dd0 <__pi_spi_send_async+0xa> mv	a7,a2
1c002dd2 <__pi_spi_send_async+0xc> mv	a2,a4
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:151
		   system_core_clock_get() / cs_data->max_baudrate, cfg, qspi);

	/* buffer size */
	int buffer_size = (len + 7) >> 3;

	if (len > 8192 * 8) {
1c002dd4 <__pi_spi_send_async+0xe> lui	a4,0x10
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:141
	int device_id = drv_data->device_id;
1c002dd6 <__pi_spi_send_async+0x10> lbu	a5,20(t4)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:142
	uint32_t cfg = cs_data->cfg; // SPI_CMD_CFG(...)
1c002dda <__pi_spi_send_async+0x14> lw	a6,8(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:151
	if (len > 8192 * 8) {
1c002dde <__pi_spi_send_async+0x18> bgeu	a4,a7,1c002de6 <__pi_spi_send_async+0x20>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:154
		DBG_PRINTF("%s:%s:%d: Transaction splitting unimplemented, too large", __FILE__,
			   __func__, __LINE__);
		abort(); /* TODO: unimplemented transaction splitting */
1c002de2 <__pi_spi_send_async+0x1c> jal	ra,1c0037b8 <abort>
__disable_irq():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/arch/riscv.h:177
	uint32_t val = csr_read_clear(MSTATUS_ADDR, BIT(MSTATUS_MIE_Pos));
1c002de6 <__pi_spi_send_async+0x20> csrrci	s0,mstatus,8
__pi_spi_send_async():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:168
	uint8_t bitsword = 0;
	uint8_t UDMA_CORE_CFG = 0;
	uint32_t byte_align = 0;
	// uint32_t byte_align = (cs_data->wordsize == PI_SPI_WORDSIZE_32) && cs_data->big_endian;

	if (cs_data->wordsize == PI_SPI_WORDSIZE_8) {
1c002dea <__pi_spi_send_async+0x24> lbu	t1,57(a0)
1c002dee <__pi_spi_send_async+0x28> beqz	t1,1c002ea0 <__pi_spi_send_async+0xda>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:176
		byte_align = (cs_data->wordsize) && cs_data->big_endian;

	} else if (cs_data->wordsize == PI_SPI_WORDSIZE_16) {
		bitsword = 16;
		UDMA_CORE_CFG = UDMA_CORE_CFG_DATASIZE_16; // 0x1
		byte_align = (cs_data->wordsize) && cs_data->big_endian;
1c002df2 <__pi_spi_send_async+0x2c> lbu	a4,58(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:173
	} else if (cs_data->wordsize == PI_SPI_WORDSIZE_16) {
1c002df6 <__pi_spi_send_async+0x30> li	t3,1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:176
		byte_align = (cs_data->wordsize) && cs_data->big_endian;
1c002df8 <__pi_spi_send_async+0x32> snez	a4,a4
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:173
	} else if (cs_data->wordsize == PI_SPI_WORDSIZE_16) {
1c002dfc <__pi_spi_send_async+0x36> bne	t1,t3,1c002ea6 <__pi_spi_send_async+0xe0>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:174
		bitsword = 16;
1c002e00 <__pi_spi_send_async+0x3a> li	t3,16
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:187

	DBG_PRINTF("%s:%s:%d: bitsword = %u\n", __FILE__, __func__, __LINE__, bitsword);
	DBG_PRINTF("%s:%s:%d: UDMA_CORE_CFG = %u\n", __FILE__, __func__, __LINE__, UDMA_CORE_CFG);
	DBG_PRINTF("%s:%s:%d: device_id = %d\n", __FILE__, __func__, __LINE__, device_id);

	if (!drv_data->end_of_transfer) { /* enqueue the transfer */
1c002e02 <__pi_spi_send_async+0x3c> lw	t5,12(t4)
1c002e06 <__pi_spi_send_async+0x40> bnez	t5,1c002eb6 <__pi_spi_send_async+0xf0>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:189
		cs_data->udma_cmd[0] = cfg;
		cs_data->udma_cmd[1] = SPI_CMD_SOT(cs_data->cs);
1c002e0a <__pi_spi_send_async+0x44> lbu	a4,56(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:188
		cs_data->udma_cmd[0] = cfg;
1c002e0e <__pi_spi_send_async+0x48> sw	a6,12(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:189
		cs_data->udma_cmd[1] = SPI_CMD_SOT(cs_data->cs);
1c002e12 <__pi_spi_send_async+0x4c> lui	a6,0x10000
1c002e16 <__pi_spi_send_async+0x50> or	a4,a4,a6
1c002e1a <__pi_spi_send_async+0x54> sw	a4,16(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:190
		cs_data->udma_cmd[2] = SPI_CMD_TX_DATA((len / bitsword), SPI_CMD_1_WORD_PER_TRANSF,
1c002e1c <__pi_spi_send_async+0x56> addi	a4,t3,-1
1c002e20 <__pi_spi_send_async+0x5a> divu	t3,a7,t3
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:136
	int qspi = (flags & (0x3 << 2)) == PI_SPI_LINES_QUAD;
1c002e24 <__pi_spi_send_async+0x5e> andi	a6,a3,12
1c002e28 <__pi_spi_send_async+0x62> addi	a6,a6,-4
1c002e2a <__pi_spi_send_async+0x64> seqz	a6,a6
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:190
		cs_data->udma_cmd[2] = SPI_CMD_TX_DATA((len / bitsword), SPI_CMD_1_WORD_PER_TRANSF,
1c002e2e <__pi_spi_send_async+0x68> slli	a4,a4,0x10
1c002e30 <__pi_spi_send_async+0x6a> slli	a6,a6,0x1b
1c002e32 <__pi_spi_send_async+0x6c> or	a6,a6,a4
1c002e36 <__pi_spi_send_async+0x70> lui	a4,0x60000
1c002e3a <__pi_spi_send_async+0x74> or	a6,a6,a4
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:138
	int cs_mode = (flags >> 0) & 0x3;
1c002e3e <__pi_spi_send_async+0x78> andi	a3,a3,3
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:192
						       bitsword, qspi, SPI_CMD_MSB_FIRST);
		cs_data->udma_cmd[3] = SPI_CMD_EOT(1, cs_mode == PI_SPI_CS_KEEP);
1c002e40 <__pi_spi_send_async+0x7a> li	a4,1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:190
		cs_data->udma_cmd[2] = SPI_CMD_TX_DATA((len / bitsword), SPI_CMD_1_WORD_PER_TRANSF,
1c002e42 <__pi_spi_send_async+0x7c> addi	t3,t3,-1
1c002e44 <__pi_spi_send_async+0x7e> or	a6,a6,t3
1c002e48 <__pi_spi_send_async+0x82> sw	a6,20(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:192
		cs_data->udma_cmd[3] = SPI_CMD_EOT(1, cs_mode == PI_SPI_CS_KEEP);
1c002e4c <__pi_spi_send_async+0x86> beq	a3,a4,1c002eae <__pi_spi_send_async+0xe8>
1c002e50 <__pi_spi_send_async+0x8a> lui	a3,0x90000
1c002e54 <__pi_spi_send_async+0x8e> addi	a3,a3,1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:200 (discriminator 4)
		drv_data->repeat_transfer = NULL;

		uint32_t cmd_conf = UDMA_CORE_TX_CFG_EN(1) |
				    UDMA_CORE_TX_CFG_DATASIZE(UDMA_CORE_CFG_DATASIZE_32);
		/* send command stream with 32-bit data size */
		spim_enqueue_channel(SPIM(device_id), (uint32_t)cs_data->udma_cmd,
1c002e56 <__pi_spi_send_async+0x90> addi	a5,a5,1
1c002e58 <__pi_spi_send_async+0x92> lui	a4,0x1a102
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:192 (discriminator 4)
		cs_data->udma_cmd[3] = SPI_CMD_EOT(1, cs_mode == PI_SPI_CS_KEEP);
1c002e5c <__pi_spi_send_async+0x96> sw	a3,24(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:200 (discriminator 4)
		spim_enqueue_channel(SPIM(device_id), (uint32_t)cs_data->udma_cmd,
1c002e5e <__pi_spi_send_async+0x98> addi	a4,a4,128 # 1a102080 <__heap_l1_cluster_start+0xa102060>
1c002e62 <__pi_spi_send_async+0x9c> slli	a5,a5,0x7
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:194 (discriminator 4)
		drv_data->end_of_transfer = task;
1c002e64 <__pi_spi_send_async+0x9e> sw	a2,12(t4)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:195 (discriminator 4)
		drv_data->repeat_transfer = NULL;
1c002e68 <__pi_spi_send_async+0xa2> sw	zero,8(t4)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:200 (discriminator 4)
		spim_enqueue_channel(SPIM(device_id), (uint32_t)cs_data->udma_cmd,
1c002e6c <__pi_spi_send_async+0xa6> add	a5,a5,a4
1c002e6e <__pi_spi_send_async+0xa8> addi	a0,a0,12
hal_write32():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/include/target.h:35 (discriminator 4)
1c002e70 <__pi_spi_send_async+0xaa> mv	a5,a5
1c002e74 <__pi_spi_send_async+0xae> sw	a0,32(a5)
1c002e76 <__pi_spi_send_async+0xb0> li	a4,16
1c002e78 <__pi_spi_send_async+0xb2> sw	a4,36(a5)
1c002e7a <__pi_spi_send_async+0xb4> li	a4,20
1c002e7c <__pi_spi_send_async+0xb6> sw	a4,40(a5)
__pi_spi_send_async():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:204 (discriminator 4)
				     4 * sizeof(uint32_t), cmd_conf, COMMAND_CHANNEL);

		uint32_t tx_conf =
			UDMA_CORE_TX_CFG_EN(1) | UDMA_CORE_TX_CFG_DATASIZE(UDMA_CORE_CFG);
1c002e7e <__pi_spi_send_async+0xb8> slli	t1,t1,0x1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:203 (discriminator 4)
		uint32_t tx_conf =
1c002e80 <__pi_spi_send_async+0xba> ori	t1,t1,16
hal_write32():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/include/target.h:35 (discriminator 4)
1c002e84 <__pi_spi_send_async+0xbe> sw	a1,16(a5)
__pi_spi_send_async():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:149 (discriminator 4)
	int buffer_size = (len + 7) >> 3;
1c002e86 <__pi_spi_send_async+0xc0> addi	a7,a7,7
1c002e88 <__pi_spi_send_async+0xc2> srli	a7,a7,0x3
hal_write32():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/include/target.h:35 (discriminator 4)
1c002e8c <__pi_spi_send_async+0xc6> sw	a7,20(a5) # 90000014 <__heap_l2_shared_start+0x73fe6644>
1c002e90 <__pi_spi_send_async+0xca> sw	t1,24(a5)
__pi_spi_send_async():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:220
		transfer.cfg_cmd = cfg;
		transfer.byte_align = byte_align;
		transfer.is_send = 1;
		__pi_spim_drv_fifo_enqueue(cs_data, &transfer, task);
	}
	active_irq(irq);
1c002e94 <__pi_spi_send_async+0xce> mv	a0,s0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:222
	DBG_PRINTF("...end -> __pi_spi_send_async...\n");
}
1c002e96 <__pi_spi_send_async+0xd0> lw	s0,40(sp)
1c002e98 <__pi_spi_send_async+0xd2> lw	ra,44(sp)
1c002e9a <__pi_spi_send_async+0xd4> addi	sp,sp,48
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:220
	active_irq(irq);
1c002e9c <__pi_spi_send_async+0xd6> j	1c002bb8 <active_irq>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:171
		byte_align = (cs_data->wordsize) && cs_data->big_endian;
1c002ea0 <__pi_spi_send_async+0xda> li	a4,0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:169
		bitsword = 8;
1c002ea2 <__pi_spi_send_async+0xdc> li	t3,8
1c002ea4 <__pi_spi_send_async+0xde> j	1c002e02 <__pi_spi_send_async+0x3c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:179
		UDMA_CORE_CFG = UDMA_CORE_CFG_DATASIZE_32; // 0x2
1c002ea6 <__pi_spi_send_async+0xe0> li	t1,2
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:178
		bitsword = 32;
1c002ea8 <__pi_spi_send_async+0xe2> li	t3,32
1c002eac <__pi_spi_send_async+0xe6> j	1c002e02 <__pi_spi_send_async+0x3c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:192
		cs_data->udma_cmd[3] = SPI_CMD_EOT(1, cs_mode == PI_SPI_CS_KEEP);
1c002eae <__pi_spi_send_async+0xe8> lui	a3,0x90000
1c002eb2 <__pi_spi_send_async+0xec> addi	a3,a3,3
1c002eb4 <__pi_spi_send_async+0xee> j	1c002e56 <__pi_spi_send_async+0x90>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:212
		transfer.data = data;
1c002eb6 <__pi_spi_send_async+0xf0> sw	a1,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:217
		transfer.is_send = 1;
1c002eb8 <__pi_spi_send_async+0xf2> li	a5,1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:218
		__pi_spim_drv_fifo_enqueue(cs_data, &transfer, task);
1c002eba <__pi_spi_send_async+0xf4> addi	a1,sp,8
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:213
		transfer.flags = flags;
1c002ebc <__pi_spi_send_async+0xf6> sw	a3,8(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:214
		transfer.len = len;
1c002ebe <__pi_spi_send_async+0xf8> sw	a7,16(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:215
		transfer.cfg_cmd = cfg;
1c002ec0 <__pi_spi_send_async+0xfa> sw	a6,20(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:216
		transfer.byte_align = byte_align;
1c002ec2 <__pi_spi_send_async+0xfc> sw	a4,24(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:217
		transfer.is_send = 1;
1c002ec4 <__pi_spi_send_async+0xfe> sw	a5,28(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:218
		__pi_spim_drv_fifo_enqueue(cs_data, &transfer, task);
1c002ec6 <__pi_spi_send_async+0x100> jal	ra,1c002bbe <__pi_spim_drv_fifo_enqueue>
1c002eca <__pi_spi_send_async+0x104> j	1c002e94 <__pi_spi_send_async+0xce>
__pi_spi_open():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:225

int __pi_spi_open(struct spim_cs_data **cs_data, struct pi_spi_conf *conf)
{
1c002ecc <__pi_spi_open> addi	sp,sp,-32
1c002ece <__pi_spi_open+0x2> sw	s0,24(sp)
1c002ed0 <__pi_spi_open+0x4> sw	s3,12(sp)
1c002ed2 <__pi_spi_open+0x6> sw	s4,8(sp)
1c002ed4 <__pi_spi_open+0x8> mv	s0,a1
1c002ed6 <__pi_spi_open+0xa> sw	ra,28(sp)
1c002ed8 <__pi_spi_open+0xc> sw	s1,20(sp)
1c002eda <__pi_spi_open+0xe> sw	s2,16(sp)
1c002edc <__pi_spi_open+0x10> sw	s5,4(sp)
1c002ede <__pi_spi_open+0x12> mv	s4,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:228
	DBG_PRINTF("...start -> pi_spi_open...\n");

	uint32_t irq = deactive_irq();
1c002ee0 <__pi_spi_open+0x14> jal	ra,1c002bb2 <deactive_irq>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:242
	unsigned char spi_id = conf->itf;
	int periph_id = UDMA_SPIM_ID(spi_id);

	DBG_PRINTF("%s:%s:%d: periph_id = %u\n", __FILE__, __func__, __LINE__, periph_id);

	udma_ctrl_cg_disable(UDMA_SPIM_ID(conf->itf));
1c002ee4 <__pi_spi_open+0x18> lb	a5,17(s0)
udma_ctrl_cg_disable():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/udma_ctrl.h:75
	return hal_read32(&UDMA_GC->EVTIN);
}

static inline void udma_ctrl_cg_disable(uint32_t udma_device_id)
{
	hal_or32(&UDMA_GC->CG, 1 << udma_device_id);
1c002ee8 <__pi_spi_open+0x1c> li	a4,1
__pi_spi_open():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:228
	uint32_t irq = deactive_irq();
1c002eea <__pi_spi_open+0x1e> mv	s3,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:242
	udma_ctrl_cg_disable(UDMA_SPIM_ID(conf->itf));
1c002eec <__pi_spi_open+0x20> addi	a5,a5,1
udma_ctrl_cg_disable():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/udma_ctrl.h:75
1c002eee <__pi_spi_open+0x22> sll	a5,a4,a5
hal_or32():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/include/target.h:49
}

static inline void hal_or32(volatile void *addr, uint32_t value)
{
	asm volatile("" : : : "memory");
	*((volatile uint32_t *)addr) |= value;
1c002ef2 <__pi_spi_open+0x26> lui	a3,0x1a102
1c002ef6 <__pi_spi_open+0x2a> lw	a2,0(a3)
1c002ef8 <__pi_spi_open+0x2c> or	a5,a5,a2
1c002efa <__pi_spi_open+0x2e> sw	a5,0(a3)
__pi_spi_open():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:244

	hal_soc_eu_set_fc_mask(SOC_EVENT_UDMA_SPIM_EOT(conf->itf));
1c002efc <__pi_spi_open+0x30> lb	a0,17(s0)
1c002f00 <__pi_spi_open+0x34> slli	a5,a0,0x2
1c002f04 <__pi_spi_open+0x38> addi	a0,a5,7
hal_soc_eu_set_fc_mask():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/soc_eu.h:225
	if (evt >= 256 || evt < 0)
1c002f08 <__pi_spi_open+0x3c> li	a5,255
1c002f0c <__pi_spi_open+0x40> bltu	a5,a0,1c002f2c <__pi_spi_open+0x60>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/soc_eu.h:229
	uint32_t reg_offset = (uint32_t)evt / 32 * 4;
1c002f10 <__pi_spi_open+0x44> srli	a5,a0,0x5
soc_eu_fc_read():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/soc_eu.h:200
	return readw((uintptr_t)(SOC_EU_ADDR + SOC_FC_MASK0_OFFSET + reg));
1c002f14 <__pi_spi_open+0x48> lui	a3,0x1a106
1c002f18 <__pi_spi_open+0x4c> addi	a3,a3,4
hal_soc_eu_set_fc_mask():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/soc_eu.h:229
	uint32_t reg_offset = (uint32_t)evt / 32 * 4;
1c002f1a <__pi_spi_open+0x4e> slli	a5,a5,0x2
soc_eu_fc_read():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/soc_eu.h:200
	return readw((uintptr_t)(SOC_EU_ADDR + SOC_FC_MASK0_OFFSET + reg));
1c002f1c <__pi_spi_open+0x50> add	a5,a5,a3
readw():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/arch/io.h:82
	asm volatile("lw %0, 0(%1)"
1c002f1e <__pi_spi_open+0x52> lw	a3,0(a5)
hal_soc_eu_set_fc_mask():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/soc_eu.h:230
	soc_eu_fc_write(soc_eu_fc_read(reg_offset) & ~(1u << shift),
1c002f20 <__pi_spi_open+0x54> sll	a4,a4,a0
1c002f24 <__pi_spi_open+0x58> not	a4,a4
1c002f28 <__pi_spi_open+0x5c> and	a4,a4,a3
writew():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/arch/io.h:45
	asm volatile("sw %0, 0(%1)"
1c002f2a <__pi_spi_open+0x5e> sw	a4,0(a5)
__pi_spi_open():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:246

	pi_fc_event_handler_set(SOC_EVENT_UDMA_SPIM_EOT(conf->itf), spim_eot_handler);
1c002f2c <__pi_spi_open+0x60> lui	a1,0x1c003
1c002f30 <__pi_spi_open+0x64> addi	a1,a1,262 # 1c003106 <spim_eot_handler>
1c002f34 <__pi_spi_open+0x68> jal	1c0033b6 <pi_fc_event_handler_set>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:247
	pi_fc_event_handler_set(SOC_EVENT_UDMA_SPIM_TX(conf->itf), spim_tx_handler);
1c002f36 <__pi_spi_open+0x6a> lb	a0,17(s0)
1c002f3a <__pi_spi_open+0x6e> lui	a1,0x1c003
1c002f3e <__pi_spi_open+0x72> addi	a1,a1,328 # 1c003148 <spim_tx_handler>
1c002f42 <__pi_spi_open+0x76> slli	a0,a0,0x2
1c002f44 <__pi_spi_open+0x78> addi	a0,a0,5
1c002f46 <__pi_spi_open+0x7a> jal	1c0033b6 <pi_fc_event_handler_set>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:248
	pi_fc_event_handler_set(SOC_EVENT_UDMA_SPIM_RX(conf->itf), spim_rx_handler);
1c002f48 <__pi_spi_open+0x7c> lb	a0,17(s0)
1c002f4c <__pi_spi_open+0x80> lui	a1,0x1c003
1c002f50 <__pi_spi_open+0x84> addi	a1,a1,358 # 1c003166 <spim_rx_handler>
1c002f54 <__pi_spi_open+0x88> addi	a0,a0,1
1c002f56 <__pi_spi_open+0x8a> slli	a0,a0,0x2
1c002f58 <__pi_spi_open+0x8c> jal	1c0033b6 <pi_fc_event_handler_set>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:255
	/*
	** spim_driver_data keeps information for each spi interface.
	*/
	// Take care of driver data
	struct spim_driver_data *drv_data;
	if (__g_spim_drv_data[conf->itf]) {
1c002f5a <__pi_spi_open+0x8e> lb	s5,17(s0)
1c002f5e <__pi_spi_open+0x92> addi	s2,gp,-604 # 1c009180 <__g_spim_drv_data>
1c002f62 <__pi_spi_open+0x96> slli	a5,s5,0x2
1c002f66 <__pi_spi_open+0x9a> add	s2,s2,a5
1c002f68 <__pi_spi_open+0x9c> lw	s1,0(s2)
1c002f6c <__pi_spi_open+0xa0> bnez	s1,1c002fa2 <__pi_spi_open+0xd6>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:260
		drv_data = __g_spim_drv_data[conf->itf];
	} else {

		// Do this to define a node in a list. The list is a dynamic object.
		__g_spim_drv_data[conf->itf] = pi_default_malloc(sizeof(struct spim_driver_data));
1c002f6e <__pi_spi_open+0xa2> li	a0,24
1c002f70 <__pi_spi_open+0xa4> jal	ra,1c003908 <malloc>
1c002f74 <__pi_spi_open+0xa8> mv	s1,a0
1c002f76 <__pi_spi_open+0xaa> sw	a0,0(s2)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:261
		memset(__g_spim_drv_data[conf->itf], 0, sizeof(struct spim_driver_data));
1c002f7a <__pi_spi_open+0xae> sw	zero,4(a0)
1c002f7e <__pi_spi_open+0xb2> sw	zero,8(a0)
1c002f82 <__pi_spi_open+0xb6> sw	zero,12(a0)
1c002f86 <__pi_spi_open+0xba> sw	zero,16(a0)
1c002f8a <__pi_spi_open+0xbe> sw	zero,20(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:264
		drv_data = __g_spim_drv_data[conf->itf];
		// Do this to define a node in a list. The list is a dynamic object.
		drv_data->drv_fifo = pi_default_malloc(sizeof(struct spim_drv_fifo));
1c002f8e <__pi_spi_open+0xc2> li	a0,8
1c002f90 <__pi_spi_open+0xc4> jal	ra,1c003908 <malloc>
1c002f94 <__pi_spi_open+0xc8> sw	a0,0(s1)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:265
		memset(drv_data->drv_fifo, 0, sizeof(struct spim_drv_fifo));
1c002f96 <__pi_spi_open+0xca> sw	zero,0(a0)
1c002f9a <__pi_spi_open+0xce> sw	zero,4(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:271
		// controllo che il puntatore sia = 0
		if (!drv_data->drv_fifo) {
			active_irq(irq);
			return -1;
		}
		drv_data->device_id = conf->itf;
1c002f9e <__pi_spi_open+0xd2> sb	s5,20(s1)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:276
	}
	/*
	** Number of open SPI interfaces
	*/
	drv_data->nb_open++;
1c002fa2 <__pi_spi_open+0xd6> lw	a5,16(s1)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:279

	// Take care of cs data
	*cs_data = __pi_spim_get_cs_data(drv_data, conf->cs);
1c002fa4 <__pi_spi_open+0xd8> mv	a0,s1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:276
	drv_data->nb_open++;
1c002fa6 <__pi_spi_open+0xda> addi	a5,a5,1
1c002fa8 <__pi_spi_open+0xdc> sw	a5,16(s1)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:279
	*cs_data = __pi_spim_get_cs_data(drv_data, conf->cs);
1c002faa <__pi_spi_open+0xde> lb	a1,16(s0)
1c002fae <__pi_spi_open+0xe2> jal	ra,1c002c12 <__pi_spim_get_cs_data>
1c002fb2 <__pi_spi_open+0xe6> sw	a0,0(s4)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:281

	if (!*cs_data) { // if (*cs_data == 0)
1c002fb6 <__pi_spi_open+0xea> bnez	a0,1c003046 <__pi_spi_open+0x17a>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:282
		uint32_t clk_div = __pi_spi_clk_div_get(conf->max_baudrate);
1c002fb8 <__pi_spi_open+0xec> lw	a0,0(s0)
1c002fba <__pi_spi_open+0xee> jal	ra,1c002c4a <__pi_spi_clk_div_get>
1c002fbe <__pi_spi_open+0xf2> mv	s5,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:284
		// alloc a cs data, need to be in udma reachable ram
		struct spim_cs_data *_cs_data = pi_data_malloc(sizeof(struct spim_cs_data));
1c002fc0 <__pi_spi_open+0xf4> li	a0,60
1c002fc4 <__pi_spi_open+0xf8> jal	ra,1c003908 <malloc>
1c002fc8 <__pi_spi_open+0xfc> mv	s2,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:285
		if (_cs_data == NULL) {
1c002fca <__pi_spi_open+0xfe> bnez	a0,1c002fe6 <__pi_spi_open+0x11a>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:287
			DBG_PRINTF("[%s] _cs_data alloc failed\n", __func__);
			active_irq(irq);
1c002fcc <__pi_spi_open+0x100> mv	a0,s3
1c002fce <__pi_spi_open+0x102> jal	ra,1c002bb8 <active_irq>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:288
			return -2;
1c002fd2 <__pi_spi_open+0x106> li	a0,-2
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:318
	/* TODO: paste end */

	active_irq(irq);
	DBG_PRINTF("...end -> pi_spi_open...\n");
	return status;
}
1c002fd4 <__pi_spi_open+0x108> lw	ra,28(sp)
1c002fd6 <__pi_spi_open+0x10a> lw	s0,24(sp)
1c002fd8 <__pi_spi_open+0x10c> lw	s1,20(sp)
1c002fda <__pi_spi_open+0x10e> lw	s2,16(sp)
1c002fdc <__pi_spi_open+0x110> lw	s3,12(sp)
1c002fde <__pi_spi_open+0x112> lw	s4,8(sp)
1c002fe0 <__pi_spi_open+0x114> lw	s5,4(sp)
1c002fe2 <__pi_spi_open+0x116> addi	sp,sp,32
1c002fe4 <__pi_spi_open+0x118> ret
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:290
		if (clk_div > 0xFF) {
1c002fe6 <__pi_spi_open+0x11a> li	a5,255
1c002fea <__pi_spi_open+0x11e> bgeu	a5,s5,1c002ff8 <__pi_spi_open+0x12c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:294
			active_irq(irq);
1c002fee <__pi_spi_open+0x122> mv	a0,s3
1c002ff0 <__pi_spi_open+0x124> jal	ra,1c002bb8 <active_irq>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:295
			return -3;
1c002ff4 <__pi_spi_open+0x128> li	a0,-3
1c002ff6 <__pi_spi_open+0x12a> j	1c002fd4 <__pi_spi_open+0x108>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:298
		memset(_cs_data, 0, sizeof(struct spim_cs_data));
1c002ff8 <__pi_spi_open+0x12c> li	a1,0
1c002ffa <__pi_spi_open+0x12e> li	a2,60
1c002ffe <__pi_spi_open+0x132> jal	ra,1c000e7a <memset>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:299
		_cs_data->max_baudrate = conf->max_baudrate;
1c003002 <__pi_spi_open+0x136> lw	a5,0(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:302
		_cs_data->big_endian = conf->big_endian;
1c003004 <__pi_spi_open+0x138> lbu	a3,5(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:300
		_cs_data->polarity = conf->polarity;
1c003008 <__pi_spi_open+0x13c> lw	a4,8(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:299
		_cs_data->max_baudrate = conf->max_baudrate;
1c00300a <__pi_spi_open+0x13e> sw	a5,44(s2)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:302
		_cs_data->big_endian = conf->big_endian;
1c00300e <__pi_spi_open+0x142> sb	a3,58(s2)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:301
		_cs_data->phase = conf->phase;
1c003012 <__pi_spi_open+0x146> lw	a5,12(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:303
		_cs_data->wordsize = conf->wordsize;
1c003014 <__pi_spi_open+0x148> lbu	a3,4(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:300
		_cs_data->polarity = conf->polarity;
1c003018 <__pi_spi_open+0x14c> sw	a4,48(s2)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:301
		_cs_data->phase = conf->phase;
1c00301c <__pi_spi_open+0x150> sw	a5,52(s2)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:303
		_cs_data->wordsize = conf->wordsize;
1c003020 <__pi_spi_open+0x154> sb	a3,57(s2)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:305
		_cs_data->cfg = SPI_CMD_CFG(clk_div, _cs_data->phase, _cs_data->polarity);
1c003024 <__pi_spi_open+0x158> slli	a5,a5,0x9
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:304
		_cs_data->cs = conf->cs;
1c003026 <__pi_spi_open+0x15a> lbu	a3,16(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:305
		_cs_data->cfg = SPI_CMD_CFG(clk_div, _cs_data->phase, _cs_data->polarity);
1c00302a <__pi_spi_open+0x15e> slli	a4,a4,0x8
1c00302c <__pi_spi_open+0x160> or	a5,a5,a4
1c00302e <__pi_spi_open+0x162> or	a5,a5,s5
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:304
		_cs_data->cs = conf->cs;
1c003032 <__pi_spi_open+0x166> sb	a3,56(s2)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:305
		_cs_data->cfg = SPI_CMD_CFG(clk_div, _cs_data->phase, _cs_data->polarity);
1c003036 <__pi_spi_open+0x16a> sw	a5,8(s2)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:307
		*cs_data = _cs_data;
1c00303a <__pi_spi_open+0x16e> sw	s2,0(s4)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:309
		__pi_spim_cs_data_add(drv_data, _cs_data);
1c00303e <__pi_spi_open+0x172> mv	a1,s2
1c003040 <__pi_spi_open+0x174> mv	a0,s1
1c003042 <__pi_spi_open+0x176> jal	ra,1c002c42 <__pi_spim_cs_data_add>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:315
	active_irq(irq);
1c003046 <__pi_spi_open+0x17a> mv	a0,s3
1c003048 <__pi_spi_open+0x17c> jal	ra,1c002bb8 <active_irq>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:317
	return status;
1c00304c <__pi_spi_open+0x180> li	a0,0
1c00304e <__pi_spi_open+0x182> j	1c002fd4 <__pi_spi_open+0x108>
__pi_spi_close():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:321

void __pi_spi_close(struct spim_cs_data *cs_data, struct pi_spi_conf *conf)
{
1c003050 <__pi_spi_close> addi	sp,sp,-16
1c003052 <__pi_spi_close+0x2> sw	s1,4(sp)
1c003054 <__pi_spi_close+0x4> mv	s1,a0
1c003056 <__pi_spi_close+0x6> sw	ra,12(sp)
1c003058 <__pi_spi_close+0x8> sw	s0,8(sp)
1c00305a <__pi_spi_close+0xa> sw	s2,0(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:324
	DBG_PRINTF("...start -> pi_spi_close...\n");

	uint32_t irq = deactive_irq();
1c00305c <__pi_spi_close+0xc> jal	ra,1c002bb2 <deactive_irq>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:326
	/* TODO: paste beg */
	struct spim_driver_data *drv_data = cs_data->drv_data;
1c003060 <__pi_spi_close+0x10> lw	s0,4(s1)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:327
	__pi_spim_cs_data_del(drv_data, cs_data->cs);
1c003062 <__pi_spi_close+0x12> lbu	a1,56(s1)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:324
	uint32_t irq = deactive_irq();
1c003066 <__pi_spi_close+0x16> mv	s2,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:327
	__pi_spim_cs_data_del(drv_data, cs_data->cs);
1c003068 <__pi_spi_close+0x18> mv	a0,s0
1c00306a <__pi_spi_close+0x1a> jal	ra,1c002c24 <__pi_spim_cs_data_del>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:331
	/*
	** Number of open SPI interfaces
	*/
	drv_data->nb_open--;
1c00306e <__pi_spi_close+0x1e> lw	a5,16(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:345
		pi_default_free(drv_data, sizeof(drv_data));

		active_irq(irq);
		return;
	}
	pi_data_free(cs_data, sizeof(cs_data));
1c003070 <__pi_spi_close+0x20> mv	a0,s1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:331
	drv_data->nb_open--;
1c003072 <__pi_spi_close+0x22> addi	a5,a5,-1
1c003074 <__pi_spi_close+0x24> sw	a5,16(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:333
	if (drv_data->nb_open == 0) {
1c003076 <__pi_spi_close+0x26> bnez	a5,1c0030c4 <__pi_spi_close+0x74>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:335
		udma_ctrl_cg_enable(UDMA_SPIM_ID(drv_data->device_id));
1c003078 <__pi_spi_close+0x28> lbu	a5,20(s0)
1c00307c <__pi_spi_close+0x2c> addi	a4,a5,1
udma_ctrl_cg_enable():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/udma_ctrl.h:80
}

static inline void udma_ctrl_cg_enable(uint32_t udma_device_id)
{
	hal_and32(&UDMA_GC->CG, ~(1 << udma_device_id));
1c003080 <__pi_spi_close+0x30> li	a5,1
1c003082 <__pi_spi_close+0x32> sll	a5,a5,a4
1c003086 <__pi_spi_close+0x36> not	a5,a5
hal_and32():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/pulp/include/target.h:56
}

static inline void hal_and32(volatile void *addr, uint32_t value)
{
	asm volatile("" : : : "memory");
	*((volatile uint32_t *)addr) &= value;
1c00308a <__pi_spi_close+0x3a> lui	a4,0x1a102
1c00308e <__pi_spi_close+0x3e> lw	a3,0(a4)
1c003090 <__pi_spi_close+0x40> and	a5,a5,a3
1c003092 <__pi_spi_close+0x42> sw	a5,0(a4)
__pi_spi_close():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:336
		hal_soc_eu_clear_fc_mask(SOC_EVENT_UDMA_SPIM_EOT(drv_data->device_id));
1c003094 <__pi_spi_close+0x44> lbu	a0,20(s0)
1c003098 <__pi_spi_close+0x48> slli	a0,a0,0x2
1c00309a <__pi_spi_close+0x4a> addi	a0,a0,7
1c00309c <__pi_spi_close+0x4c> jal	ra,1c002c7c <hal_soc_eu_clear_fc_mask>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:337
		pi_fc_event_handler_clear(SOC_EVENT_UDMA_SPIM_EOT(drv_data->device_id));
1c0030a0 <__pi_spi_close+0x50> lbu	a0,20(s0)
1c0030a4 <__pi_spi_close+0x54> slli	a0,a0,0x2
1c0030a6 <__pi_spi_close+0x56> addi	a0,a0,7
1c0030a8 <__pi_spi_close+0x58> jal	1c0033c4 <pi_fc_event_handler_clear>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:338
		__g_spim_drv_data[drv_data->device_id] = NULL;
1c0030aa <__pi_spi_close+0x5a> lbu	a5,20(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:339
		pi_default_free(drv_data->drv_fifo, sizeof(drv_data->drv_fifo));
1c0030ae <__pi_spi_close+0x5e> lw	a0,0(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:338
		__g_spim_drv_data[drv_data->device_id] = NULL;
1c0030b0 <__pi_spi_close+0x60> slli	a4,a5,0x2
1c0030b4 <__pi_spi_close+0x64> addi	a5,gp,-604 # 1c009180 <__g_spim_drv_data>
1c0030b8 <__pi_spi_close+0x68> add	a5,a5,a4
1c0030ba <__pi_spi_close+0x6a> sw	zero,0(a5)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:339
		pi_default_free(drv_data->drv_fifo, sizeof(drv_data->drv_fifo));
1c0030be <__pi_spi_close+0x6e> jal	ra,1c003914 <free>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:340
		pi_default_free(drv_data, sizeof(drv_data));
1c0030c2 <__pi_spi_close+0x72> mv	a0,s0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:345
	pi_data_free(cs_data, sizeof(cs_data));
1c0030c4 <__pi_spi_close+0x74> jal	ra,1c003914 <free>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:352
	/* TODO: paste end */

	active_irq(irq);
	DBG_PRINTF("...end -> pi_spi_close...\n");
	return;
}
1c0030c8 <__pi_spi_close+0x78> lw	s0,8(sp)
1c0030ca <__pi_spi_close+0x7a> lw	ra,12(sp)
1c0030cc <__pi_spi_close+0x7c> lw	s1,4(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:349
	active_irq(irq);
1c0030ce <__pi_spi_close+0x7e> mv	a0,s2
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:352
}
1c0030d0 <__pi_spi_close+0x80> lw	s2,0(sp)
1c0030d2 <__pi_spi_close+0x82> addi	sp,sp,16
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:349
	active_irq(irq);
1c0030d4 <__pi_spi_close+0x84> j	1c002bb8 <active_irq>
__pi_spim_exec_next_transfer():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:455

void __pi_spim_exec_next_transfer(pi_task_t *task)
{
	DBG_PRINTF("...start -> __pi_spim_exec_next_transfer...\n");
	DBG_PRINTF("%s:%s:%d\n", __FILE__, __func__, __LINE__);
	if (task->data[5] == 1) { // if is send
1c0030d8 <__pi_spim_exec_next_transfer> lw	a5,40(a0)
1c0030da <__pi_spim_exec_next_transfer+0x2> li	a4,1
1c0030dc <__pi_spim_exec_next_transfer+0x4> bne	a5,a4,1c0030ee <__pi_spim_exec_next_transfer+0x16>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:457
		// cs data | data buffer | len | flags | end of transfer task
		__pi_spi_send_async((struct spim_cs_data *)task->data[0], (void *)task->data[1],
1c0030e0 <__pi_spim_exec_next_transfer+0x8> lw	a4,36(a0)
1c0030e2 <__pi_spim_exec_next_transfer+0xa> lw	a3,32(a0)
1c0030e4 <__pi_spim_exec_next_transfer+0xc> lw	a2,28(a0)
1c0030e6 <__pi_spim_exec_next_transfer+0xe> lw	a1,24(a0)
1c0030e8 <__pi_spim_exec_next_transfer+0x10> lw	a0,20(a0)
1c0030ea <__pi_spim_exec_next_transfer+0x12> j	1c002dc6 <__pi_spi_send_async>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:459
				    task->data[2], task->data[3], (pi_task_t *)task->data[4]);
	} else if (task->data[5] == 0) {
1c0030ee <__pi_spim_exec_next_transfer+0x16> bnez	a5,1c0030fe <__pi_spim_exec_next_transfer+0x26>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:461
		// cs data | data buffer | len | flags | end of transfer task
		__pi_spi_receive_async((struct spim_cs_data *)task->data[0], (void *)task->data[1],
1c0030f0 <__pi_spim_exec_next_transfer+0x18> lw	a4,36(a0)
1c0030f2 <__pi_spim_exec_next_transfer+0x1a> lw	a3,32(a0)
1c0030f4 <__pi_spim_exec_next_transfer+0x1c> lw	a2,28(a0)
1c0030f6 <__pi_spim_exec_next_transfer+0x1e> lw	a1,24(a0)
1c0030f8 <__pi_spim_exec_next_transfer+0x20> lw	a0,20(a0)
1c0030fa <__pi_spim_exec_next_transfer+0x22> j	1c002ca0 <__pi_spi_receive_async>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:452
{
1c0030fe <__pi_spim_exec_next_transfer+0x26> addi	sp,sp,-16
1c003100 <__pi_spim_exec_next_transfer+0x28> sw	ra,12(sp)
__pi_spi_xfer_async():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:477

void __pi_spi_xfer_async(struct spim_cs_data *cs_data, void *tx_data, void *rx_data, size_t len,
			 pi_spi_flags_e flags, pi_task_t *task)
{
	/* TODO: port spi_xfer async */
	abort();
1c003102 <__pi_spim_exec_next_transfer+0x2a> jal	ra,1c0037b8 <abort>
spim_eot_handler():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:364
	struct spim_driver_data *drv_data = __g_spim_drv_data[periph_id];
1c003106 <spim_eot_handler> addi	a0,a0,-7
1c003108 <spim_eot_handler+0x2> slli	a5,a0,0x2
1c00310c <spim_eot_handler+0x6> addi	a0,gp,-604 # 1c009180 <__g_spim_drv_data>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:355
{
1c003110 <spim_eot_handler+0xa> addi	sp,sp,-16
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:364
	struct spim_driver_data *drv_data = __g_spim_drv_data[periph_id];
1c003112 <spim_eot_handler+0xc> add	a0,a0,a5
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:355
{
1c003114 <spim_eot_handler+0xe> sw	s0,8(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:364
	struct spim_driver_data *drv_data = __g_spim_drv_data[periph_id];
1c003116 <spim_eot_handler+0x10> lw	s0,0(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:355
{
1c003118 <spim_eot_handler+0x12> sw	ra,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:366
	if (drv_data->repeat_transfer) {
1c00311a <spim_eot_handler+0x14> lw	a5,8(s0)
1c00311c <spim_eot_handler+0x16> bnez	a5,1c003140 <spim_eot_handler+0x3a>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:372
	pi_task_t *task = drv_data->end_of_transfer;
1c00311e <spim_eot_handler+0x18> lw	a0,12(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:374
	if (task != NULL) {
1c003120 <spim_eot_handler+0x1a> beqz	a0,1c003130 <spim_eot_handler+0x2a>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:375
		if (task->id == PI_TASK_NONE_ID) {
1c003122 <spim_eot_handler+0x1c> lw	a4,16(a0)
1c003124 <spim_eot_handler+0x1e> li	a5,1
1c003126 <spim_eot_handler+0x20> bne	a4,a5,1c00312c <spim_eot_handler+0x26>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:378
			pi_task_release(task);
1c00312a <spim_eot_handler+0x24> jal	1c0034e0 <pi_task_release>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:391
		drv_data->end_of_transfer = NULL;
1c00312c <spim_eot_handler+0x26> sw	zero,12(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:400
	task = __pi_spim_drv_fifo_pop(drv_data);
1c003130 <spim_eot_handler+0x2a> mv	a0,s0
1c003132 <spim_eot_handler+0x2c> jal	ra,1c002bf4 <__pi_spim_drv_fifo_pop>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:405
	if (task) {
1c003136 <spim_eot_handler+0x30> beqz	a0,1c003140 <spim_eot_handler+0x3a>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:411
}
1c003138 <spim_eot_handler+0x32> lw	s0,8(sp)
1c00313a <spim_eot_handler+0x34> lw	ra,12(sp)
1c00313c <spim_eot_handler+0x36> addi	sp,sp,16
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:406
		__pi_spim_exec_next_transfer(task);
1c00313e <spim_eot_handler+0x38> j	1c0030d8 <__pi_spim_exec_next_transfer>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:411
}
1c003140 <spim_eot_handler+0x3a> lw	ra,12(sp)
1c003142 <spim_eot_handler+0x3c> lw	s0,8(sp)
1c003144 <spim_eot_handler+0x3e> addi	sp,sp,16
1c003146 <spim_eot_handler+0x40> ret
spim_tx_handler():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:415
{ // if we're here, it's cs keep related
1c003148 <spim_tx_handler> addi	sp,sp,-16
1c00314a <spim_tx_handler+0x2> sw	s0,8(sp)
1c00314c <spim_tx_handler+0x4> mv	s0,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:420
	hal_soc_eu_clear_fc_mask(SOC_EVENT_UDMA_SPIM_TX(periph_id));
1c00314e <spim_tx_handler+0x6> andi	a0,a0,-4
1c003150 <spim_tx_handler+0x8> addi	a0,a0,1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:415
{ // if we're here, it's cs keep related
1c003152 <spim_tx_handler+0xa> sw	ra,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:420
	hal_soc_eu_clear_fc_mask(SOC_EVENT_UDMA_SPIM_TX(periph_id));
1c003154 <spim_tx_handler+0xc> jal	ra,1c002c7c <hal_soc_eu_clear_fc_mask>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:419
	uint32_t periph_id = (event >> UDMA_CHANNEL_NB_EVENTS_LOG2) - UDMA_SPIM_ID(0);
1c003158 <spim_tx_handler+0x10> srli	a0,s0,0x2
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:427
}
1c00315c <spim_tx_handler+0x14> lw	s0,8(sp)
1c00315e <spim_tx_handler+0x16> lw	ra,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:424
	spim_eot_handler(arg);
1c003160 <spim_tx_handler+0x18> addi	a0,a0,6
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:427
}
1c003162 <spim_tx_handler+0x1a> addi	sp,sp,16
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:424
	spim_eot_handler(arg);
1c003164 <spim_tx_handler+0x1c> j	1c003106 <spim_eot_handler>
spim_rx_handler():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:431
{ // if we're here, it's cs keep related
1c003166 <spim_rx_handler> addi	sp,sp,-16
1c003168 <spim_rx_handler+0x2> sw	s0,8(sp)
1c00316a <spim_rx_handler+0x4> mv	s0,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:436
	hal_soc_eu_clear_fc_mask(SOC_EVENT_UDMA_SPIM_RX(periph_id));
1c00316c <spim_rx_handler+0x6> andi	a0,a0,-4
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:431
{ // if we're here, it's cs keep related
1c00316e <spim_rx_handler+0x8> sw	ra,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:436
	hal_soc_eu_clear_fc_mask(SOC_EVENT_UDMA_SPIM_RX(periph_id));
1c003170 <spim_rx_handler+0xa> jal	ra,1c002c7c <hal_soc_eu_clear_fc_mask>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:435
	uint32_t periph_id = (event >> UDMA_CHANNEL_NB_EVENTS_LOG2) - UDMA_SPIM_ID(0);
1c003174 <spim_rx_handler+0xe> srli	a0,s0,0x2
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:443
}
1c003178 <spim_rx_handler+0x12> lw	s0,8(sp)
1c00317a <spim_rx_handler+0x14> lw	ra,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:440
	spim_eot_handler(arg);
1c00317c <spim_rx_handler+0x16> addi	a0,a0,6
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:443
}
1c00317e <spim_rx_handler+0x18> addi	sp,sp,16
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:440
	spim_eot_handler(arg);
1c003180 <spim_rx_handler+0x1a> j	1c003106 <spim_eot_handler>
vApplicationMallocFailedHook():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:697
    active_irq(irq);
#endif
}

void vApplicationMallocFailedHook(void)
{
1c003184 <vApplicationMallocFailedHook> addi	sp,sp,-16
1c003186 <vApplicationMallocFailedHook+0x2> sw	ra,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:709
	the size of the heap available to pvPortMalloc() is defined by
	configTOTAL_HEAP_SIZE in FreeRTOSConfig.h, and the
	xPortGetFreeHeapSize() API function can be used to query the size of
	free heap space that remains (although it does not provide information
	on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
1c003188 <vApplicationMallocFailedHook+0x4> csrci	mstatus,8
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:710
	printf("error: application malloc failed\n");
1c00318c <vApplicationMallocFailedHook+0x8> lui	a0,0x1c009
1c003190 <vApplicationMallocFailedHook+0xc> addi	a0,a0,-1960 # 1c008858 <__func__.0+0x14>
1c003194 <vApplicationMallocFailedHook+0x10> jal	ra,1c003ed2 <puts>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:711
	__asm volatile("ebreak");
1c003198 <vApplicationMallocFailedHook+0x14> ebreak
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:712 (discriminator 1)
	for (;;)
1c00319a <vApplicationMallocFailedHook+0x16> j	1c00319a <vApplicationMallocFailedHook+0x16>
vApplicationStackOverflowHook():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:717
		;
}

void vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
1c00319c <vApplicationStackOverflowHook> addi	sp,sp,-16
1c00319e <vApplicationStackOverflowHook+0x2> sw	ra,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:724
	(void)pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
1c0031a0 <vApplicationStackOverflowHook+0x4> csrci	mstatus,8
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:725
	printf("error: stack overflow\n");
1c0031a4 <vApplicationStackOverflowHook+0x8> lui	a0,0x1c009
1c0031a8 <vApplicationStackOverflowHook+0xc> addi	a0,a0,-1924 # 1c00887c <__func__.0+0x38>
1c0031ac <vApplicationStackOverflowHook+0x10> jal	ra,1c003ed2 <puts>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:726
	__asm volatile("ebreak");
1c0031b0 <vApplicationStackOverflowHook+0x14> ebreak
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/abstraction_layer_spi.c:727 (discriminator 1)
	for (;;)
1c0031b2 <vApplicationStackOverflowHook+0x16> j	1c0031b2 <vApplicationStackOverflowHook+0x16>
pi_fll_set_frequency():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:80
	uint32_t fres = (div == 0) ? (fref * mult) : (fref * mult) >> (div - 1);
	return fres;
}

int pi_fll_set_frequency(fll_type_t which_fll, uint32_t frequency, int check)
{
1c0031b4 <pi_fll_set_frequency> addi	sp,sp,-16
1c0031b6 <pi_fll_set_frequency+0x2> sw	s1,4(sp)
1c0031b8 <pi_fll_set_frequency+0x4> sw	s2,0(sp)
1c0031ba <pi_fll_set_frequency+0x6> sw	ra,12(sp)
1c0031bc <pi_fll_set_frequency+0x8> sw	s0,8(sp)
1c0031be <pi_fll_set_frequency+0xa> mv	s1,a0
1c0031c0 <pi_fll_set_frequency+0xc> mv	s2,a1
__disable_irq():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/arch/riscv.h:177
1c0031c2 <pi_fll_set_frequency+0xe> csrrci	s0,mstatus,8
fll_get_mult_div_from_frequency():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:58
	unsigned int Log2M = __FL1(freq) - __FL1(fref);
1c0031c6 <pi_fll_set_frequency+0x12> mv	a0,a1
1c0031c8 <pi_fll_set_frequency+0x14> jal	ra,1c000e8a <__clzsi2>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:59
	unsigned int D = __MAX(1, (FLL_LOG2_MAXM - Log2M) >> 1);
1c0031cc <pi_fll_set_frequency+0x18> addi	a5,a0,-2
1c0031d0 <pi_fll_set_frequency+0x1c> srli	a5,a5,0x1
1c0031d2 <pi_fll_set_frequency+0x1e> bnez	a5,1c0031d6 <pi_fll_set_frequency+0x22>
1c0031d4 <pi_fll_set_frequency+0x20> li	a5,1
pi_fll_set_frequency():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:91
	/* Frequency calculation from theory */
	fll_get_mult_div_from_frequency(frequency, &mult, &div);

	/* update mult and div */
	/* TODO: check if fll is on */
	reg1 = FLL_CTRL[which_fll].FLL_CONF1;
1c0031d6 <pi_fll_set_frequency+0x22> slli	a4,s1,0x4
1c0031da <pi_fll_set_frequency+0x26> lui	a3,0x1a100
1c0031de <pi_fll_set_frequency+0x2a> add	a3,a3,a4
1c0031e0 <pi_fll_set_frequency+0x2c> lw	a4,4(a3)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:93

	reg1 &= ~FLL_CTRL_CONF1_MULTI_FACTOR_MASK;
1c0031e2 <pi_fll_set_frequency+0x2e> lui	a2,0xffff0
1c0031e4 <pi_fll_set_frequency+0x30> and	a2,a2,a4
fll_get_mult_div_from_frequency():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:60
	unsigned int M = (freq << D) / fref;
1c0031e6 <pi_fll_set_frequency+0x32> sll	a4,s2,a5
1c0031ea <pi_fll_set_frequency+0x36> srli	a4,a4,0xf
pi_fll_set_frequency():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:94
	reg1 |= REG_SET(FLL_CTRL_CONF1_MULTI_FACTOR, mult);
1c0031ec <pi_fll_set_frequency+0x38> slli	a4,a4,0x10
1c0031ee <pi_fll_set_frequency+0x3a> srli	a4,a4,0x10
1c0031f0 <pi_fll_set_frequency+0x3c> or	a4,a4,a2
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:95
	reg1 &= ~FLL_CTRL_CONF1_CLK_OUT_DIV_MASK;
1c0031f2 <pi_fll_set_frequency+0x3e> lui	a2,0xc4000
1c0031f6 <pi_fll_set_frequency+0x42> addi	a2,a2,-1
fll_get_mult_div_from_frequency():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:66
	*div = D + 1;
1c0031f8 <pi_fll_set_frequency+0x44> addi	a5,a5,1
pi_fll_set_frequency():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:95
	reg1 &= ~FLL_CTRL_CONF1_CLK_OUT_DIV_MASK;
1c0031fa <pi_fll_set_frequency+0x46> and	a4,a4,a2
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:96
	reg1 |= REG_SET(FLL_CTRL_CONF1_CLK_OUT_DIV, div);
1c0031fc <pi_fll_set_frequency+0x48> slli	a5,a5,0x1a
1c0031fe <pi_fll_set_frequency+0x4a> lui	a2,0x3c000
1c003202 <pi_fll_set_frequency+0x4e> and	a5,a5,a2
1c003204 <pi_fll_set_frequency+0x50> or	a5,a5,a4
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:98

	FLL_CTRL[which_fll].FLL_CONF1 = reg1;
1c003206 <pi_fll_set_frequency+0x52> sw	a5,4(a3)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:101

	/* finalize */
	if (which_fll == FLL_SOC)
1c003208 <pi_fll_set_frequency+0x54> bnez	s1,1c00320e <pi_fll_set_frequency+0x5a>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:102
		system_core_clock_update();
1c00320a <pi_fll_set_frequency+0x56> jal	ra,1c002ad4 <system_core_clock_update>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:104

	flls_frequency[which_fll] = frequency;
1c00320e <pi_fll_set_frequency+0x5a> addi	a0,gp,-1508 # 1c008df8 <flls_frequency>
1c003212 <pi_fll_set_frequency+0x5e> slli	s1,s1,0x2
1c003214 <pi_fll_set_frequency+0x60> add	s1,s1,a0
1c003216 <pi_fll_set_frequency+0x62> sw	s2,0(s1)
__restore_irq():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/arch/riscv.h:157
	csr_write(MSTATUS_ADDR, irq);
1c00321a <pi_fll_set_frequency+0x66> csrw	mstatus,s0
pi_fll_set_frequency():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:109

	__restore_irq(irq);

	return frequency;
}
1c00321e <pi_fll_set_frequency+0x6a> lw	ra,12(sp)
1c003220 <pi_fll_set_frequency+0x6c> lw	s0,8(sp)
1c003222 <pi_fll_set_frequency+0x6e> lw	s1,4(sp)
1c003224 <pi_fll_set_frequency+0x70> mv	a0,s2
1c003226 <pi_fll_set_frequency+0x72> lw	s2,0(sp)
1c003228 <pi_fll_set_frequency+0x74> addi	sp,sp,16
1c00322a <pi_fll_set_frequency+0x76> ret
pi_fll_get_frequency():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:180
	}
}

int pi_fll_get_frequency(fll_type_t which_fll, uint8_t real)
{
	if (real) {
1c00322c <pi_fll_get_frequency> addi	a3,gp,-1508 # 1c008df8 <flls_frequency>
1c003230 <pi_fll_get_frequency+0x4> slli	a2,a0,0x2
1c003234 <pi_fll_get_frequency+0x8> beqz	a1,1c003252 <pi_fll_get_frequency+0x26>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:184
		/* Frequency calculation from real world */
		int real_freq = 0;
		real_freq = fll_get_frequency_from_mult_div(
			FLL_CTRL[which_fll].FLL_STATUS,
1c003236 <pi_fll_get_frequency+0xa> lui	a5,0x1a100
1c00323a <pi_fll_get_frequency+0xe> slli	a0,a0,0x4
1c00323c <pi_fll_get_frequency+0x10> add	a0,a0,a5
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:183
		real_freq = fll_get_frequency_from_mult_div(
1c00323e <pi_fll_get_frequency+0x12> lw	a4,0(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:185
			REG_GET(FLL_CTRL_CONF1_CLK_OUT_DIV,
1c003240 <pi_fll_get_frequency+0x14> lw	a5,4(a0)
1c003242 <pi_fll_get_frequency+0x16> slli	a4,a4,0xf
1c003244 <pi_fll_get_frequency+0x18> srli	a5,a5,0x1a
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:183
		real_freq = fll_get_frequency_from_mult_div(
1c003246 <pi_fll_get_frequency+0x1a> andi	a5,a5,15
fll_get_frequency_from_mult_div():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:75
	uint32_t fres = (div == 0) ? (fref * mult) : (fref * mult) >> (div - 1);
1c003248 <pi_fll_get_frequency+0x1c> bnez	a5,1c003258 <pi_fll_get_frequency+0x2c>
1c00324a <pi_fll_get_frequency+0x1e> mv	a5,a4
pi_fll_get_frequency():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:189
				FLL_CTRL[which_fll].FLL_CONF1));

		/* Update Frequency */
		flls_frequency[which_fll] = real_freq;
1c00324c <pi_fll_get_frequency+0x20> add	a4,a3,a2
1c003250 <pi_fll_get_frequency+0x24> sw	a5,0(a4)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:191
	}
	return flls_frequency[which_fll];
1c003252 <pi_fll_get_frequency+0x26> add	a3,a3,a2
1c003254 <pi_fll_get_frequency+0x28> lw	a0,0(a3)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:192
}
1c003256 <pi_fll_get_frequency+0x2a> ret
fll_get_frequency_from_mult_div():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:75
	uint32_t fres = (div == 0) ? (fref * mult) : (fref * mult) >> (div - 1);
1c003258 <pi_fll_get_frequency+0x2c> addi	a5,a5,-1
1c00325a <pi_fll_get_frequency+0x2e> srl	a5,a4,a5
1c00325e <pi_fll_get_frequency+0x32> j	1c00324c <pi_fll_get_frequency+0x20>
pi_fll_init():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:115
	if (ret_state) {
1c003260 <pi_fll_init> beqz	a1,1c003268 <pi_fll_init+0x8>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:116
		pi_fll_get_frequency(which_fll, 1);
1c003262 <pi_fll_init+0x2> li	a1,1
1c003264 <pi_fll_init+0x4> j	1c00322c <pi_fll_get_frequency>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:118
		reg1 = FLL_CTRL[which_fll].FLL_CONF1;
1c003268 <pi_fll_init+0x8> slli	a5,a0,0x4
1c00326c <pi_fll_init+0xc> lui	a4,0x1a100
1c003270 <pi_fll_init+0x10> add	a4,a4,a5
1c003272 <pi_fll_init+0x12> lw	a5,4(a4)
1c003274 <pi_fll_init+0x14> mv	a3,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:126
		if (!REG_GET(FLL_CTRL_CONF1_MODE, reg1)) {
1c003276 <pi_fll_init+0x16> bltz	a5,1c0032ac <pi_fll_init+0x4c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:128
			uint32_t reg2 = FLL_CTRL[which_fll].FLL_CONF2;
1c00327a <pi_fll_init+0x1a> lw	a2,8(a4)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:131
			reg2 &= ~FLL_CTRL_CONF2_LOCK_TOLERANCE_MASK;
1c00327c <pi_fll_init+0x1c> lui	a1,0xf0000
1c003280 <pi_fll_init+0x20> addi	a1,a1,1023 # f00003ff <__heap_l2_shared_start+0xd3fe6a2f>
1c003284 <pi_fll_init+0x24> and	a2,a2,a1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:132
			reg2 |= REG_SET(FLL_CTRL_CONF2_LOCK_TOLERANCE, 0x50);
1c003286 <pi_fll_init+0x26> lui	a1,0x502
1c00328a <pi_fll_init+0x2a> addi	a1,a1,-2048 # 00501800 <__heap_l2_shared_size+0x49b1d0>
1c00328e <pi_fll_init+0x2e> or	a2,a2,a1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:133
			FLL_CTRL[which_fll].FLL_CONF2 = reg2;
1c003290 <pi_fll_init+0x30> sw	a2,8(a4)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:143
			uint32_t regint = FLL_CTRL[which_fll].FLL_INTEGRATOR;
1c003292 <pi_fll_init+0x32> lw	a2,12(a4)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:144
			regint &= ~FLL_CTRL_INTEGRATOR_INT_PART_MASK;
1c003294 <pi_fll_init+0x34> lui	a1,0xfc010
1c003298 <pi_fll_init+0x38> addi	a1,a1,-1
1c00329a <pi_fll_init+0x3a> and	a2,a2,a1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:145
			regint |= REG_SET(FLL_CTRL_INTEGRATOR_INT_PART, 332);
1c00329c <pi_fll_init+0x3c> lui	a1,0x14c0
1c0032a0 <pi_fll_init+0x40> or	a2,a2,a1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:146
			FLL_CTRL[which_fll].FLL_INTEGRATOR = regint;
1c0032a2 <pi_fll_init+0x42> sw	a2,12(a4)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:152
			reg1 |= REG_SET(FLL_CTRL_CONF1_MODE, 1);
1c0032a4 <pi_fll_init+0x44> lui	a2,0xc0000
1c0032a8 <pi_fll_init+0x48> or	a5,a5,a2
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:153
			FLL_CTRL[which_fll].FLL_CONF1 = reg1;
1c0032aa <pi_fll_init+0x4a> sw	a5,4(a4)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:160
		uint32_t freq = flls_frequency[which_fll];
1c0032ac <pi_fll_init+0x4c> addi	a2,gp,-1508 # 1c008df8 <flls_frequency>
1c0032b0 <pi_fll_init+0x50> slli	a0,a3,0x2
1c0032b4 <pi_fll_init+0x54> add	a2,a2,a0
1c0032b6 <pi_fll_init+0x56> lw	a1,0(a2)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:161
		if (freq) {
1c0032b8 <pi_fll_init+0x58> addi	a4,gp,-1508 # 1c008df8 <flls_frequency>
1c0032bc <pi_fll_init+0x5c> beqz	a1,1c0032ce <pi_fll_init+0x6e>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:112
{
1c0032be <pi_fll_init+0x5e> addi	sp,sp,-16
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:162
			if (pi_fll_set_frequency(which_fll, freq, 0))
1c0032c0 <pi_fll_init+0x60> li	a2,0
1c0032c2 <pi_fll_init+0x62> mv	a0,a3
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:112
{
1c0032c4 <pi_fll_init+0x64> sw	ra,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:162
			if (pi_fll_set_frequency(which_fll, freq, 0))
1c0032c6 <pi_fll_init+0x66> jal	ra,1c0031b4 <pi_fll_set_frequency>
1c0032ca <pi_fll_init+0x6a> beqz	a0,1c0032e8 <pi_fll_init+0x88>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:163
				abort();
1c0032cc <pi_fll_init+0x6c> jal	1c0037b8 <abort>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:167
				REG_GET(FLL_CTRL_CONF1_CLK_OUT_DIV, reg1));
1c0032ce <pi_fll_init+0x6e> srli	a3,a5,0x1a
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:165
			freq = fll_get_frequency_from_mult_div(
1c0032d2 <pi_fll_init+0x72> slli	a5,a5,0x10
1c0032d4 <pi_fll_init+0x74> srli	a5,a5,0x10
1c0032d6 <pi_fll_init+0x76> andi	a3,a3,15
fll_get_frequency_from_mult_div():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:75
	uint32_t fres = (div == 0) ? (fref * mult) : (fref * mult) >> (div - 1);
1c0032d8 <pi_fll_init+0x78> slli	a5,a5,0xf
1c0032da <pi_fll_init+0x7a> beqz	a3,1c0032e2 <pi_fll_init+0x82>
1c0032dc <pi_fll_init+0x7c> addi	a3,a3,-1
1c0032de <pi_fll_init+0x7e> srl	a5,a5,a3
pi_fll_init():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:168
			flls_frequency[which_fll] = freq;
1c0032e2 <pi_fll_init+0x82> add	a4,a4,a0
1c0032e4 <pi_fll_init+0x84> sw	a5,0(a4)
1c0032e6 <pi_fll_init+0x86> ret
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:176
}
1c0032e8 <pi_fll_init+0x88> lw	ra,12(sp)
1c0032ea <pi_fll_init+0x8a> addi	sp,sp,16
1c0032ec <pi_fll_init+0x8c> ret
pi_freq_get():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:201
	flls_frequency[which_fll] = 0;
}

uint32_t pi_freq_get(pi_freq_domain_e domain)
{
	switch (domain) {
1c0032ee <pi_freq_get> li	a4,1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:200
{
1c0032f0 <pi_freq_get+0x2> mv	a5,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:201
	switch (domain) {
1c0032f2 <pi_freq_get+0x4> beq	a0,a4,1c003306 <pi_freq_get+0x18>
1c0032f6 <pi_freq_get+0x8> li	a4,2
1c0032f8 <pi_freq_get+0xa> beq	a0,a4,1c003300 <pi_freq_get+0x12>
1c0032fc <pi_freq_get+0xe> li	a0,0
1c0032fe <pi_freq_get+0x10> bnez	a5,1c003304 <pi_freq_get+0x16>
pi_fll_get_frequency():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:191
	return flls_frequency[which_fll];
1c003300 <pi_freq_get+0x12> lw	a0,-1508(gp) # 1c008df8 <flls_frequency>
pi_freq_get():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:211
	case PI_FREQ_DOMAIN_PERIPH:
		return pi_fll_get_frequency(FLL_SOC, 0);
	default:
		return 0;
	}
}
1c003304 <pi_freq_get+0x16> ret
pi_fll_get_frequency():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:191
	return flls_frequency[which_fll];
1c003306 <pi_freq_get+0x18> addi	a5,gp,-1508 # 1c008df8 <flls_frequency>
1c00330a <pi_freq_get+0x1c> lw	a0,8(a5)
pi_freq_get():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fll.c:205
		return pi_fll_get_frequency(FLL_CLUSTER, 0);
1c00330c <pi_freq_get+0x1e> ret
writew():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/arch/io.h:45
1c00330e <timer_irq_init> lui	a5,0x1a10b
1c003312 <timer_irq_init+0x4> addi	a3,a5,32 # 1a10b020 <__heap_l1_cluster_start+0xa10b000>
1c003316 <timer_irq_init+0x8> li	a4,1
1c003318 <timer_irq_init+0xa> sw	a4,0(a3)
1c00331a <timer_irq_init+0xc> addi	a4,a5,16
1c00331e <timer_irq_init+0x10> sw	a0,0(a4)
1c003320 <timer_irq_init+0x12> li	a4,151
1c003324 <timer_irq_init+0x16> sw	a4,0(a5)
timer_irq_init():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/timer_irq.c:57
		       TIMER_CFG_LO_CCFG_MASK | TIMER_CFG_LO_MODE_MASK |
		       TIMER_CFG_LO_IRQEN_MASK,
	       (uintptr_t)(PULP_FC_TIMER_ADDR + TIMER_CFG_LO_OFFSET));

	return 0;
}
1c003326 <timer_irq_init+0x18> li	a0,0
1c003328 <timer_irq_init+0x1a> ret
writew():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/arch/io.h:45
1c00332a <irq_enable> lui	a5,0x1a10a
1c00332e <irq_enable+0x4> addi	a5,a5,-2044 # 1a109804 <__heap_l1_cluster_start+0xa1097e4>
1c003332 <irq_enable+0x8> sw	a0,0(a5)
irq_enable():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/irq.c:48
}

void irq_enable(uint32_t mask)
{
	writew(mask, (uintptr_t)(PULP_FC_IRQ_ADDR + IRQ_REG_MASK_SET_OFFSET));
}
1c003334 <irq_enable+0xa> ret
irq_clint_global_enable():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/irq.c:77
	return val;
}

uint32_t irq_clint_global_enable()
{
	uint32_t val = csr_read_set(CSR_MSTATUS, MSTATUS_IE);
1c003336 <irq_clint_global_enable> csrrsi	a0,mstatus,8
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/irq.c:79
	return val;
}
1c00333a <irq_clint_global_enable+0x4> ret
writew():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/arch/io.h:45
1c00333c <pulp_irq_init> lui	a5,0x1a10a
1c003340 <pulp_irq_init+0x4> li	a4,-1
1c003342 <pulp_irq_init+0x6> addi	a5,a5,-2040 # 1a109808 <__heap_l1_cluster_start+0xa1097e8>
1c003346 <pulp_irq_init+0xa> sw	a4,0(a5)
pulp_irq_init():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/irq.c:102
{
	/* the debug module could have enabled irq so we disable it during
	 * initialization
	 */
	irq_disable(0xffffffff);
}
1c003348 <pulp_irq_init+0xc> ret
writew():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/arch/io.h:45
1c00334a <soc_eu_event_init> lui	a5,0x1a106
1c00334e <soc_eu_event_init+0x4> li	a4,-1
1c003350 <soc_eu_event_init+0x6> addi	a3,a5,4 # 1a106004 <__heap_l1_cluster_start+0xa105fe4>
1c003354 <soc_eu_event_init+0xa> sw	a4,0(a3)
1c003356 <soc_eu_event_init+0xc> addi	a3,a5,8
1c00335a <soc_eu_event_init+0x10> sw	a4,0(a3)
1c00335c <soc_eu_event_init+0x12> addi	a3,a5,12
1c003360 <soc_eu_event_init+0x16> sw	a4,0(a3)
1c003362 <soc_eu_event_init+0x18> addi	a3,a5,16
1c003366 <soc_eu_event_init+0x1c> sw	a4,0(a3)
1c003368 <soc_eu_event_init+0x1e> addi	a3,a5,20
1c00336c <soc_eu_event_init+0x22> sw	a4,0(a3)
1c00336e <soc_eu_event_init+0x24> addi	a3,a5,24
1c003372 <soc_eu_event_init+0x28> sw	a4,0(a3)
1c003374 <soc_eu_event_init+0x2a> addi	a3,a5,28
1c003378 <soc_eu_event_init+0x2e> sw	a4,0(a3)
1c00337a <soc_eu_event_init+0x30> addi	a5,a5,32
1c00337e <soc_eu_event_init+0x34> sw	a4,0(a5)
soc_eu_event_init():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/soc_eu.c:51
{
	/* deactivate all soc events */
	for (unsigned i = 0; i < SOC_NB_EVENT_REGS; i++) {
		soc_eu_mask_set(SOC_FC_FIRST_MASK + i * 4, 0xffffffff);
	}
}
1c003380 <soc_eu_event_init+0x36> ret
fc_event_null_event():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fc_event.c:33
}
1c003382 <fc_event_null_event> ret
pi_fc_event_handler_clear():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fc_event.c:53
	fc_event_handlers[event_id] =
1c003384 <pi_fc_event_handler_init> lui	a3,0x1c003
pi_fc_event_handler_init():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fc_event.c:39
	for (int i = 0; i < NB_SOC_EVENTS; i++) {
1c003388 <pi_fc_event_handler_init+0x4> li	a5,0
pi_fc_event_handler_clear():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fc_event.c:53
	fc_event_handlers[event_id] =
1c00338a <pi_fc_event_handler_init+0x6> addi	a2,gp,-1496 # 1c008e04 <fc_event_handlers>
1c00338e <pi_fc_event_handler_init+0xa> addi	a3,a3,898 # 1c003382 <fc_event_null_event>
pi_fc_event_handler_init():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fc_event.c:39
	for (int i = 0; i < NB_SOC_EVENTS; i++) {
1c003392 <pi_fc_event_handler_init+0xe> li	a1,168
pi_fc_event_handler_clear():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fc_event.c:53 (discriminator 3)
	fc_event_handlers[event_id] =
1c003396 <pi_fc_event_handler_init+0x12> slli	a4,a5,0x2
1c00339a <pi_fc_event_handler_init+0x16> add	a4,a4,a2
1c00339c <pi_fc_event_handler_init+0x18> sw	a3,0(a4)
pi_fc_event_handler_init():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fc_event.c:39 (discriminator 3)
	for (int i = 0; i < NB_SOC_EVENTS; i++) {
1c00339e <pi_fc_event_handler_init+0x1a> addi	a5,a5,1
1c0033a0 <pi_fc_event_handler_init+0x1c> bne	a5,a1,1c003396 <pi_fc_event_handler_init+0x12>
__irq_enable():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/irq.h:256
 */
static inline void __irq_enable(simple_irqn_e IRQn)
{
	/* U mode does not has the right */
	/* NVIC->MASK_SET = (1UL << IRQn); */
	writew(1UL << IRQn, (uintptr_t)(FC_IRQ_ADDR + IRQ_REG_MASK_SET_OFFSET));
1c0033a4 <pi_fc_event_handler_init+0x20> li	a5,1
1c0033a6 <pi_fc_event_handler_init+0x22> sll	a0,a5,a0
writew():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/arch/io.h:45
1c0033aa <pi_fc_event_handler_init+0x26> lui	a5,0x1a10a
1c0033ae <pi_fc_event_handler_init+0x2a> addi	a5,a5,-2044 # 1a109804 <__heap_l1_cluster_start+0xa1097e4>
1c0033b2 <pi_fc_event_handler_init+0x2e> sw	a0,0(a5)
pi_fc_event_handler_init():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fc_event.c:43
}
1c0033b4 <pi_fc_event_handler_init+0x30> ret
pi_fc_event_handler_set():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fc_event.c:48
	fc_event_handlers[event_id] = event_handler;
1c0033b6 <pi_fc_event_handler_set> slli	a5,a0,0x2
1c0033ba <pi_fc_event_handler_set+0x4> addi	a0,gp,-1496 # 1c008e04 <fc_event_handlers>
1c0033be <pi_fc_event_handler_set+0x8> add	a0,a0,a5
1c0033c0 <pi_fc_event_handler_set+0xa> sw	a1,0(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fc_event.c:49
}
1c0033c2 <pi_fc_event_handler_set+0xc> ret
pi_fc_event_handler_clear():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fc_event.c:53
	fc_event_handlers[event_id] =
1c0033c4 <pi_fc_event_handler_clear> slli	a5,a0,0x2
1c0033c8 <pi_fc_event_handler_clear+0x4> addi	a0,gp,-1496 # 1c008e04 <fc_event_handlers>
1c0033cc <pi_fc_event_handler_clear+0x8> add	a0,a0,a5
1c0033ce <pi_fc_event_handler_clear+0xa> lui	a5,0x1c003
1c0033d2 <pi_fc_event_handler_clear+0xe> addi	a5,a5,898 # 1c003382 <fc_event_null_event>
1c0033d6 <pi_fc_event_handler_clear+0x12> sw	a5,0(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/fc_event.c:55
}
1c0033d8 <pi_fc_event_handler_clear+0x14> ret
__os_native_api_sem_give():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/os.h:123
	}
	__restore_irq(irq);
}

static inline void __os_native_api_sem_give(void *sem_object)
{
1c0033da <__os_native_api_sem_give> addi	sp,sp,-32
1c0033dc <__os_native_api_sem_give+0x2> sw	ra,28(sp)
1c0033de <__os_native_api_sem_give+0x4> sw	s0,24(sp)
__disable_irq():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/arch/riscv.h:177
	uint32_t val = csr_read_clear(MSTATUS_ADDR, BIT(MSTATUS_MIE_Pos));
1c0033e0 <__os_native_api_sem_give+0x6> csrrci	s0,mstatus,8
__get_mcause():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/arch/riscv.h:200
  \details Returns the content of the MCAUSE Register.
  \return               MCAUSE Register value
 */
__attribute__((always_inline)) static inline uint32_t __get_mcause(void)
{
	uint32_t result = csr_read(MCAUSE_ADDR);
1c0033e4 <__os_native_api_sem_give+0xa> csrr	a5,mcause
__os_native_api_sem_give():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/os.h:127
	uint32_t irq = __disable_irq();
	if (__get_mcause() & MCAUSE_IRQ_Msk) {
		BaseType_t ret;
		xSemaphoreGiveFromISR(sem_object, &ret);
1c0033e8 <__os_native_api_sem_give+0xe> addi	a1,sp,12
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/os.h:125
	if (__get_mcause() & MCAUSE_IRQ_Msk) {
1c0033ea <__os_native_api_sem_give+0x10> bgez	a5,1c003406 <__os_native_api_sem_give+0x2c>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/os.h:127
		xSemaphoreGiveFromISR(sem_object, &ret);
1c0033ee <__os_native_api_sem_give+0x14> jal	ra,1c001426 <xQueueGiveFromISR>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/os.h:128
		portYIELD_FROM_ISR(ret);
1c0033f2 <__os_native_api_sem_give+0x18> lw	a5,12(sp)
1c0033f4 <__os_native_api_sem_give+0x1a> beqz	a5,1c0033fa <__os_native_api_sem_give+0x20>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/os.h:128 (discriminator 1)
1c0033f6 <__os_native_api_sem_give+0x1c> jal	ra,1c001b76 <vTaskSwitchContext>
__restore_irq():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/arch/riscv.h:157
	csr_write(MSTATUS_ADDR, irq);
1c0033fa <__os_native_api_sem_give+0x20> csrw	mstatus,s0
__os_native_api_sem_give():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/os.h:134
	} else {
		BaseType_t ret;
		xSemaphoreGiveFromISR(sem_object, &ret);
	}
	__restore_irq(irq);
}
1c0033fe <__os_native_api_sem_give+0x24> lw	ra,28(sp)
1c003400 <__os_native_api_sem_give+0x26> lw	s0,24(sp)
1c003402 <__os_native_api_sem_give+0x28> addi	sp,sp,32
1c003404 <__os_native_api_sem_give+0x2a> ret
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/os.h:131
		xSemaphoreGiveFromISR(sem_object, &ret);
1c003406 <__os_native_api_sem_give+0x2c> jal	ra,1c001426 <xQueueGiveFromISR>
1c00340a <__os_native_api_sem_give+0x30> j	1c0033fa <__os_native_api_sem_give+0x20>
__os_native_api_sem_take():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/os.h:110
{
1c00340c <__os_native_api_sem_take> addi	sp,sp,-32
1c00340e <__os_native_api_sem_take+0x2> sw	ra,28(sp)
1c003410 <__os_native_api_sem_take+0x4> sw	s0,24(sp)
__disable_irq():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/arch/riscv.h:177
	uint32_t val = csr_read_clear(MSTATUS_ADDR, BIT(MSTATUS_MIE_Pos));
1c003412 <__os_native_api_sem_take+0x6> csrrci	s0,mstatus,8
__get_mcause():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/arch/riscv.h:200
	uint32_t result = csr_read(MCAUSE_ADDR);
1c003416 <__os_native_api_sem_take+0xa> csrr	a5,mcause
__os_native_api_sem_take():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/os.h:112
	if (__get_mcause() & MCAUSE_IRQ_Msk) {
1c00341a <__os_native_api_sem_take+0xe> bgez	a5,1c003432 <__os_native_api_sem_take+0x26>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/os.h:115
		xSemaphoreTakeFromISR(sem_object, &ret);
1c00341e <__os_native_api_sem_take+0x12> addi	a2,sp,12
1c003420 <__os_native_api_sem_take+0x14> li	a1,0
1c003422 <__os_native_api_sem_take+0x16> jal	ra,1c0017b0 <xQueueReceiveFromISR>
__restore_irq():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/arch/riscv.h:157
	csr_write(MSTATUS_ADDR, irq);
1c003426 <__os_native_api_sem_take+0x1a> csrw	mstatus,s0
__os_native_api_sem_take():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/os.h:120
}
1c00342a <__os_native_api_sem_take+0x1e> lw	ra,28(sp)
1c00342c <__os_native_api_sem_take+0x20> lw	s0,24(sp)
1c00342e <__os_native_api_sem_take+0x22> addi	sp,sp,32
1c003430 <__os_native_api_sem_take+0x24> ret
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/os.h:117
		xSemaphoreTake(sem_object, portMAX_DELAY);
1c003432 <__os_native_api_sem_take+0x26> li	a1,-1
1c003434 <__os_native_api_sem_take+0x28> jal	ra,1c00161e <xQueueSemaphoreTake>
1c003438 <__os_native_api_sem_take+0x2c> j	1c003426 <__os_native_api_sem_take+0x1a>
__pi_task_block():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/pmsis_task.c:25
#include "pmsis_task.h"
#include "debug.h"
#include "os.h"

pi_task_t *__pi_task_block(pi_task_t *callback_task)
{
1c00343a <__pi_task_block> addi	sp,sp,-16
1c00343c <__pi_task_block+0x2> sw	s0,8(sp)
1c00343e <__pi_task_block+0x4> sw	ra,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/pmsis_task.c:26
	callback_task->id = PI_TASK_NONE_ID;
1c003440 <__pi_task_block+0x6> li	a5,1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/pmsis_task.c:25
{
1c003442 <__pi_task_block+0x8> mv	s0,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/pmsis_task.c:26
	callback_task->id = PI_TASK_NONE_ID;
1c003444 <__pi_task_block+0xa> sw	a5,16(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/pmsis_task.c:27
	callback_task->done = 0;
1c003446 <__pi_task_block+0xc> sb	zero,68(a0)
pi_sem_init():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/os.h:140


static inline int pi_sem_init(pi_sem_t *sem)
{
	hal_compiler_barrier();
	sem->sem_object = xSemaphoreCreateCounting(0xFFu, 0);
1c00344a <__pi_task_block+0x10> li	a1,0
1c00344c <__pi_task_block+0x12> li	a0,255
1c003450 <__pi_task_block+0x16> jal	ra,1c001182 <xQueueCreateCountingSemaphore>
1c003454 <__pi_task_block+0x1a> sw	a0,52(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/os.h:141
	if (sem->sem_object == NULL) {
1c003456 <__pi_task_block+0x1c> beqz	a0,1c00346c <__pi_task_block+0x32>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/os.h:144
		return -1;
	}
	sem->take = __os_native_api_sem_take;
1c003458 <__pi_task_block+0x1e> lui	a5,0x1c003
1c00345c <__pi_task_block+0x22> addi	a5,a5,1036 # 1c00340c <__os_native_api_sem_take>
1c003460 <__pi_task_block+0x26> sw	a5,56(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/os.h:145
	sem->give = __os_native_api_sem_give;
1c003462 <__pi_task_block+0x28> lui	a5,0x1c003
1c003466 <__pi_task_block+0x2c> addi	a5,a5,986 # 1c0033da <__os_native_api_sem_give>
1c00346a <__pi_task_block+0x30> sw	a5,60(s0)
__pi_task_block():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/pmsis_task.c:30
	pi_sem_init(&(callback_task->wait_on));
	/* lock the mutex so that task may be descheduled while waiting on it */
	callback_task->destroy = 1;
1c00346c <__pi_task_block+0x32> li	a5,1
1c00346e <__pi_task_block+0x34> sb	a5,71(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/pmsis_task.c:31
	callback_task->core_id = -1;
1c003472 <__pi_task_block+0x38> li	a5,-1
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/pmsis_task.c:33
	return callback_task;
}
1c003474 <__pi_task_block+0x3a> lw	ra,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/pmsis_task.c:31
	callback_task->core_id = -1;
1c003476 <__pi_task_block+0x3c> sb	a5,69(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/pmsis_task.c:33
}
1c00347a <__pi_task_block+0x40> mv	a0,s0
1c00347c <__pi_task_block+0x42> lw	s0,8(sp)
1c00347e <__pi_task_block+0x44> addi	sp,sp,16
1c003480 <__pi_task_block+0x46> ret
__pi_task_destroy():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/pmsis_task.c:50
	return callback_task;
}

void __pi_task_destroy(pi_task_t *task)
{
	if (task->destroy) {
1c003482 <__pi_task_destroy> lb	a5,71(a0)
1c003486 <__pi_task_destroy+0x4> beqz	a5,1c0034b4 <__pi_task_destroy+0x32>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/pmsis_task.c:49
{
1c003488 <__pi_task_destroy+0x6> addi	sp,sp,-16
1c00348a <__pi_task_destroy+0x8> sw	s0,8(sp)
1c00348c <__pi_task_destroy+0xa> sw	ra,12(sp)
1c00348e <__pi_task_destroy+0xc> mv	s0,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/pmsis_task.c:51
		task->destroy = 0;
1c003490 <__pi_task_destroy+0xe> sb	zero,71(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/pmsis_task.c:55
		/* if the mutex is only virtual (e.g. wait on soc event) */
		hal_compiler_barrier();
		/* if the sched support semaphore/mutexes */
		if (task->wait_on.sem_object) {
1c003494 <__pi_task_destroy+0x12> lw	a5,52(a0)
1c003496 <__pi_task_destroy+0x14> beqz	a5,1c0034ac <__pi_task_destroy+0x2a>
pi_sem_deinit():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/os.h:152
}

static inline int pi_sem_deinit(pi_sem_t *sem)
{
	hal_compiler_barrier();
	if (sem->sem_object == NULL) {
1c003498 <__pi_task_destroy+0x16> lw	a0,52(a0)
1c00349a <__pi_task_destroy+0x18> beqz	a0,1c0034a8 <__pi_task_destroy+0x26>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/os.h:155
		return -1;
	}
	vSemaphoreDelete(sem->sem_object);
1c00349c <__pi_task_destroy+0x1a> jal	ra,1c0018b8 <vQueueDelete>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/os.h:156
	sem->take = NULL;
1c0034a0 <__pi_task_destroy+0x1e> sw	zero,56(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/os.h:157
	sem->give = NULL;
1c0034a4 <__pi_task_destroy+0x22> sw	zero,60(s0)
__pi_task_destroy():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/pmsis_task.c:57
			pi_sem_deinit(&task->wait_on);
			task->wait_on.sem_object = (void *)NULL;
1c0034a8 <__pi_task_destroy+0x26> sw	zero,52(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/pmsis_task.c:61
		}
		hal_compiler_barrier();
	}
}
1c0034ac <__pi_task_destroy+0x2a> lw	ra,12(sp)
1c0034ae <__pi_task_destroy+0x2c> lw	s0,8(sp)
1c0034b0 <__pi_task_destroy+0x2e> addi	sp,sp,16
1c0034b2 <__pi_task_destroy+0x30> ret
1c0034b4 <__pi_task_destroy+0x32> ret
__pi_task_wait_on():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/pmsis_task.c:64

void __pi_task_wait_on(pi_task_t *task)
{
1c0034b6 <__pi_task_wait_on> addi	sp,sp,-16
1c0034b8 <__pi_task_wait_on+0x2> sw	s0,8(sp)
1c0034ba <__pi_task_wait_on+0x4> sw	ra,12(sp)
1c0034bc <__pi_task_wait_on+0x6> mv	s0,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/pmsis_task.c:65
	while (!task->done) {
1c0034be <__pi_task_wait_on+0x8> lbu	a5,68(s0)
1c0034c2 <__pi_task_wait_on+0xc> slli	a5,a5,0x18
1c0034c4 <__pi_task_wait_on+0xe> srai	a5,a5,0x18
1c0034c6 <__pi_task_wait_on+0x10> beqz	a5,1c0034d4 <__pi_task_wait_on+0x1e>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/pmsis_task.c:75
		}
		DEBUG_PRINTF("[%s] waited on sem %p\n", __func__,
			     &(task->wait_on));
	}
	hal_compiler_barrier();
	__pi_task_destroy(task);
1c0034c8 <__pi_task_wait_on+0x12> mv	a0,s0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/pmsis_task.c:76
}
1c0034ca <__pi_task_wait_on+0x14> lw	s0,8(sp)
1c0034cc <__pi_task_wait_on+0x16> lw	ra,12(sp)
1c0034ce <__pi_task_wait_on+0x18> addi	sp,sp,16
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/pmsis_task.c:75
	__pi_task_destroy(task);
1c0034d0 <__pi_task_wait_on+0x1a> j	1c003482 <__pi_task_destroy>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/pmsis_task.c:68
		if (task->wait_on.sem_object != NULL) {
1c0034d4 <__pi_task_wait_on+0x1e> lw	a5,52(s0)
1c0034d6 <__pi_task_wait_on+0x20> beqz	a5,1c0034be <__pi_task_wait_on+0x8>
pi_sem_take():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/os.h:165
}

static inline void pi_sem_take(pi_sem_t *sem)
{
	hal_compiler_barrier();
	sem->take(sem->sem_object);
1c0034d8 <__pi_task_wait_on+0x22> lw	a5,56(s0)
1c0034da <__pi_task_wait_on+0x24> lw	a0,52(s0)
1c0034dc <__pi_task_wait_on+0x26> jalr	a5
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/os.h:166
}
1c0034de <__pi_task_wait_on+0x28> j	1c0034be <__pi_task_wait_on+0x8>
pi_task_release():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/pmsis_task.c:101
	/* lock the mutex so that task may be descheduled while waiting on it */
	return callback_task;
}

void pi_task_release(pi_task_t *task)
{
1c0034e0 <pi_task_release> addi	sp,sp,-16
1c0034e2 <pi_task_release+0x2> sw	s0,8(sp)
1c0034e4 <pi_task_release+0x4> mv	s0,a0
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/pmsis_task.c:105
	DEBUG_PRINTF("[%s] releasing task %p\n", __func__, task);
	/* if the mutex is only virtual (e.g. wait on soc event)
	 * if the sched support semaphore/mutexes */
	if (task->wait_on.sem_object) {
1c0034e6 <pi_task_release+0x6> lw	a0,52(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/pmsis_task.c:101
{
1c0034e8 <pi_task_release+0x8> sw	ra,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/pmsis_task.c:105
	if (task->wait_on.sem_object) {
1c0034ea <pi_task_release+0xa> beqz	a0,1c0034f0 <pi_task_release+0x10>
pi_sem_give():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/os.h:170

static inline void pi_sem_give(pi_sem_t *sem)
{
	sem->give(sem->sem_object);
1c0034ec <pi_task_release+0xc> lw	a5,60(s0)
1c0034ee <pi_task_release+0xe> jalr	a5
pi_task_release():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/pmsis_task.c:110
		DEBUG_PRINTF("[%s] sem give %p\n", __func__, &task->wait_on);
		pi_sem_give(&(task->wait_on));
	}
	hal_compiler_barrier();
	task->done = 1;
1c0034f0 <pi_task_release+0x10> li	a5,1
1c0034f2 <pi_task_release+0x12> sb	a5,68(s0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/pmsis_task.c:112
	hal_compiler_barrier();
}
1c0034f6 <pi_task_release+0x16> lw	ra,12(sp)
1c0034f8 <pi_task_release+0x18> lw	s0,8(sp)
1c0034fa <pi_task_release+0x1a> addi	sp,sp,16
1c0034fc <pi_task_release+0x1c> ret
pi_open_from_conf():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/device.c:52
		device->config = conf;
		// TODO: add debug warning here
		break;
	}
#else
	device->config = conf;
1c0034fe <pi_open_from_conf> sw	a1,4(a0)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/device.c:54
#endif
}
1c003500 <pi_open_from_conf+0x2> ret
test_entry():
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:145
	else
		pi_spi_send(spim, cmd_buffer, 8 * 8, PI_SPI_CS_AUTO);
}

static int test_entry()
{
1c003502 <test_entry> addi	sp,sp,-464
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:155

	int total_size;
	get_info(&total_size);
	int buffer_size = total_size / NB_BUFFERS;

	pi_spi_conf_init(&conf);
1c003504 <test_entry+0x2> addi	a0,sp,44
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:145
{
1c003506 <test_entry+0x4> sw	ra,460(sp)
1c00350a <test_entry+0x8> sw	s0,456(sp)
1c00350e <test_entry+0xc> sw	s1,452(sp)
1c003512 <test_entry+0x10> sw	s2,448(sp)
1c003516 <test_entry+0x14> sw	s3,444(sp)
1c00351a <test_entry+0x18> sw	s4,440(sp)
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:149
	PI_L2 uint8_t add_buffer[] = {0x00, 0x00, 0x00, 0x00, 0x00};
1c00351e <test_entry+0x1c> sw	zero,24(sp)
1c003520 <test_entry+0x1e> sb	zero,28(sp)
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:155
	pi_spi_conf_init(&conf);
1c003524 <test_entry+0x22> jal	ra,1c002b16 <pi_spi_conf_init>
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:159

	conf.wordsize = PI_SPI_WORDSIZE_8;
	conf.big_endian = 1;
	conf.max_baudrate = 10000000;
1c003528 <test_entry+0x26> lui	a5,0x989
1c00352c <test_entry+0x2a> addi	a5,a5,1664 # 00989680 <__heap_l2_shared_size+0x923050>
1c003530 <test_entry+0x2e> sw	a5,44(sp)
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:165
	conf.polarity = 0;
	conf.phase = 0;
	conf.itf = 0;
	conf.cs = 0;

	pi_open_from_conf(&spim0, &conf);
1c003532 <test_entry+0x30> addi	a1,sp,44
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:157
	conf.wordsize = PI_SPI_WORDSIZE_8;
1c003534 <test_entry+0x32> li	a5,256
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:165
	pi_open_from_conf(&spim0, &conf);
1c003538 <test_entry+0x36> addi	a0,sp,32
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:157
	conf.wordsize = PI_SPI_WORDSIZE_8;
1c00353a <test_entry+0x38> sh	a5,48(sp)
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:160
	conf.polarity = 0;
1c00353e <test_entry+0x3c> sw	zero,52(sp)
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:161
	conf.phase = 0;
1c003540 <test_entry+0x3e> sw	zero,56(sp)
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:163
	conf.cs = 0;
1c003542 <test_entry+0x40> sh	zero,60(sp)
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:165
	pi_open_from_conf(&spim0, &conf);
1c003546 <test_entry+0x44> jal	ra,1c0034fe <pi_open_from_conf>
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:166
	if (pi_spi_open(&spim0))
1c00354a <test_entry+0x48> addi	a0,sp,32
1c00354c <test_entry+0x4a> jal	ra,1c002b36 <pi_spi_open>
1c003550 <test_entry+0x4e> beqz	a0,1c003572 <test_entry+0x70>
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:241
			if (error == 0)
				printf("First error at index %d, expected 0x%x, got 0x%x at %p\n",
				       i, tx_buffer[i], rx_buffer_1[i],
				       &rx_buffer_1[i]);
			error++;
			return -1;
1c003552 <test_entry+0x50> li	s0,-1
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:252
	} else {
		printf("Test success\n");
	}
	pi_spi_close(&spim0);
	return error;
}
1c003554 <test_entry+0x52> lw	ra,460(sp)
1c003558 <test_entry+0x56> mv	a0,s0
1c00355a <test_entry+0x58> lw	s0,456(sp)
1c00355e <test_entry+0x5c> lw	s1,452(sp)
1c003562 <test_entry+0x60> lw	s2,448(sp)
1c003566 <test_entry+0x64> lw	s3,444(sp)
1c00356a <test_entry+0x68> lw	s4,440(sp)
1c00356e <test_entry+0x6c> addi	sp,sp,464
1c003570 <test_entry+0x6e> ret
1c003572 <test_entry+0x70> mv	s0,a0
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:169
	printf("malloc tx buffer\n");
1c003574 <test_entry+0x72> lui	a0,0x1c009
1c003578 <test_entry+0x76> addi	a0,a0,-1900 # 1c008894 <__func__.0+0x50>
1c00357c <test_entry+0x7a> jal	ra,1c003ed2 <puts>
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:170
	tx_buffer = pmsis_l2_malloc(total_size);
1c003580 <test_entry+0x7e> li	a0,256
1c003584 <test_entry+0x82> jal	ra,1c002a6e <pi_l2_malloc>
1c003588 <test_entry+0x86> sw	a0,-588(gp) # 1c009190 <tx_buffer>
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:171
	if (tx_buffer == NULL)
1c00358c <test_entry+0x8a> addi	s1,gp,-588 # 1c009190 <tx_buffer>
1c003590 <test_entry+0x8e> beqz	a0,1c003552 <test_entry+0x50>
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:174
	printf("malloc rx buffer 1\n");
1c003592 <test_entry+0x90> lui	a0,0x1c009
1c003596 <test_entry+0x94> addi	a0,a0,-1880 # 1c0088a8 <__func__.0+0x64>
1c00359a <test_entry+0x98> jal	ra,1c003ed2 <puts>
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:175
	rx_buffer_1 = pmsis_l2_malloc(total_size);
1c00359e <test_entry+0x9c> li	a0,256
1c0035a2 <test_entry+0xa0> jal	ra,1c002a6e <pi_l2_malloc>
1c0035a6 <test_entry+0xa4> sw	a0,-596(gp) # 1c009188 <rx_buffer_1>
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:176
	if (rx_buffer_1 == NULL)
1c0035aa <test_entry+0xa8> addi	s2,gp,-596 # 1c009188 <rx_buffer_1>
1c0035ae <test_entry+0xac> beqz	a0,1c003552 <test_entry+0x50>
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:179
    printf("malloc rx buffer 2\n");
1c0035b0 <test_entry+0xae> lui	a0,0x1c009
1c0035b4 <test_entry+0xb2> addi	a0,a0,-1860 # 1c0088bc <__func__.0+0x78>
1c0035b8 <test_entry+0xb6> jal	ra,1c003ed2 <puts>
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:180
	rx_buffer_2 = pmsis_l2_malloc(total_size);
1c0035bc <test_entry+0xba> li	a0,256
1c0035c0 <test_entry+0xbe> jal	ra,1c002a6e <pi_l2_malloc>
1c0035c4 <test_entry+0xc2> sw	a0,-592(gp) # 1c00918c <rx_buffer_2>
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:181
	if (rx_buffer_2 == NULL)
1c0035c8 <test_entry+0xc6> addi	s4,gp,-592 # 1c00918c <rx_buffer_2>
1c0035cc <test_entry+0xca> beqz	a0,1c003552 <test_entry+0x50>
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:184
	printf("tx buffer init\n");
1c0035ce <test_entry+0xcc> lui	a0,0x1c009
1c0035d2 <test_entry+0xd0> addi	a0,a0,-1840 # 1c0088d0 <__func__.0+0x8c>
1c0035d6 <test_entry+0xd4> jal	ra,1c003ed2 <puts>
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:185
	for (int i = 0; i < total_size; i++) {
1c0035da <test_entry+0xd8> li	a5,0
1c0035dc <test_entry+0xda> li	a3,256
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:186 (discriminator 3)
		tx_buffer[i] = i;
1c0035e0 <test_entry+0xde> lw	a4,0(s1)
1c0035e2 <test_entry+0xe0> add	a4,a4,a5
1c0035e4 <test_entry+0xe2> sb	a5,0(a4) # 1a100000 <__heap_l1_cluster_start+0xa0fffe0>
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:185 (discriminator 3)
	for (int i = 0; i < total_size; i++) {
1c0035e8 <test_entry+0xe6> addi	a5,a5,1
1c0035ea <test_entry+0xe8> bne	a5,a3,1c0035e0 <test_entry+0xde>
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:197
	printf("async cs auto\n");
1c0035ee <test_entry+0xec> lui	a0,0x1c009
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:189
	uint8_t cmd = CMD_WREN;
1c0035f2 <test_entry+0xf0> li	s3,6
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:197
	printf("async cs auto\n");
1c0035f4 <test_entry+0xf2> addi	a0,a0,-1824 # 1c0088e0 <__func__.0+0x9c>
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:189
	uint8_t cmd = CMD_WREN;
1c0035f8 <test_entry+0xf6> sb	s3,22(sp)
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:197
	printf("async cs auto\n");
1c0035fc <test_entry+0xfa> jal	ra,1c003ed2 <puts>
pi_task_block():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/pmsis_task.h:86
	return __pi_task_block(task);
1c003600 <test_entry+0xfe> addi	a0,sp,72
test_entry():
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:201
        cmd = CMD_WREN;   
1c003602 <test_entry+0x100> sb	s3,22(sp)
pi_task_block():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/pmsis_task.h:86
1c003606 <test_entry+0x104> jal	ra,1c00343a <__pi_task_block>
1c00360a <test_entry+0x108> mv	a4,a0
test_entry():
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:202
        pi_spi_send_async(&spim0, &cmd, (1*8), PI_SPI_CS_AUTO, pi_task_block(&event_wren_1));
1c00360c <test_entry+0x10a> li	a3,0
1c00360e <test_entry+0x10c> li	a2,8
1c003610 <test_entry+0x10e> addi	a1,sp,22
1c003614 <test_entry+0x112> addi	a0,sp,32
1c003616 <test_entry+0x114> jal	ra,1c002b42 <pi_spi_send_async>
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:204
        add_buffer[0] = CMD_4PP; 
1c00361a <test_entry+0x118> li	a5,18
pi_task_block():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/pmsis_task.h:86
1c00361c <test_entry+0x11a> addi	a0,sp,144
test_entry():
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:204
1c00361e <test_entry+0x11c> sb	a5,24(sp)
pi_task_block():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/pmsis_task.h:86
1c003622 <test_entry+0x120> jal	ra,1c00343a <__pi_task_block>
1c003626 <test_entry+0x124> mv	a4,a0
test_entry():
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:205
        pi_spi_send_async(&spim0, add_buffer, (sizeof(add_buffer)*8), PI_SPI_CS_KEEP, pi_task_block(&event_4pp_1));
1c003628 <test_entry+0x126> li	a3,1
1c00362a <test_entry+0x128> li	a2,40
1c00362e <test_entry+0x12c> addi	a1,sp,24
1c003630 <test_entry+0x12e> addi	a0,sp,32
1c003632 <test_entry+0x130> jal	ra,1c002b42 <pi_spi_send_async>
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:207
        pi_spi_send_async(&spim0, tx_buffer + buffer_size * i, (buffer_size*8), PI_SPI_CS_AUTO, pi_task_block(&event_tx_1));
1c003636 <test_entry+0x134> lw	a1,0(s1)
pi_task_block():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/pmsis_task.h:86
1c003638 <test_entry+0x136> addi	a0,sp,216
test_entry():
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:216
            printf("WIP Register: %d\n", status);
1c00363a <test_entry+0x138> lui	s3,0x1c009
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:207
        pi_spi_send_async(&spim0, tx_buffer + buffer_size * i, (buffer_size*8), PI_SPI_CS_AUTO, pi_task_block(&event_tx_1));
1c00363e <test_entry+0x13c> sw	a1,12(sp)
pi_task_block():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/pmsis_task.h:86
1c003640 <test_entry+0x13e> jal	ra,1c00343a <__pi_task_block>
test_entry():
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:207
1c003644 <test_entry+0x142> lw	a1,12(sp)
1c003646 <test_entry+0x144> lui	a2,0x1
pi_task_block():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/pmsis_task.h:86
1c003648 <test_entry+0x146> mv	a4,a0
test_entry():
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:207
1c00364a <test_entry+0x148> li	a3,0
1c00364c <test_entry+0x14a> addi	a2,a2,-2048 # 00000800 <__stack_size>
1c003650 <test_entry+0x14e> addi	a0,sp,32
1c003652 <test_entry+0x150> jal	ra,1c002b42 <pi_spi_send_async>
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:210
        cmd = CMD_RDSR1; // command to read status register 1
1c003656 <test_entry+0x154> li	a5,5
1c003658 <test_entry+0x156> sb	a5,22(sp)
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:211
        volatile uint8_t status = 0xFF;
1c00365c <test_entry+0x15a> li	a5,-1
1c00365e <test_entry+0x15c> sb	a5,23(sp)
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:214 (discriminator 1)
            pi_spi_send(&spim0, &cmd, (1*8), PI_SPI_CS_KEEP);
1c003662 <test_entry+0x160> li	a3,1
1c003664 <test_entry+0x162> li	a2,8
1c003666 <test_entry+0x164> addi	a1,sp,22
1c00366a <test_entry+0x168> addi	a0,sp,32
1c00366c <test_entry+0x16a> jal	ra,1c002b46 <pi_spi_send>
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:215 (discriminator 1)
            pi_spi_receive(&spim0, &status, (1*8), PI_SPI_CS_AUTO);
1c003670 <test_entry+0x16e> li	a3,0
1c003672 <test_entry+0x170> li	a2,8
1c003674 <test_entry+0x172> addi	a1,sp,23
1c003678 <test_entry+0x176> addi	a0,sp,32
1c00367a <test_entry+0x178> jal	ra,1c002b7e <pi_spi_receive>
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:216 (discriminator 1)
            printf("WIP Register: %d\n", status);
1c00367e <test_entry+0x17c> lbu	a1,23(sp)
1c003682 <test_entry+0x180> addi	a0,s3,-1808 # 1c0088f0 <__func__.0+0xac>
1c003686 <test_entry+0x184> andi	a1,a1,255
1c00368a <test_entry+0x188> jal	ra,1c003db4 <iprintf>
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:218 (discriminator 1)
        }  while ((status & 0x01) != 0);// flash is buzy if status != 0
1c00368e <test_entry+0x18c> lbu	a5,23(sp)
1c003692 <test_entry+0x190> andi	a5,a5,1
1c003694 <test_entry+0x192> bnez	a5,1c003662 <test_entry+0x160>
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:221 (discriminator 2)
        add_buffer[0] = CMD_4READ;
1c003696 <test_entry+0x194> li	a5,19
pi_task_block():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/pmsis_task.h:86 (discriminator 2)
1c003698 <test_entry+0x196> addi	a0,sp,288
test_entry():
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:221 (discriminator 2)
1c00369a <test_entry+0x198> sb	a5,24(sp)
pi_task_block():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/pmsis_task.h:86 (discriminator 2)
1c00369e <test_entry+0x19c> jal	ra,1c00343a <__pi_task_block>
1c0036a2 <test_entry+0x1a0> mv	a4,a0
test_entry():
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:222 (discriminator 2)
        pi_spi_send_async(&spim0, add_buffer, (sizeof(add_buffer)*8), PI_SPI_CS_KEEP, pi_task_block(&event_4read_1)); 
1c0036a4 <test_entry+0x1a2> li	a3,1
1c0036a6 <test_entry+0x1a4> li	a2,40
1c0036aa <test_entry+0x1a8> addi	a1,sp,24
1c0036ac <test_entry+0x1aa> addi	a0,sp,32
1c0036ae <test_entry+0x1ac> jal	ra,1c002b42 <pi_spi_send_async>
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:223 (discriminator 2)
        pi_spi_receive_async(&spim0, rx_buffer_1 + buffer_size * i, (buffer_size*8), PI_SPI_CS_AUTO, pi_task_block(&event_rx_1));
1c0036b2 <test_entry+0x1b0> lw	a1,0(s2)
pi_task_block():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/pmsis_task.h:86 (discriminator 2)
1c0036b6 <test_entry+0x1b4> addi	a0,sp,360
test_entry():
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:223 (discriminator 2)
1c0036b8 <test_entry+0x1b6> sw	a1,12(sp)
pi_task_block():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/pmsis_task.h:86 (discriminator 2)
1c0036ba <test_entry+0x1b8> jal	ra,1c00343a <__pi_task_block>
test_entry():
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:223 (discriminator 2)
1c0036be <test_entry+0x1bc> lw	a1,12(sp)
1c0036c0 <test_entry+0x1be> lui	a2,0x1
pi_task_block():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/pmsis_task.h:86 (discriminator 2)
1c0036c2 <test_entry+0x1c0> mv	a4,a0
test_entry():
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:223 (discriminator 2)
1c0036c4 <test_entry+0x1c2> li	a3,0
1c0036c6 <test_entry+0x1c4> addi	a2,a2,-2048 # 00000800 <__stack_size>
1c0036ca <test_entry+0x1c8> addi	a0,sp,32
1c0036cc <test_entry+0x1ca> jal	ra,1c002b7a <pi_spi_receive_async>
pi_task_wait_on():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/pmsis_task.h:130 (discriminator 2)
	__pi_task_wait_on(task);
1c0036d0 <test_entry+0x1ce> addi	a0,sp,72
1c0036d2 <test_entry+0x1d0> jal	ra,1c0034b6 <__pi_task_wait_on>
1c0036d6 <test_entry+0x1d4> addi	a0,sp,144
1c0036d8 <test_entry+0x1d6> jal	ra,1c0034b6 <__pi_task_wait_on>
1c0036dc <test_entry+0x1da> addi	a0,sp,216
1c0036de <test_entry+0x1dc> jal	ra,1c0034b6 <__pi_task_wait_on>
1c0036e2 <test_entry+0x1e0> addi	a0,sp,288
1c0036e4 <test_entry+0x1e2> jal	ra,1c0034b6 <__pi_task_wait_on>
1c0036e8 <test_entry+0x1e6> addi	a0,sp,360
1c0036ea <test_entry+0x1e8> jal	ra,1c0034b6 <__pi_task_wait_on>
test_entry():
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:232 (discriminator 2)
	printf("starting error check\n");
1c0036ee <test_entry+0x1ec> lui	a0,0x1c009
1c0036f2 <test_entry+0x1f0> addi	a0,a0,-1788 # 1c008904 <__func__.0+0xc0>
1c0036f6 <test_entry+0x1f4> jal	ra,1c003ed2 <puts>
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:235 (discriminator 2)
		if (rx_buffer_1[i] != tx_buffer[i] && rx_buffer_2[i] != tx_buffer[i]) {
1c0036fa <test_entry+0x1f8> lw	a0,0(s2)
1c0036fe <test_entry+0x1fc> lw	a6,0(s1)
1c003702 <test_entry+0x200> lw	a7,0(s4)
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:234 (discriminator 2)
	for (int i = 0; i < total_size; i++) {
1c003706 <test_entry+0x204> li	a1,0
1c003708 <test_entry+0x206> li	a5,256
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:235
		if (rx_buffer_1[i] != tx_buffer[i] && rx_buffer_2[i] != tx_buffer[i]) {
1c00370c <test_entry+0x20a> add	a4,a0,a1
1c003710 <test_entry+0x20e> add	a2,a6,a1
1c003714 <test_entry+0x212> lbu	a3,0(a4)
1c003718 <test_entry+0x216> lbu	a2,0(a2)
1c00371c <test_entry+0x21a> beq	a3,a2,1c00373a <test_entry+0x238>
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:235 (discriminator 1)
1c003720 <test_entry+0x21e> add	t1,a7,a1
1c003724 <test_entry+0x222> lbu	t1,0(t1)
1c003728 <test_entry+0x226> beq	t1,a2,1c00373a <test_entry+0x238>
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:237
				printf("First error at index %d, expected 0x%x, got 0x%x at %p\n",
1c00372c <test_entry+0x22a> lui	a0,0x1c009
1c003730 <test_entry+0x22e> addi	a0,a0,-1764 # 1c00891c <__func__.0+0xd8>
1c003734 <test_entry+0x232> jal	ra,1c003db4 <iprintf>
1c003738 <test_entry+0x236> j	1c003552 <test_entry+0x50>
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:234 (discriminator 2)
	for (int i = 0; i < total_size; i++) {
1c00373a <test_entry+0x238> addi	a1,a1,1
1c00373c <test_entry+0x23a> bne	a1,a5,1c00370c <test_entry+0x20a>
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:248
		printf("Test success\n");
1c003740 <test_entry+0x23e> lui	a0,0x1c009
1c003744 <test_entry+0x242> addi	a0,a0,-1708 # 1c008954 <__func__.0+0x110>
1c003748 <test_entry+0x246> jal	ra,1c003ed2 <puts>
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:250
	pi_spi_close(&spim0);
1c00374c <test_entry+0x24a> addi	a0,sp,32
1c00374e <test_entry+0x24c> jal	ra,1c002b3c <pi_spi_close>
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:251
	return error;
1c003752 <test_entry+0x250> j	1c003554 <test_entry+0x52>
test_kickoff():
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:255

static void test_kickoff(void *arg)
{
1c003754 <test_kickoff> addi	sp,sp,-16
1c003756 <test_kickoff+0x2> sw	ra,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:256
	int ret = test_entry();
1c003758 <test_kickoff+0x4> jal	ra,1c003502 <test_entry>
pmsis_exit():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/os.h:36
	exit(err);
1c00375c <test_kickoff+0x8> jal	1c003814 <exit>
main():
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:262
	pmsis_exit(ret);
}

/* Program Entry. */
int main(void)
{
1c00375e <main> addi	sp,sp,-32
1c003760 <main+0x2> sw	ra,28(sp)
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:265
	#ifdef USE_FREERTOS_TEST
	/* Init board hardware. */
	system_init();
1c003762 <main+0x4> jal	ra,1c002a8a <system_init>
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:266
	printf("\n\n\t *** FreeRTOS Hello World *** \n\n");
1c003766 <main+0x8> lui	a0,0x1c009
1c00376a <main+0xc> addi	a0,a0,-1692 # 1c008964 <__func__.0+0x120>
1c00376e <main+0x10> jal	ra,1c003ed2 <puts>
pmsis_kickoff():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/os.h:44
	xTask = xTaskCreate(arg, "main",
1c003772 <main+0x14> lui	a1,0x1c009
1c003776 <main+0x18> lui	a0,0x1c003
1c00377a <main+0x1c> addi	a5,sp,12
1c00377c <main+0x1e> li	a4,1
1c00377e <main+0x20> li	a3,0
1c003780 <main+0x22> li	a2,400
1c003784 <main+0x26> addi	a1,a1,-1656 # 1c008988 <__func__.0+0x144>
1c003788 <main+0x2a> addi	a0,a0,1876 # 1c003754 <test_kickoff>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/os.h:42
	TaskHandle_t xHandler0 = NULL;
1c00378c <main+0x2e> sw	zero,12(sp)
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/os.h:44
	xTask = xTaskCreate(arg, "main",
1c00378e <main+0x30> jal	ra,1c00204a <xTaskCreate>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/os.h:48
	if (xTask != pdPASS) {
1c003792 <main+0x34> li	a5,1
1c003794 <main+0x36> beq	a0,a5,1c0037a8 <main+0x4a>
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/os.h:49
		printf("main is NULL !\n");
1c003798 <main+0x3a> lui	a0,0x1c009
1c00379c <main+0x3e> addi	a0,a0,-1648 # 1c008990 <__func__.0+0x14c>
1c0037a0 <main+0x42> jal	ra,1c003ed2 <puts>
pmsis_exit():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/os.h:36
	exit(err);
1c0037a4 <main+0x46> li	a0,-1
1c0037a6 <main+0x48> jal	1c003814 <exit>
__enable_irq():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/target/arch/riscv.h:167
	csr_read_set(MSTATUS_ADDR, BIT(MSTATUS_MIE_Pos));
1c0037a8 <main+0x4a> csrrsi	a5,mstatus,8
pmsis_kickoff():
/scratch/norlando/pulp-open/pulp-sdk/rtos/freertos/drivers/include/os.h:66
	vTaskStartScheduler();
1c0037ac <main+0x4e> jal	ra,1c00226a <vTaskStartScheduler>
main():
/scratch/norlando/pulp-open/pulp-sdk/tests/spim_flash_async/test_spi_async.c:274
#ifdef USE_PULPOS_TEST
	printf("\n\n\t *** Pulp OS Hello World *** \n\n");
	#endif
	
	return pmsis_kickoff((void *)test_kickoff);
}
1c0037b0 <main+0x52> lw	ra,28(sp)
1c0037b2 <main+0x54> li	a0,0
1c0037b4 <main+0x56> addi	sp,sp,32
1c0037b6 <main+0x58> ret
abort():
1c0037b8 <abort> addi	sp,sp,-16
1c0037ba <abort+0x2> li	a0,6
1c0037bc <abort+0x4> sw	ra,12(sp)
1c0037be <abort+0x6> jal	ra,1c00406a <raise>
1c0037c2 <abort+0xa> li	a0,1
1c0037c4 <abort+0xc> jal	ra,1c0029b6 <_exit>
__assert_func():
1c0037c8 <__assert_func> lui	a5,0x1c009
1c0037cc <__assert_func+0x4> lw	a5,-956(a5) # 1c008c44 <_impure_ptr>
1c0037d0 <__assert_func+0x8> addi	sp,sp,-16
1c0037d2 <__assert_func+0xa> mv	a6,a2
1c0037d4 <__assert_func+0xc> sw	ra,12(sp)
1c0037d6 <__assert_func+0xe> mv	a7,a0
1c0037d8 <__assert_func+0x10> mv	a4,a1
1c0037da <__assert_func+0x12> lw	a0,12(a5)
1c0037dc <__assert_func+0x14> mv	a2,a3
1c0037de <__assert_func+0x16> beqz	a6,1c0037fa <__assert_func+0x32>
1c0037e2 <__assert_func+0x1a> lui	a5,0x1c009
1c0037e6 <__assert_func+0x1e> addi	a5,a5,-1632 # 1c0089a0 <__func__.0+0x15c>
1c0037ea <__assert_func+0x22> lui	a1,0x1c009
1c0037ee <__assert_func+0x26> mv	a3,a7
1c0037f0 <__assert_func+0x28> addi	a1,a1,-1616 # 1c0089b0 <__func__.0+0x16c>
1c0037f4 <__assert_func+0x2c> jal	1c00387a <fiprintf>
1c0037f6 <__assert_func+0x2e> jal	ra,1c0037b8 <abort>
1c0037fa <__assert_func+0x32> lui	a6,0x1c009
1c0037fe <__assert_func+0x36> addi	a5,a6,-1620 # 1c0089ac <__func__.0+0x168>
1c003802 <__assert_func+0x3a> addi	a6,a6,-1620
1c003806 <__assert_func+0x3e> j	1c0037ea <__assert_func+0x22>
atexit():
1c003808 <atexit> mv	a1,a0
1c00380a <atexit+0x2> li	a3,0
1c00380c <atexit+0x4> li	a2,0
1c00380e <atexit+0x6> li	a0,0
1c003810 <atexit+0x8> j	1c004276 <__register_exitproc>
exit():
1c003814 <exit> addi	sp,sp,-16
1c003816 <exit+0x2> lui	a5,0x1c004
1c00381a <exit+0x6> sw	s0,8(sp)
1c00381c <exit+0x8> sw	ra,12(sp)
1c00381e <exit+0xa> addi	a5,a5,754 # 1c0042f2 <__call_exitprocs>
1c003822 <exit+0xe> mv	s0,a0
1c003824 <exit+0x10> beqz	a5,1c00382c <exit+0x18>
1c003826 <exit+0x12> li	a1,0
1c003828 <exit+0x14> jal	ra,1c0042f2 <__call_exitprocs>
1c00382c <exit+0x18> lui	a5,0x1c009
1c003830 <exit+0x1c> lw	a0,-1064(a5) # 1c008bd8 <_global_impure_ptr>
1c003834 <exit+0x20> lw	a5,40(a0)
1c003836 <exit+0x22> beqz	a5,1c00383a <exit+0x26>
1c003838 <exit+0x24> jalr	a5
1c00383a <exit+0x26> mv	a0,s0
1c00383c <exit+0x28> jal	ra,1c0029b6 <_exit>
__libc_fini_array():
1c003840 <__libc_fini_array> addi	sp,sp,-16
1c003842 <__libc_fini_array+0x2> lui	a5,0x1c009
1c003846 <__libc_fini_array+0x6> sw	s0,8(sp)
1c003848 <__libc_fini_array+0x8> lui	s0,0x1c009
1c00384c <__libc_fini_array+0xc> addi	a4,a5,-1060 # 1c008bdc <impure_data>
1c003850 <__libc_fini_array+0x10> addi	s0,s0,-1060 # 1c008bdc <impure_data>
1c003854 <__libc_fini_array+0x14> sub	s0,s0,a4
1c003856 <__libc_fini_array+0x16> sw	s1,4(sp)
1c003858 <__libc_fini_array+0x18> sw	ra,12(sp)
1c00385a <__libc_fini_array+0x1a> srai	s0,s0,0x2
1c00385c <__libc_fini_array+0x1c> addi	s1,a5,-1060
1c003860 <__libc_fini_array+0x20> bnez	s0,1c00386c <__libc_fini_array+0x2c>
1c003862 <__libc_fini_array+0x22> lw	ra,12(sp)
1c003864 <__libc_fini_array+0x24> lw	s0,8(sp)
1c003866 <__libc_fini_array+0x26> lw	s1,4(sp)
1c003868 <__libc_fini_array+0x28> addi	sp,sp,16
1c00386a <__libc_fini_array+0x2a> ret
1c00386c <__libc_fini_array+0x2c> addi	s0,s0,-1
1c00386e <__libc_fini_array+0x2e> slli	a5,s0,0x2
1c003872 <__libc_fini_array+0x32> add	a5,a5,s1
1c003874 <__libc_fini_array+0x34> lw	a5,0(a5)
1c003876 <__libc_fini_array+0x36> jalr	a5
1c003878 <__libc_fini_array+0x38> j	1c003860 <__libc_fini_array+0x20>
fprintf():
1c00387a <fiprintf> addi	sp,sp,-64
1c00387c <fiprintf+0x2> sw	a5,52(sp)
1c00387e <fiprintf+0x4> lui	a5,0x1c009
1c003882 <fiprintf+0x8> sw	a2,40(sp)
1c003884 <fiprintf+0xa> mv	a2,a1
1c003886 <fiprintf+0xc> mv	a1,a0
1c003888 <fiprintf+0xe> lw	a0,-956(a5) # 1c008c44 <_impure_ptr>
1c00388c <fiprintf+0x12> sw	a3,44(sp)
1c00388e <fiprintf+0x14> addi	a3,sp,40
1c003890 <fiprintf+0x16> sw	ra,28(sp)
1c003892 <fiprintf+0x18> sw	a4,48(sp)
1c003894 <fiprintf+0x1a> sw	a6,56(sp)
1c003896 <fiprintf+0x1c> sw	a7,60(sp)
1c003898 <fiprintf+0x1e> sw	a3,12(sp)
1c00389a <fiprintf+0x20> jal	1c003b0c <_vfiprintf_r>
1c00389c <fiprintf+0x22> lw	ra,28(sp)
1c00389e <fiprintf+0x24> addi	sp,sp,64
1c0038a0 <fiprintf+0x26> ret
__libc_init_array():
1c0038a2 <__libc_init_array> addi	sp,sp,-16
1c0038a4 <__libc_init_array+0x2> sw	s0,8(sp)
1c0038a6 <__libc_init_array+0x4> sw	s1,4(sp)
1c0038a8 <__libc_init_array+0x6> lui	s0,0x1c009
1c0038ac <__libc_init_array+0xa> lui	s1,0x1c009
1c0038b0 <__libc_init_array+0xe> addi	a5,s1,-1060 # 1c008bdc <impure_data>
1c0038b4 <__libc_init_array+0x12> addi	s0,s0,-1060 # 1c008bdc <impure_data>
1c0038b8 <__libc_init_array+0x16> sub	s0,s0,a5
1c0038ba <__libc_init_array+0x18> sw	s2,0(sp)
1c0038bc <__libc_init_array+0x1a> sw	ra,12(sp)
1c0038be <__libc_init_array+0x1c> srai	s0,s0,0x2
1c0038c0 <__libc_init_array+0x1e> addi	s1,s1,-1060
1c0038c4 <__libc_init_array+0x22> li	s2,0
1c0038c6 <__libc_init_array+0x24> bne	s2,s0,1c0038f4 <__libc_init_array+0x52>
1c0038ca <__libc_init_array+0x28> lui	s1,0x1c009
1c0038ce <__libc_init_array+0x2c> lui	s0,0x1c009
1c0038d2 <__libc_init_array+0x30> addi	a5,s1,-1060 # 1c008bdc <impure_data>
1c0038d6 <__libc_init_array+0x34> addi	s0,s0,-1060 # 1c008bdc <impure_data>
1c0038da <__libc_init_array+0x38> sub	s0,s0,a5
1c0038dc <__libc_init_array+0x3a> srai	s0,s0,0x2
1c0038de <__libc_init_array+0x3c> addi	s1,s1,-1060
1c0038e2 <__libc_init_array+0x40> li	s2,0
1c0038e4 <__libc_init_array+0x42> bne	s2,s0,1c0038fe <__libc_init_array+0x5c>
1c0038e8 <__libc_init_array+0x46> lw	ra,12(sp)
1c0038ea <__libc_init_array+0x48> lw	s0,8(sp)
1c0038ec <__libc_init_array+0x4a> lw	s1,4(sp)
1c0038ee <__libc_init_array+0x4c> lw	s2,0(sp)
1c0038f0 <__libc_init_array+0x4e> addi	sp,sp,16
1c0038f2 <__libc_init_array+0x50> ret
1c0038f4 <__libc_init_array+0x52> lw	a5,0(s1)
1c0038f6 <__libc_init_array+0x54> addi	s2,s2,1
1c0038f8 <__libc_init_array+0x56> addi	s1,s1,4
1c0038fa <__libc_init_array+0x58> jalr	a5
1c0038fc <__libc_init_array+0x5a> j	1c0038c6 <__libc_init_array+0x24>
1c0038fe <__libc_init_array+0x5c> lw	a5,0(s1)
1c003900 <__libc_init_array+0x5e> addi	s2,s2,1
1c003902 <__libc_init_array+0x60> addi	s1,s1,4
1c003904 <__libc_init_array+0x62> jalr	a5
1c003906 <__libc_init_array+0x64> j	1c0038e4 <__libc_init_array+0x42>
malloc():
1c003908 <malloc> lui	a5,0x1c009
1c00390c <malloc+0x4> mv	a1,a0
1c00390e <malloc+0x6> lw	a0,-956(a5) # 1c008c44 <_impure_ptr>
1c003912 <malloc+0xa> j	1c0039c8 <_malloc_r>
free():
1c003914 <free> lui	a5,0x1c009
1c003918 <free+0x4> mv	a1,a0
1c00391a <free+0x6> lw	a0,-956(a5) # 1c008c44 <_impure_ptr>
1c00391e <free+0xa> j	1c003920 <_free_r>
_free_r():
1c003920 <_free_r> beqz	a1,1c0039c6 <_free_r+0xa6>
1c003922 <_free_r+0x2> lw	a5,-4(a1)
1c003926 <_free_r+0x6> addi	sp,sp,-32
1c003928 <_free_r+0x8> sw	s0,24(sp)
1c00392a <_free_r+0xa> sw	ra,28(sp)
1c00392c <_free_r+0xc> addi	s0,a1,-4
1c003930 <_free_r+0x10> bgez	a5,1c003936 <_free_r+0x16>
1c003934 <_free_r+0x14> add	s0,s0,a5
1c003936 <_free_r+0x16> sw	a0,12(sp)
1c003938 <_free_r+0x18> jal	ra,1c002a66 <__malloc_lock>
1c00393c <_free_r+0x1c> lw	a5,-584(gp) # 1c009194 <__malloc_free_list>
1c003940 <_free_r+0x20> lw	a0,12(sp)
1c003942 <_free_r+0x22> mv	a2,a4
1c003944 <_free_r+0x24> bnez	a5,1c003958 <_free_r+0x38>
1c003946 <_free_r+0x26> sw	zero,4(s0)
1c00394a <_free_r+0x2a> sw	s0,-584(gp) # 1c009194 <__malloc_free_list>
1c00394e <_free_r+0x2e> lw	s0,24(sp)
1c003950 <_free_r+0x30> lw	ra,28(sp)
1c003952 <_free_r+0x32> addi	sp,sp,32
1c003954 <_free_r+0x34> j	1c002a6a <__malloc_unlock>
1c003958 <_free_r+0x38> bgeu	s0,a5,1c003976 <_free_r+0x56>
1c00395c <_free_r+0x3c> lw	a3,0(s0)
1c00395e <_free_r+0x3e> add	a4,s0,a3
1c003962 <_free_r+0x42> bne	a5,a4,1c00396e <_free_r+0x4e>
1c003966 <_free_r+0x46> lw	a4,0(a5)
1c003968 <_free_r+0x48> lw	a5,4(a5)
1c00396a <_free_r+0x4a> add	a4,a4,a3
1c00396c <_free_r+0x4c> sw	a4,0(s0)
1c00396e <_free_r+0x4e> sw	a5,4(s0)
1c003970 <_free_r+0x50> sw	s0,-584(gp) # 1c009194 <__malloc_free_list>
1c003974 <_free_r+0x54> j	1c00394e <_free_r+0x2e>
1c003976 <_free_r+0x56> mv	a4,a5
1c003978 <_free_r+0x58> lw	a5,4(a5)
1c00397a <_free_r+0x5a> beqz	a5,1c003980 <_free_r+0x60>
1c00397c <_free_r+0x5c> bgeu	s0,a5,1c003976 <_free_r+0x56>
1c003980 <_free_r+0x60> lw	a3,0(a4)
1c003982 <_free_r+0x62> add	a2,a4,a3
1c003986 <_free_r+0x66> bne	a2,s0,1c0039a4 <_free_r+0x84>
1c00398a <_free_r+0x6a> lw	a2,0(s0)
1c00398c <_free_r+0x6c> add	a3,a3,a2
1c00398e <_free_r+0x6e> sw	a3,0(a4)
1c003990 <_free_r+0x70> add	a2,a4,a3
1c003994 <_free_r+0x74> bne	a5,a2,1c00394e <_free_r+0x2e>
1c003998 <_free_r+0x78> lw	a2,0(a5)
1c00399a <_free_r+0x7a> lw	a5,4(a5)
1c00399c <_free_r+0x7c> add	a3,a3,a2
1c00399e <_free_r+0x7e> sw	a3,0(a4)
1c0039a0 <_free_r+0x80> sw	a5,4(a4)
1c0039a2 <_free_r+0x82> j	1c00394e <_free_r+0x2e>
1c0039a4 <_free_r+0x84> bgeu	s0,a2,1c0039ae <_free_r+0x8e>
1c0039a8 <_free_r+0x88> li	a5,12
1c0039aa <_free_r+0x8a> sw	a5,0(a0)
1c0039ac <_free_r+0x8c> j	1c00394e <_free_r+0x2e>
1c0039ae <_free_r+0x8e> lw	a2,0(s0)
1c0039b0 <_free_r+0x90> add	a3,s0,a2
1c0039b4 <_free_r+0x94> bne	a5,a3,1c0039c0 <_free_r+0xa0>
1c0039b8 <_free_r+0x98> lw	a3,0(a5)
1c0039ba <_free_r+0x9a> lw	a5,4(a5)
1c0039bc <_free_r+0x9c> add	a3,a3,a2
1c0039be <_free_r+0x9e> sw	a3,0(s0)
1c0039c0 <_free_r+0xa0> sw	a5,4(s0)
1c0039c2 <_free_r+0xa2> sw	s0,4(a4)
1c0039c4 <_free_r+0xa4> j	1c00394e <_free_r+0x2e>
1c0039c6 <_free_r+0xa6> ret
_malloc_r():
1c0039c8 <_malloc_r> addi	sp,sp,-32
1c0039ca <_malloc_r+0x2> sw	s1,20(sp)
1c0039cc <_malloc_r+0x4> addi	s1,a1,3
1c0039d0 <_malloc_r+0x8> andi	s1,s1,-4
1c0039d2 <_malloc_r+0xa> sw	s2,16(sp)
1c0039d4 <_malloc_r+0xc> sw	ra,28(sp)
1c0039d6 <_malloc_r+0xe> sw	s0,24(sp)
1c0039d8 <_malloc_r+0x10> sw	s3,12(sp)
1c0039da <_malloc_r+0x12> addi	s1,s1,8
1c0039dc <_malloc_r+0x14> li	a5,12
1c0039de <_malloc_r+0x16> mv	s2,a0
1c0039e0 <_malloc_r+0x18> bgeu	s1,a5,1c003a26 <_malloc_r+0x5e>
1c0039e4 <_malloc_r+0x1c> li	s1,12
1c0039e6 <_malloc_r+0x1e> bltu	s1,a1,1c003a2a <_malloc_r+0x62>
1c0039ea <_malloc_r+0x22> mv	a0,s2
1c0039ec <_malloc_r+0x24> jal	ra,1c002a66 <__malloc_lock>
1c0039f0 <_malloc_r+0x28> lw	a4,-584(gp) # 1c009194 <__malloc_free_list>
1c0039f4 <_malloc_r+0x2c> addi	a3,gp,-584 # 1c009194 <__malloc_free_list>
1c0039f8 <_malloc_r+0x30> mv	s0,a4
1c0039fa <_malloc_r+0x32> bnez	s0,1c003a40 <_malloc_r+0x78>
1c0039fc <_malloc_r+0x34> addi	s0,gp,-580 # 1c009198 <__malloc_sbrk_start>
1c003a00 <_malloc_r+0x38> lw	a5,0(s0)
1c003a02 <_malloc_r+0x3a> bnez	a5,1c003a0c <_malloc_r+0x44>
1c003a04 <_malloc_r+0x3c> li	a1,0
1c003a06 <_malloc_r+0x3e> mv	a0,s2
1c003a08 <_malloc_r+0x40> jal	1c003fdc <_sbrk_r>
1c003a0a <_malloc_r+0x42> sw	a0,0(s0)
1c003a0c <_malloc_r+0x44> mv	a1,s1
1c003a0e <_malloc_r+0x46> mv	a0,s2
1c003a10 <_malloc_r+0x48> jal	1c003fdc <_sbrk_r>
1c003a12 <_malloc_r+0x4a> li	s3,-1
1c003a14 <_malloc_r+0x4c> bne	a0,s3,1c003a88 <_malloc_r+0xc0>
1c003a18 <_malloc_r+0x50> li	a5,12
1c003a1a <_malloc_r+0x52> sw	a5,0(s2)
1c003a1e <_malloc_r+0x56> mv	a0,s2
1c003a20 <_malloc_r+0x58> jal	ra,1c002a6a <__malloc_unlock>
1c003a24 <_malloc_r+0x5c> j	1c003a30 <_malloc_r+0x68>
1c003a26 <_malloc_r+0x5e> bgez	s1,1c0039e6 <_malloc_r+0x1e>
1c003a2a <_malloc_r+0x62> li	a5,12
1c003a2c <_malloc_r+0x64> sw	a5,0(s2)
1c003a30 <_malloc_r+0x68> li	a0,0
1c003a32 <_malloc_r+0x6a> lw	ra,28(sp)
1c003a34 <_malloc_r+0x6c> lw	s0,24(sp)
1c003a36 <_malloc_r+0x6e> lw	s1,20(sp)
1c003a38 <_malloc_r+0x70> lw	s2,16(sp)
1c003a3a <_malloc_r+0x72> lw	s3,12(sp)
1c003a3c <_malloc_r+0x74> addi	sp,sp,32
1c003a3e <_malloc_r+0x76> ret
1c003a40 <_malloc_r+0x78> lw	a5,0(s0)
1c003a42 <_malloc_r+0x7a> sub	a5,a5,s1
1c003a44 <_malloc_r+0x7c> bltz	a5,1c003a82 <_malloc_r+0xba>
1c003a48 <_malloc_r+0x80> li	a2,11
1c003a4a <_malloc_r+0x82> bgeu	a2,a5,1c003a56 <_malloc_r+0x8e>
1c003a4e <_malloc_r+0x86> sw	a5,0(s0)
1c003a50 <_malloc_r+0x88> add	s0,s0,a5
1c003a52 <_malloc_r+0x8a> sw	s1,0(s0)
1c003a54 <_malloc_r+0x8c> j	1c003a5e <_malloc_r+0x96>
1c003a56 <_malloc_r+0x8e> lw	a5,4(s0)
1c003a58 <_malloc_r+0x90> bne	a4,s0,1c003a7e <_malloc_r+0xb6>
1c003a5c <_malloc_r+0x94> sw	a5,0(a3)
1c003a5e <_malloc_r+0x96> mv	a0,s2
1c003a60 <_malloc_r+0x98> jal	ra,1c002a6a <__malloc_unlock>
1c003a64 <_malloc_r+0x9c> addi	a0,s0,11
1c003a68 <_malloc_r+0xa0> addi	a5,s0,4
1c003a6c <_malloc_r+0xa4> andi	a0,a0,-8
1c003a6e <_malloc_r+0xa6> sub	a4,a0,a5
1c003a72 <_malloc_r+0xaa> beq	a0,a5,1c003a32 <_malloc_r+0x6a>
1c003a76 <_malloc_r+0xae> add	s0,s0,a4
1c003a78 <_malloc_r+0xb0> sub	a5,a5,a0
1c003a7a <_malloc_r+0xb2> sw	a5,0(s0)
1c003a7c <_malloc_r+0xb4> j	1c003a32 <_malloc_r+0x6a>
1c003a7e <_malloc_r+0xb6> sw	a5,4(a4)
1c003a80 <_malloc_r+0xb8> j	1c003a5e <_malloc_r+0x96>
1c003a82 <_malloc_r+0xba> mv	a4,s0
1c003a84 <_malloc_r+0xbc> lw	s0,4(s0)
1c003a86 <_malloc_r+0xbe> j	1c0039fa <_malloc_r+0x32>
1c003a88 <_malloc_r+0xc0> addi	s0,a0,3
1c003a8c <_malloc_r+0xc4> andi	s0,s0,-4
1c003a8e <_malloc_r+0xc6> beq	a0,s0,1c003a52 <_malloc_r+0x8a>
1c003a92 <_malloc_r+0xca> sub	a1,s0,a0
1c003a96 <_malloc_r+0xce> mv	a0,s2
1c003a98 <_malloc_r+0xd0> jal	1c003fdc <_sbrk_r>
1c003a9a <_malloc_r+0xd2> bne	a0,s3,1c003a52 <_malloc_r+0x8a>
1c003a9e <_malloc_r+0xd6> j	1c003a18 <_malloc_r+0x50>
__sfputc_r():
1c003aa0 <__sfputc_r> lw	a5,8(a2)
1c003aa2 <__sfputc_r+0x2> addi	a5,a5,-1
1c003aa4 <__sfputc_r+0x4> sw	a5,8(a2)
1c003aa6 <__sfputc_r+0x6> bgez	a5,1c003ab8 <__sfputc_r+0x18>
1c003aaa <__sfputc_r+0xa> lw	a4,24(a2)
1c003aac <__sfputc_r+0xc> blt	a5,a4,1c003ab6 <__sfputc_r+0x16>
1c003ab0 <__sfputc_r+0x10> li	a5,10
1c003ab2 <__sfputc_r+0x12> bne	a1,a5,1c003ab8 <__sfputc_r+0x18>
1c003ab6 <__sfputc_r+0x16> j	1c0040aa <__swbuf_r>
1c003ab8 <__sfputc_r+0x18> lw	a5,0(a2)
1c003aba <__sfputc_r+0x1a> mv	a0,a1
1c003abc <__sfputc_r+0x1c> addi	a4,a5,1
1c003ac0 <__sfputc_r+0x20> sw	a4,0(a2)
1c003ac2 <__sfputc_r+0x22> sb	a1,0(a5)
1c003ac6 <__sfputc_r+0x26> ret
__sfputs_r():
1c003ac8 <__sfputs_r> addi	sp,sp,-32
1c003aca <__sfputs_r+0x2> sw	s0,24(sp)
1c003acc <__sfputs_r+0x4> sw	s1,20(sp)
1c003ace <__sfputs_r+0x6> sw	s2,16(sp)
1c003ad0 <__sfputs_r+0x8> sw	s3,12(sp)
1c003ad2 <__sfputs_r+0xa> sw	s4,8(sp)
1c003ad4 <__sfputs_r+0xc> sw	ra,28(sp)
1c003ad6 <__sfputs_r+0xe> mv	s2,a0
1c003ad8 <__sfputs_r+0x10> mv	s3,a1
1c003ada <__sfputs_r+0x12> mv	s0,a2
1c003adc <__sfputs_r+0x14> add	s1,a2,a3
1c003ae0 <__sfputs_r+0x18> li	s4,-1
1c003ae2 <__sfputs_r+0x1a> bne	s0,s1,1c003aea <__sfputs_r+0x22>
1c003ae6 <__sfputs_r+0x1e> li	a0,0
1c003ae8 <__sfputs_r+0x20> j	1c003afc <__sfputs_r+0x34>
1c003aea <__sfputs_r+0x22> lbu	a1,0(s0)
1c003aee <__sfputs_r+0x26> mv	a2,s3
1c003af0 <__sfputs_r+0x28> mv	a0,s2
1c003af2 <__sfputs_r+0x2a> jal	ra,1c003aa0 <__sfputc_r>
1c003af6 <__sfputs_r+0x2e> addi	s0,s0,1
1c003af8 <__sfputs_r+0x30> bne	a0,s4,1c003ae2 <__sfputs_r+0x1a>
1c003afc <__sfputs_r+0x34> lw	ra,28(sp)
1c003afe <__sfputs_r+0x36> lw	s0,24(sp)
1c003b00 <__sfputs_r+0x38> lw	s1,20(sp)
1c003b02 <__sfputs_r+0x3a> lw	s2,16(sp)
1c003b04 <__sfputs_r+0x3c> lw	s3,12(sp)
1c003b06 <__sfputs_r+0x3e> lw	s4,8(sp)
1c003b08 <__sfputs_r+0x40> addi	sp,sp,32
1c003b0a <__sfputs_r+0x42> ret
_vfiprintf_r():
1c003b0c <_vfiprintf_r> addi	sp,sp,-176
1c003b0e <_vfiprintf_r+0x2> sw	s0,168(sp)
1c003b10 <_vfiprintf_r+0x4> sw	s1,164(sp)
1c003b12 <_vfiprintf_r+0x6> sw	s2,160(sp)
1c003b14 <_vfiprintf_r+0x8> sw	s3,156(sp)
1c003b16 <_vfiprintf_r+0xa> sw	ra,172(sp)
1c003b18 <_vfiprintf_r+0xc> sw	s4,152(sp)
1c003b1a <_vfiprintf_r+0xe> sw	s5,148(sp)
1c003b1c <_vfiprintf_r+0x10> sw	s6,144(sp)
1c003b1e <_vfiprintf_r+0x12> sw	s7,140(sp)
1c003b20 <_vfiprintf_r+0x14> sw	s8,136(sp)
1c003b22 <_vfiprintf_r+0x16> sw	s9,132(sp)
1c003b24 <_vfiprintf_r+0x18> sw	s10,128(sp)
1c003b26 <_vfiprintf_r+0x1a> sw	s11,124(sp)
1c003b28 <_vfiprintf_r+0x1c> mv	s3,a0
1c003b2a <_vfiprintf_r+0x1e> mv	s1,a1
1c003b2c <_vfiprintf_r+0x20> mv	s2,a2
1c003b2e <_vfiprintf_r+0x22> mv	s0,a3
1c003b30 <_vfiprintf_r+0x24> beqz	a0,1c003b3a <_vfiprintf_r+0x2e>
1c003b32 <_vfiprintf_r+0x26> lw	a5,24(a0)
1c003b34 <_vfiprintf_r+0x28> bnez	a5,1c003b3a <_vfiprintf_r+0x2e>
1c003b36 <_vfiprintf_r+0x2a> jal	ra,1c004624 <__sinit>
1c003b3a <_vfiprintf_r+0x2e> lui	a5,0x1c009
1c003b3e <_vfiprintf_r+0x32> addi	a5,a5,-1516 # 1c008a14 <__sf_fake_stdin>
1c003b42 <_vfiprintf_r+0x36> bne	s1,a5,1c003c2e <_vfiprintf_r+0x122>
1c003b46 <_vfiprintf_r+0x3a> lw	s1,4(s3)
1c003b4a <_vfiprintf_r+0x3e> lhu	a5,12(s1)
1c003b4e <_vfiprintf_r+0x42> andi	a5,a5,8
1c003b50 <_vfiprintf_r+0x44> beqz	a5,1c003c52 <_vfiprintf_r+0x146>
1c003b54 <_vfiprintf_r+0x48> lw	a5,16(s1)
1c003b56 <_vfiprintf_r+0x4a> beqz	a5,1c003c52 <_vfiprintf_r+0x146>
1c003b5a <_vfiprintf_r+0x4e> li	a5,32
1c003b5e <_vfiprintf_r+0x52> sb	a5,41(sp)
1c003b62 <_vfiprintf_r+0x56> li	a5,48
1c003b66 <_vfiprintf_r+0x5a> sw	zero,36(sp)
1c003b68 <_vfiprintf_r+0x5c> sb	a5,42(sp)
1c003b6c <_vfiprintf_r+0x60> sw	s0,12(sp)
1c003b6e <_vfiprintf_r+0x62> li	s9,37
1c003b72 <_vfiprintf_r+0x66> lui	s6,0x1c009
1c003b76 <_vfiprintf_r+0x6a> lui	s7,0x1c009
1c003b7a <_vfiprintf_r+0x6e> lui	s10,0x1c009
1c003b7e <_vfiprintf_r+0x72> lui	s8,0x1c004
1c003b82 <_vfiprintf_r+0x76> li	s5,0
1c003b86 <_vfiprintf_r+0x7a> mv	s0,s2
1c003b88 <_vfiprintf_r+0x7c> lbu	a5,0(s0)
1c003b8c <_vfiprintf_r+0x80> beqz	a5,1c003b92 <_vfiprintf_r+0x86>
1c003b8e <_vfiprintf_r+0x82> bne	a5,s9,1c003c7c <_vfiprintf_r+0x170>
1c003b92 <_vfiprintf_r+0x86> sub	s11,s0,s2
1c003b96 <_vfiprintf_r+0x8a> beq	s0,s2,1c003bb2 <_vfiprintf_r+0xa6>
1c003b9a <_vfiprintf_r+0x8e> mv	a3,s11
1c003b9c <_vfiprintf_r+0x90> mv	a2,s2
1c003b9e <_vfiprintf_r+0x92> mv	a1,s1
1c003ba0 <_vfiprintf_r+0x94> mv	a0,s3
1c003ba2 <_vfiprintf_r+0x96> jal	ra,1c003ac8 <__sfputs_r>
1c003ba6 <_vfiprintf_r+0x9a> li	a5,-1
1c003ba8 <_vfiprintf_r+0x9c> beq	a0,a5,1c003d92 <_vfiprintf_r+0x286>
1c003bac <_vfiprintf_r+0xa0> lw	a5,36(sp)
1c003bae <_vfiprintf_r+0xa2> add	a5,a5,s11
1c003bb0 <_vfiprintf_r+0xa4> sw	a5,36(sp)
1c003bb2 <_vfiprintf_r+0xa6> lbu	a5,0(s0)
1c003bb6 <_vfiprintf_r+0xaa> beqz	a5,1c003d92 <_vfiprintf_r+0x286>
1c003bba <_vfiprintf_r+0xae> li	a5,-1
1c003bbc <_vfiprintf_r+0xb0> addi	s2,s0,1
1c003bc0 <_vfiprintf_r+0xb4> sw	zero,16(sp)
1c003bc2 <_vfiprintf_r+0xb6> sw	zero,28(sp)
1c003bc4 <_vfiprintf_r+0xb8> sw	a5,20(sp)
1c003bc6 <_vfiprintf_r+0xba> sw	zero,24(sp)
1c003bc8 <_vfiprintf_r+0xbc> sb	zero,83(sp)
1c003bcc <_vfiprintf_r+0xc0> sw	zero,104(sp)
1c003bce <_vfiprintf_r+0xc2> li	s11,1
1c003bd0 <_vfiprintf_r+0xc4> lbu	a1,0(s2)
1c003bd4 <_vfiprintf_r+0xc8> li	a2,5
1c003bd6 <_vfiprintf_r+0xca> addi	a0,s6,-1568 # 1c0089e0 <__func__.0+0x19c>
1c003bda <_vfiprintf_r+0xce> jal	ra,1c00489a <memchr>
1c003bde <_vfiprintf_r+0xd2> lw	a5,16(sp)
1c003be0 <_vfiprintf_r+0xd4> addi	s0,s2,1
1c003be4 <_vfiprintf_r+0xd8> bnez	a0,1c003c80 <_vfiprintf_r+0x174>
1c003be6 <_vfiprintf_r+0xda> andi	a4,a5,16
1c003bea <_vfiprintf_r+0xde> beqz	a4,1c003bf4 <_vfiprintf_r+0xe8>
1c003bec <_vfiprintf_r+0xe0> li	a4,32
1c003bf0 <_vfiprintf_r+0xe4> sb	a4,83(sp)
1c003bf4 <_vfiprintf_r+0xe8> andi	a4,a5,8
1c003bf8 <_vfiprintf_r+0xec> beqz	a4,1c003c02 <_vfiprintf_r+0xf6>
1c003bfa <_vfiprintf_r+0xee> li	a4,43
1c003bfe <_vfiprintf_r+0xf2> sb	a4,83(sp)
1c003c02 <_vfiprintf_r+0xf6> lbu	a3,0(s2)
1c003c06 <_vfiprintf_r+0xfa> li	a4,42
1c003c0a <_vfiprintf_r+0xfe> beq	a3,a4,1c003c92 <_vfiprintf_r+0x186>
1c003c0e <_vfiprintf_r+0x102> lw	a5,28(sp)
1c003c10 <_vfiprintf_r+0x104> mv	s0,s2
1c003c12 <_vfiprintf_r+0x106> li	a3,0
1c003c14 <_vfiprintf_r+0x108> li	a2,9
1c003c16 <_vfiprintf_r+0x10a> li	a0,10
1c003c18 <_vfiprintf_r+0x10c> lbu	a4,0(s0)
1c003c1c <_vfiprintf_r+0x110> addi	a1,s0,1
1c003c20 <_vfiprintf_r+0x114> addi	a4,a4,-48
1c003c24 <_vfiprintf_r+0x118> bgeu	a2,a4,1c003cdc <_vfiprintf_r+0x1d0>
1c003c28 <_vfiprintf_r+0x11c> beqz	a3,1c003ca2 <_vfiprintf_r+0x196>
1c003c2a <_vfiprintf_r+0x11e> sw	a5,28(sp)
1c003c2c <_vfiprintf_r+0x120> j	1c003ca2 <_vfiprintf_r+0x196>
1c003c2e <_vfiprintf_r+0x122> lui	a5,0x1c009
1c003c32 <_vfiprintf_r+0x126> addi	a5,a5,-1484 # 1c008a34 <__sf_fake_stdout>
1c003c36 <_vfiprintf_r+0x12a> bne	s1,a5,1c003c40 <_vfiprintf_r+0x134>
1c003c3a <_vfiprintf_r+0x12e> lw	s1,8(s3)
1c003c3e <_vfiprintf_r+0x132> j	1c003b4a <_vfiprintf_r+0x3e>
1c003c40 <_vfiprintf_r+0x134> lui	a5,0x1c009
1c003c44 <_vfiprintf_r+0x138> addi	a5,a5,-1548 # 1c0089f4 <__sf_fake_stderr>
1c003c48 <_vfiprintf_r+0x13c> bne	s1,a5,1c003b4a <_vfiprintf_r+0x3e>
1c003c4c <_vfiprintf_r+0x140> lw	s1,12(s3)
1c003c50 <_vfiprintf_r+0x144> j	1c003b4a <_vfiprintf_r+0x3e>
1c003c52 <_vfiprintf_r+0x146> mv	a1,s1
1c003c54 <_vfiprintf_r+0x148> mv	a0,s3
1c003c56 <_vfiprintf_r+0x14a> jal	1c00416a <__swsetup_r>
1c003c58 <_vfiprintf_r+0x14c> beqz	a0,1c003b5a <_vfiprintf_r+0x4e>
1c003c5c <_vfiprintf_r+0x150> li	a0,-1
1c003c5e <_vfiprintf_r+0x152> lw	ra,172(sp)
1c003c60 <_vfiprintf_r+0x154> lw	s0,168(sp)
1c003c62 <_vfiprintf_r+0x156> lw	s1,164(sp)
1c003c64 <_vfiprintf_r+0x158> lw	s2,160(sp)
1c003c66 <_vfiprintf_r+0x15a> lw	s3,156(sp)
1c003c68 <_vfiprintf_r+0x15c> lw	s4,152(sp)
1c003c6a <_vfiprintf_r+0x15e> lw	s5,148(sp)
1c003c6c <_vfiprintf_r+0x160> lw	s6,144(sp)
1c003c6e <_vfiprintf_r+0x162> lw	s7,140(sp)
1c003c70 <_vfiprintf_r+0x164> lw	s8,136(sp)
1c003c72 <_vfiprintf_r+0x166> lw	s9,132(sp)
1c003c74 <_vfiprintf_r+0x168> lw	s10,128(sp)
1c003c76 <_vfiprintf_r+0x16a> lw	s11,124(sp)
1c003c78 <_vfiprintf_r+0x16c> addi	sp,sp,176
1c003c7a <_vfiprintf_r+0x16e> ret
1c003c7c <_vfiprintf_r+0x170> addi	s0,s0,1
1c003c7e <_vfiprintf_r+0x172> j	1c003b88 <_vfiprintf_r+0x7c>
1c003c80 <_vfiprintf_r+0x174> addi	a4,s6,-1568
1c003c84 <_vfiprintf_r+0x178> sub	a0,a0,a4
1c003c86 <_vfiprintf_r+0x17a> sll	a0,s11,a0
1c003c8a <_vfiprintf_r+0x17e> or	a5,a5,a0
1c003c8c <_vfiprintf_r+0x180> sw	a5,16(sp)
1c003c8e <_vfiprintf_r+0x182> mv	s2,s0
1c003c90 <_vfiprintf_r+0x184> j	1c003bd0 <_vfiprintf_r+0xc4>
1c003c92 <_vfiprintf_r+0x186> lw	a4,12(sp)
1c003c94 <_vfiprintf_r+0x188> addi	a3,a4,4
1c003c98 <_vfiprintf_r+0x18c> lw	a4,0(a4)
1c003c9a <_vfiprintf_r+0x18e> sw	a3,12(sp)
1c003c9c <_vfiprintf_r+0x190> bltz	a4,1c003cce <_vfiprintf_r+0x1c2>
1c003ca0 <_vfiprintf_r+0x194> sw	a4,28(sp)
1c003ca2 <_vfiprintf_r+0x196> lbu	a4,0(s0)
1c003ca6 <_vfiprintf_r+0x19a> li	a5,46
1c003caa <_vfiprintf_r+0x19e> bne	a4,a5,1c003d0a <_vfiprintf_r+0x1fe>
1c003cae <_vfiprintf_r+0x1a2> lbu	a4,1(s0)
1c003cb2 <_vfiprintf_r+0x1a6> li	a5,42
1c003cb6 <_vfiprintf_r+0x1aa> bne	a4,a5,1c003cec <_vfiprintf_r+0x1e0>
1c003cba <_vfiprintf_r+0x1ae> lw	a5,12(sp)
1c003cbc <_vfiprintf_r+0x1b0> addi	s0,s0,2
1c003cbe <_vfiprintf_r+0x1b2> addi	a4,a5,4
1c003cc2 <_vfiprintf_r+0x1b6> lw	a5,0(a5)
1c003cc4 <_vfiprintf_r+0x1b8> sw	a4,12(sp)
1c003cc6 <_vfiprintf_r+0x1ba> bltz	a5,1c003ce8 <_vfiprintf_r+0x1dc>
1c003cca <_vfiprintf_r+0x1be> sw	a5,20(sp)
1c003ccc <_vfiprintf_r+0x1c0> j	1c003d0a <_vfiprintf_r+0x1fe>
1c003cce <_vfiprintf_r+0x1c2> neg	a4,a4
1c003cd2 <_vfiprintf_r+0x1c6> ori	a5,a5,2
1c003cd6 <_vfiprintf_r+0x1ca> sw	a4,28(sp)
1c003cd8 <_vfiprintf_r+0x1cc> sw	a5,16(sp)
1c003cda <_vfiprintf_r+0x1ce> j	1c003ca2 <_vfiprintf_r+0x196>
1c003cdc <_vfiprintf_r+0x1d0> mul	a5,a5,a0
1c003ce0 <_vfiprintf_r+0x1d4> mv	s0,a1
1c003ce2 <_vfiprintf_r+0x1d6> li	a3,1
1c003ce4 <_vfiprintf_r+0x1d8> add	a5,a5,a4
1c003ce6 <_vfiprintf_r+0x1da> j	1c003c18 <_vfiprintf_r+0x10c>
1c003ce8 <_vfiprintf_r+0x1dc> li	a5,-1
1c003cea <_vfiprintf_r+0x1de> j	1c003cca <_vfiprintf_r+0x1be>
1c003cec <_vfiprintf_r+0x1e0> addi	s0,s0,1
1c003cee <_vfiprintf_r+0x1e2> sw	zero,20(sp)
1c003cf0 <_vfiprintf_r+0x1e4> li	a3,0
1c003cf2 <_vfiprintf_r+0x1e6> li	a5,0
1c003cf4 <_vfiprintf_r+0x1e8> li	a2,9
1c003cf6 <_vfiprintf_r+0x1ea> li	a0,10
1c003cf8 <_vfiprintf_r+0x1ec> lbu	a4,0(s0)
1c003cfc <_vfiprintf_r+0x1f0> addi	a1,s0,1
1c003d00 <_vfiprintf_r+0x1f4> addi	a4,a4,-48
1c003d04 <_vfiprintf_r+0x1f8> bgeu	a2,a4,1c003d62 <_vfiprintf_r+0x256>
1c003d08 <_vfiprintf_r+0x1fc> bnez	a3,1c003cca <_vfiprintf_r+0x1be>
1c003d0a <_vfiprintf_r+0x1fe> lbu	a1,0(s0)
1c003d0e <_vfiprintf_r+0x202> li	a2,3
1c003d10 <_vfiprintf_r+0x204> addi	a0,s7,-1560 # 1c0089e8 <__func__.0+0x1a4>
1c003d14 <_vfiprintf_r+0x208> jal	ra,1c00489a <memchr>
1c003d18 <_vfiprintf_r+0x20c> beqz	a0,1c003d30 <_vfiprintf_r+0x224>
1c003d1a <_vfiprintf_r+0x20e> addi	a5,s7,-1560
1c003d1e <_vfiprintf_r+0x212> sub	a0,a0,a5
1c003d20 <_vfiprintf_r+0x214> li	a5,64
1c003d24 <_vfiprintf_r+0x218> sll	a5,a5,a0
1c003d28 <_vfiprintf_r+0x21c> lw	a0,16(sp)
1c003d2a <_vfiprintf_r+0x21e> addi	s0,s0,1
1c003d2c <_vfiprintf_r+0x220> or	a0,a0,a5
1c003d2e <_vfiprintf_r+0x222> sw	a0,16(sp)
1c003d30 <_vfiprintf_r+0x224> lbu	a1,0(s0)
1c003d34 <_vfiprintf_r+0x228> li	a2,6
1c003d36 <_vfiprintf_r+0x22a> addi	a0,s10,-1556 # 1c0089ec <__func__.0+0x1a8>
1c003d3a <_vfiprintf_r+0x22e> addi	s2,s0,1
1c003d3e <_vfiprintf_r+0x232> sb	a1,40(sp)
1c003d42 <_vfiprintf_r+0x236> jal	ra,1c00489a <memchr>
1c003d46 <_vfiprintf_r+0x23a> beqz	a0,1c003da2 <_vfiprintf_r+0x296>
1c003d48 <_vfiprintf_r+0x23c> bnez	s5,1c003d76 <_vfiprintf_r+0x26a>
1c003d4c <_vfiprintf_r+0x240> lw	a4,16(sp)
1c003d4e <_vfiprintf_r+0x242> lw	a5,12(sp)
1c003d50 <_vfiprintf_r+0x244> andi	a4,a4,256
1c003d54 <_vfiprintf_r+0x248> beqz	a4,1c003d6e <_vfiprintf_r+0x262>
1c003d56 <_vfiprintf_r+0x24a> addi	a5,a5,4
1c003d58 <_vfiprintf_r+0x24c> sw	a5,12(sp)
1c003d5a <_vfiprintf_r+0x24e> lw	a5,36(sp)
1c003d5c <_vfiprintf_r+0x250> add	a5,a5,s4
1c003d5e <_vfiprintf_r+0x252> sw	a5,36(sp)
1c003d60 <_vfiprintf_r+0x254> j	1c003b86 <_vfiprintf_r+0x7a>
1c003d62 <_vfiprintf_r+0x256> mul	a5,a5,a0
1c003d66 <_vfiprintf_r+0x25a> mv	s0,a1
1c003d68 <_vfiprintf_r+0x25c> li	a3,1
1c003d6a <_vfiprintf_r+0x25e> add	a5,a5,a4
1c003d6c <_vfiprintf_r+0x260> j	1c003cf8 <_vfiprintf_r+0x1ec>
1c003d6e <_vfiprintf_r+0x262> addi	a5,a5,7
1c003d70 <_vfiprintf_r+0x264> andi	a5,a5,-8
1c003d72 <_vfiprintf_r+0x266> addi	a5,a5,8
1c003d74 <_vfiprintf_r+0x268> j	1c003d58 <_vfiprintf_r+0x24c>
1c003d76 <_vfiprintf_r+0x26a> addi	a4,sp,12
1c003d78 <_vfiprintf_r+0x26c> addi	a3,s8,-1336 # 1c003ac8 <__sfputs_r>
1c003d7c <_vfiprintf_r+0x270> mv	a2,s1
1c003d7e <_vfiprintf_r+0x272> addi	a1,sp,16
1c003d80 <_vfiprintf_r+0x274> mv	a0,s3
1c003d82 <_vfiprintf_r+0x276> auipc	ra,0x0
1c003d86 <_vfiprintf_r+0x27a> jalr	zero # 00000000 <__heap_size>
1c003d8a <_vfiprintf_r+0x27e> li	a5,-1
1c003d8c <_vfiprintf_r+0x280> mv	s4,a0
1c003d8e <_vfiprintf_r+0x282> bne	a0,a5,1c003d5a <_vfiprintf_r+0x24e>
1c003d92 <_vfiprintf_r+0x286> lhu	a5,12(s1)
1c003d96 <_vfiprintf_r+0x28a> andi	a5,a5,64
1c003d9a <_vfiprintf_r+0x28e> bnez	a5,1c003c5c <_vfiprintf_r+0x150>
1c003d9e <_vfiprintf_r+0x292> lw	a0,36(sp)
1c003da0 <_vfiprintf_r+0x294> j	1c003c5e <_vfiprintf_r+0x152>
1c003da2 <_vfiprintf_r+0x296> addi	a4,sp,12
1c003da4 <_vfiprintf_r+0x298> addi	a3,s8,-1336
1c003da8 <_vfiprintf_r+0x29c> mv	a2,s1
1c003daa <_vfiprintf_r+0x29e> addi	a1,sp,16
1c003dac <_vfiprintf_r+0x2a0> mv	a0,s3
1c003dae <_vfiprintf_r+0x2a2> jal	ra,1c0049c0 <_printf_i>
1c003db2 <_vfiprintf_r+0x2a6> j	1c003d8a <_vfiprintf_r+0x27e>
printf():
1c003db4 <iprintf> addi	sp,sp,-80
1c003db6 <iprintf+0x2> sw	a5,68(sp)
1c003db8 <iprintf+0x4> lui	a5,0x1c009
1c003dbc <iprintf+0x8> sw	s0,40(sp)
1c003dbe <iprintf+0xa> mv	s0,a0
1c003dc0 <iprintf+0xc> lw	a0,-956(a5) # 1c008c44 <_impure_ptr>
1c003dc4 <iprintf+0x10> sw	ra,44(sp)
1c003dc6 <iprintf+0x12> sw	a1,52(sp)
1c003dc8 <iprintf+0x14> sw	a2,56(sp)
1c003dca <iprintf+0x16> sw	a3,60(sp)
1c003dcc <iprintf+0x18> sw	a4,64(sp)
1c003dce <iprintf+0x1a> sw	a6,72(sp)
1c003dd0 <iprintf+0x1c> sw	a7,76(sp)
1c003dd2 <iprintf+0x1e> beqz	a0,1c003de0 <iprintf+0x2c>
1c003dd4 <iprintf+0x20> lw	a5,24(a0)
1c003dd6 <iprintf+0x22> bnez	a5,1c003de0 <iprintf+0x2c>
1c003dd8 <iprintf+0x24> sw	a0,12(sp)
1c003dda <iprintf+0x26> jal	ra,1c004624 <__sinit>
1c003dde <iprintf+0x2a> lw	a0,12(sp)
1c003de0 <iprintf+0x2c> lw	a1,8(a0)
1c003de2 <iprintf+0x2e> addi	a3,sp,52
1c003de4 <iprintf+0x30> mv	a2,s0
1c003de6 <iprintf+0x32> sw	a3,28(sp)
1c003de8 <iprintf+0x34> jal	ra,1c003b0c <_vfiprintf_r>
1c003dec <iprintf+0x38> lw	ra,44(sp)
1c003dee <iprintf+0x3a> lw	s0,40(sp)
1c003df0 <iprintf+0x3c> addi	sp,sp,80
1c003df2 <iprintf+0x3e> ret
_puts_r():
1c003df4 <_puts_r> addi	sp,sp,-32
1c003df6 <_puts_r+0x2> sw	s1,20(sp)
1c003df8 <_puts_r+0x4> sw	s2,16(sp)
1c003dfa <_puts_r+0x6> sw	ra,28(sp)
1c003dfc <_puts_r+0x8> sw	s0,24(sp)
1c003dfe <_puts_r+0xa> sw	s3,12(sp)
1c003e00 <_puts_r+0xc> sw	s4,8(sp)
1c003e02 <_puts_r+0xe> mv	s1,a0
1c003e04 <_puts_r+0x10> mv	s2,a1
1c003e06 <_puts_r+0x12> beqz	a0,1c003e10 <_puts_r+0x1c>
1c003e08 <_puts_r+0x14> lw	a5,24(a0)
1c003e0a <_puts_r+0x16> bnez	a5,1c003e10 <_puts_r+0x1c>
1c003e0c <_puts_r+0x18> jal	ra,1c004624 <__sinit>
1c003e10 <_puts_r+0x1c> lw	a5,24(s1)
1c003e12 <_puts_r+0x1e> lw	s0,8(s1)
1c003e14 <_puts_r+0x20> bnez	a5,1c003e1c <_puts_r+0x28>
1c003e16 <_puts_r+0x22> mv	a0,s1
1c003e18 <_puts_r+0x24> jal	ra,1c004624 <__sinit>
1c003e1c <_puts_r+0x28> lui	a5,0x1c009
1c003e20 <_puts_r+0x2c> addi	a5,a5,-1516 # 1c008a14 <__sf_fake_stdin>
1c003e24 <_puts_r+0x30> bne	s0,a5,1c003e5c <_puts_r+0x68>
1c003e28 <_puts_r+0x34> lw	s0,4(s1)
1c003e2a <_puts_r+0x36> lhu	a5,12(s0)
1c003e2e <_puts_r+0x3a> andi	a5,a5,8
1c003e30 <_puts_r+0x3c> beqz	a5,1c003e7c <_puts_r+0x88>
1c003e32 <_puts_r+0x3e> lw	a5,16(s0)
1c003e34 <_puts_r+0x40> beqz	a5,1c003e7c <_puts_r+0x88>
1c003e36 <_puts_r+0x42> li	s3,-1
1c003e38 <_puts_r+0x44> li	s4,10
1c003e3a <_puts_r+0x46> lw	a5,8(s0)
1c003e3c <_puts_r+0x48> lbu	a1,0(s2)
1c003e40 <_puts_r+0x4c> addi	a5,a5,-1
1c003e42 <_puts_r+0x4e> bnez	a1,1c003e96 <_puts_r+0xa2>
1c003e44 <_puts_r+0x50> sw	a5,8(s0)
1c003e46 <_puts_r+0x52> bgez	a5,1c003ec2 <_puts_r+0xce>
1c003e4a <_puts_r+0x56> mv	a2,s0
1c003e4c <_puts_r+0x58> li	a1,10
1c003e4e <_puts_r+0x5a> mv	a0,s1
1c003e50 <_puts_r+0x5c> jal	1c0040aa <__swbuf_r>
1c003e52 <_puts_r+0x5e> li	a5,-1
1c003e54 <_puts_r+0x60> beq	a0,a5,1c003e84 <_puts_r+0x90>
1c003e58 <_puts_r+0x64> li	a0,10
1c003e5a <_puts_r+0x66> j	1c003e86 <_puts_r+0x92>
1c003e5c <_puts_r+0x68> lui	a5,0x1c009
1c003e60 <_puts_r+0x6c> addi	a5,a5,-1484 # 1c008a34 <__sf_fake_stdout>
1c003e64 <_puts_r+0x70> bne	s0,a5,1c003e6c <_puts_r+0x78>
1c003e68 <_puts_r+0x74> lw	s0,8(s1)
1c003e6a <_puts_r+0x76> j	1c003e2a <_puts_r+0x36>
1c003e6c <_puts_r+0x78> lui	a5,0x1c009
1c003e70 <_puts_r+0x7c> addi	a5,a5,-1548 # 1c0089f4 <__sf_fake_stderr>
1c003e74 <_puts_r+0x80> bne	s0,a5,1c003e2a <_puts_r+0x36>
1c003e78 <_puts_r+0x84> lw	s0,12(s1)
1c003e7a <_puts_r+0x86> j	1c003e2a <_puts_r+0x36>
1c003e7c <_puts_r+0x88> mv	a1,s0
1c003e7e <_puts_r+0x8a> mv	a0,s1
1c003e80 <_puts_r+0x8c> jal	1c00416a <__swsetup_r>
1c003e82 <_puts_r+0x8e> beqz	a0,1c003e36 <_puts_r+0x42>
1c003e84 <_puts_r+0x90> li	a0,-1
1c003e86 <_puts_r+0x92> lw	ra,28(sp)
1c003e88 <_puts_r+0x94> lw	s0,24(sp)
1c003e8a <_puts_r+0x96> lw	s1,20(sp)
1c003e8c <_puts_r+0x98> lw	s2,16(sp)
1c003e8e <_puts_r+0x9a> lw	s3,12(sp)
1c003e90 <_puts_r+0x9c> lw	s4,8(sp)
1c003e92 <_puts_r+0x9e> addi	sp,sp,32
1c003e94 <_puts_r+0xa0> ret
1c003e96 <_puts_r+0xa2> sw	a5,8(s0)
1c003e98 <_puts_r+0xa4> addi	s2,s2,1
1c003e9a <_puts_r+0xa6> bgez	a5,1c003ea8 <_puts_r+0xb4>
1c003e9e <_puts_r+0xaa> lw	a4,24(s0)
1c003ea0 <_puts_r+0xac> blt	a5,a4,1c003eb6 <_puts_r+0xc2>
1c003ea4 <_puts_r+0xb0> beq	a1,s4,1c003eb6 <_puts_r+0xc2>
1c003ea8 <_puts_r+0xb4> lw	a5,0(s0)
1c003eaa <_puts_r+0xb6> addi	a4,a5,1
1c003eae <_puts_r+0xba> sw	a4,0(s0)
1c003eb0 <_puts_r+0xbc> sb	a1,0(a5)
1c003eb4 <_puts_r+0xc0> j	1c003e3a <_puts_r+0x46>
1c003eb6 <_puts_r+0xc2> mv	a2,s0
1c003eb8 <_puts_r+0xc4> mv	a0,s1
1c003eba <_puts_r+0xc6> jal	1c0040aa <__swbuf_r>
1c003ebc <_puts_r+0xc8> bne	a0,s3,1c003e3a <_puts_r+0x46>
1c003ec0 <_puts_r+0xcc> j	1c003e84 <_puts_r+0x90>
1c003ec2 <_puts_r+0xce> lw	a5,0(s0)
1c003ec4 <_puts_r+0xd0> addi	a4,a5,1
1c003ec8 <_puts_r+0xd4> sw	a4,0(s0)
1c003eca <_puts_r+0xd6> li	a4,10
1c003ecc <_puts_r+0xd8> sb	a4,0(a5)
1c003ed0 <_puts_r+0xdc> j	1c003e58 <_puts_r+0x64>
puts():
1c003ed2 <puts> lui	a5,0x1c009
1c003ed6 <puts+0x4> mv	a1,a0
1c003ed8 <puts+0x6> lw	a0,-956(a5) # 1c008c44 <_impure_ptr>
1c003edc <puts+0xa> j	1c003df4 <_puts_r>
cleanup_glue():
1c003ee0 <cleanup_glue> addi	sp,sp,-16
1c003ee2 <cleanup_glue+0x2> sw	s0,8(sp)
1c003ee4 <cleanup_glue+0x4> mv	s0,a1
1c003ee6 <cleanup_glue+0x6> lw	a1,0(a1)
1c003ee8 <cleanup_glue+0x8> sw	s1,4(sp)
1c003eea <cleanup_glue+0xa> sw	ra,12(sp)
1c003eec <cleanup_glue+0xc> mv	s1,a0
1c003eee <cleanup_glue+0xe> beqz	a1,1c003ef2 <cleanup_glue+0x12>
1c003ef0 <cleanup_glue+0x10> jal	1c003ee0 <cleanup_glue>
1c003ef2 <cleanup_glue+0x12> mv	a1,s0
1c003ef4 <cleanup_glue+0x14> lw	s0,8(sp)
1c003ef6 <cleanup_glue+0x16> lw	ra,12(sp)
1c003ef8 <cleanup_glue+0x18> mv	a0,s1
1c003efa <cleanup_glue+0x1a> lw	s1,4(sp)
1c003efc <cleanup_glue+0x1c> addi	sp,sp,16
1c003efe <cleanup_glue+0x1e> j	1c003920 <_free_r>
_reclaim_reent():
1c003f02 <_reclaim_reent> lui	a5,0x1c009
1c003f06 <_reclaim_reent+0x4> lw	a5,-956(a5) # 1c008c44 <_impure_ptr>
1c003f0a <_reclaim_reent+0x8> beq	a5,a0,1c003fda <_reclaim_reent+0xd8>
1c003f0e <_reclaim_reent+0xc> lw	a5,36(a0)
1c003f10 <_reclaim_reent+0xe> addi	sp,sp,-32
1c003f12 <_reclaim_reent+0x10> sw	s0,24(sp)
1c003f14 <_reclaim_reent+0x12> sw	ra,28(sp)
1c003f16 <_reclaim_reent+0x14> sw	s1,20(sp)
1c003f18 <_reclaim_reent+0x16> sw	s2,16(sp)
1c003f1a <_reclaim_reent+0x18> sw	s3,12(sp)
1c003f1c <_reclaim_reent+0x1a> mv	s0,a0
1c003f1e <_reclaim_reent+0x1c> beqz	a5,1c003f36 <_reclaim_reent+0x34>
1c003f20 <_reclaim_reent+0x1e> lw	a5,12(a5)
1c003f22 <_reclaim_reent+0x20> li	s1,0
1c003f24 <_reclaim_reent+0x22> li	s2,128
1c003f28 <_reclaim_reent+0x26> bnez	a5,1c003fae <_reclaim_reent+0xac>
1c003f2a <_reclaim_reent+0x28> lw	a5,36(s0)
1c003f2c <_reclaim_reent+0x2a> lw	a1,0(a5)
1c003f2e <_reclaim_reent+0x2c> beqz	a1,1c003f36 <_reclaim_reent+0x34>
1c003f30 <_reclaim_reent+0x2e> mv	a0,s0
1c003f32 <_reclaim_reent+0x30> jal	ra,1c003920 <_free_r>
1c003f36 <_reclaim_reent+0x34> lw	a1,20(s0)
1c003f38 <_reclaim_reent+0x36> beqz	a1,1c003f40 <_reclaim_reent+0x3e>
1c003f3a <_reclaim_reent+0x38> mv	a0,s0
1c003f3c <_reclaim_reent+0x3a> jal	ra,1c003920 <_free_r>
1c003f40 <_reclaim_reent+0x3e> lw	a1,36(s0)
1c003f42 <_reclaim_reent+0x40> beqz	a1,1c003f4a <_reclaim_reent+0x48>
1c003f44 <_reclaim_reent+0x42> mv	a0,s0
1c003f46 <_reclaim_reent+0x44> jal	ra,1c003920 <_free_r>
1c003f4a <_reclaim_reent+0x48> lw	a1,56(s0)
1c003f4c <_reclaim_reent+0x4a> beqz	a1,1c003f54 <_reclaim_reent+0x52>
1c003f4e <_reclaim_reent+0x4c> mv	a0,s0
1c003f50 <_reclaim_reent+0x4e> jal	ra,1c003920 <_free_r>
1c003f54 <_reclaim_reent+0x52> lw	a1,60(s0)
1c003f56 <_reclaim_reent+0x54> beqz	a1,1c003f5e <_reclaim_reent+0x5c>
1c003f58 <_reclaim_reent+0x56> mv	a0,s0
1c003f5a <_reclaim_reent+0x58> jal	ra,1c003920 <_free_r>
1c003f5e <_reclaim_reent+0x5c> lw	a1,64(s0)
1c003f60 <_reclaim_reent+0x5e> beqz	a1,1c003f68 <_reclaim_reent+0x66>
1c003f62 <_reclaim_reent+0x60> mv	a0,s0
1c003f64 <_reclaim_reent+0x62> jal	ra,1c003920 <_free_r>
1c003f68 <_reclaim_reent+0x66> lw	a1,92(s0)
1c003f6a <_reclaim_reent+0x68> beqz	a1,1c003f72 <_reclaim_reent+0x70>
1c003f6c <_reclaim_reent+0x6a> mv	a0,s0
1c003f6e <_reclaim_reent+0x6c> jal	ra,1c003920 <_free_r>
1c003f72 <_reclaim_reent+0x70> lw	a1,88(s0)
1c003f74 <_reclaim_reent+0x72> beqz	a1,1c003f7c <_reclaim_reent+0x7a>
1c003f76 <_reclaim_reent+0x74> mv	a0,s0
1c003f78 <_reclaim_reent+0x76> jal	ra,1c003920 <_free_r>
1c003f7c <_reclaim_reent+0x7a> lw	a1,52(s0)
1c003f7e <_reclaim_reent+0x7c> beqz	a1,1c003f86 <_reclaim_reent+0x84>
1c003f80 <_reclaim_reent+0x7e> mv	a0,s0
1c003f82 <_reclaim_reent+0x80> jal	ra,1c003920 <_free_r>
1c003f86 <_reclaim_reent+0x84> lw	a5,24(s0)
1c003f88 <_reclaim_reent+0x86> beqz	a5,1c003fcc <_reclaim_reent+0xca>
1c003f8a <_reclaim_reent+0x88> lw	a5,40(s0)
1c003f8c <_reclaim_reent+0x8a> mv	a0,s0
1c003f8e <_reclaim_reent+0x8c> jalr	a5
1c003f90 <_reclaim_reent+0x8e> lw	a1,72(s0)
1c003f92 <_reclaim_reent+0x90> beqz	a1,1c003fcc <_reclaim_reent+0xca>
1c003f94 <_reclaim_reent+0x92> mv	a0,s0
1c003f96 <_reclaim_reent+0x94> lw	s0,24(sp)
1c003f98 <_reclaim_reent+0x96> lw	ra,28(sp)
1c003f9a <_reclaim_reent+0x98> lw	s1,20(sp)
1c003f9c <_reclaim_reent+0x9a> lw	s2,16(sp)
1c003f9e <_reclaim_reent+0x9c> lw	s3,12(sp)
1c003fa0 <_reclaim_reent+0x9e> addi	sp,sp,32
1c003fa2 <_reclaim_reent+0xa0> j	1c003ee0 <cleanup_glue>
1c003fa6 <_reclaim_reent+0xa4> add	a1,a1,s1
1c003fa8 <_reclaim_reent+0xa6> lw	a1,0(a1)
1c003faa <_reclaim_reent+0xa8> bnez	a1,1c003fbe <_reclaim_reent+0xbc>
1c003fac <_reclaim_reent+0xaa> addi	s1,s1,4
1c003fae <_reclaim_reent+0xac> lw	a5,36(s0)
1c003fb0 <_reclaim_reent+0xae> lw	a1,12(a5)
1c003fb2 <_reclaim_reent+0xb0> bne	s1,s2,1c003fa6 <_reclaim_reent+0xa4>
1c003fb6 <_reclaim_reent+0xb4> mv	a0,s0
1c003fb8 <_reclaim_reent+0xb6> jal	ra,1c003920 <_free_r>
1c003fbc <_reclaim_reent+0xba> j	1c003f2a <_reclaim_reent+0x28>
1c003fbe <_reclaim_reent+0xbc> lw	s3,0(a1)
1c003fc2 <_reclaim_reent+0xc0> mv	a0,s0
1c003fc4 <_reclaim_reent+0xc2> jal	ra,1c003920 <_free_r>
1c003fc8 <_reclaim_reent+0xc6> mv	a1,s3
1c003fca <_reclaim_reent+0xc8> j	1c003faa <_reclaim_reent+0xa8>
1c003fcc <_reclaim_reent+0xca> lw	ra,28(sp)
1c003fce <_reclaim_reent+0xcc> lw	s0,24(sp)
1c003fd0 <_reclaim_reent+0xce> lw	s1,20(sp)
1c003fd2 <_reclaim_reent+0xd0> lw	s2,16(sp)
1c003fd4 <_reclaim_reent+0xd2> lw	s3,12(sp)
1c003fd6 <_reclaim_reent+0xd4> addi	sp,sp,32
1c003fd8 <_reclaim_reent+0xd6> ret
1c003fda <_reclaim_reent+0xd8> ret
_sbrk_r():
1c003fdc <_sbrk_r> addi	sp,sp,-16
1c003fde <_sbrk_r+0x2> sw	s0,8(sp)
1c003fe0 <_sbrk_r+0x4> sw	s1,4(sp)
1c003fe2 <_sbrk_r+0x6> mv	s0,a0
1c003fe4 <_sbrk_r+0x8> mv	a0,a1
1c003fe6 <_sbrk_r+0xa> sw	ra,12(sp)
1c003fe8 <_sbrk_r+0xc> sw	zero,-576(gp) # 1c00919c <errno>
1c003fec <_sbrk_r+0x10> jal	ra,1c002a3e <_sbrk>
1c003ff0 <_sbrk_r+0x14> li	a5,-1
1c003ff2 <_sbrk_r+0x16> bne	a0,a5,1c003ffe <_sbrk_r+0x22>
1c003ff6 <_sbrk_r+0x1a> lw	a5,-576(gp) # 1c00919c <errno>
1c003ffa <_sbrk_r+0x1e> beqz	a5,1c003ffe <_sbrk_r+0x22>
1c003ffc <_sbrk_r+0x20> sw	a5,0(s0)
1c003ffe <_sbrk_r+0x22> lw	ra,12(sp)
1c004000 <_sbrk_r+0x24> lw	s0,8(sp)
1c004002 <_sbrk_r+0x26> lw	s1,4(sp)
1c004004 <_sbrk_r+0x28> addi	sp,sp,16
1c004006 <_sbrk_r+0x2a> ret
_raise_r():
1c004008 <_raise_r> addi	sp,sp,-32
1c00400a <_raise_r+0x2> sw	s0,24(sp)
1c00400c <_raise_r+0x4> sw	ra,28(sp)
1c00400e <_raise_r+0x6> li	a5,31
1c004010 <_raise_r+0x8> mv	s0,a0
1c004012 <_raise_r+0xa> bgeu	a5,a1,1c004024 <_raise_r+0x1c>
1c004016 <_raise_r+0xe> li	a5,22
1c004018 <_raise_r+0x10> sw	a5,0(a0)
1c00401a <_raise_r+0x12> li	a0,-1
1c00401c <_raise_r+0x14> lw	ra,28(sp)
1c00401e <_raise_r+0x16> lw	s0,24(sp)
1c004020 <_raise_r+0x18> addi	sp,sp,32
1c004022 <_raise_r+0x1a> ret
1c004024 <_raise_r+0x1c> lw	a5,68(a0)
1c004026 <_raise_r+0x1e> mv	a2,a1
1c004028 <_raise_r+0x20> beqz	a5,1c004034 <_raise_r+0x2c>
1c00402a <_raise_r+0x22> slli	a4,a1,0x2
1c00402e <_raise_r+0x26> add	a5,a5,a4
1c004030 <_raise_r+0x28> lw	a4,0(a5)
1c004032 <_raise_r+0x2a> bnez	a4,1c004048 <_raise_r+0x40>
1c004034 <_raise_r+0x2c> mv	a0,s0
1c004036 <_raise_r+0x2e> sw	a2,12(sp)
1c004038 <_raise_r+0x30> jal	1c0040a6 <_getpid_r>
1c00403a <_raise_r+0x32> mv	a1,a0
1c00403c <_raise_r+0x34> mv	a0,s0
1c00403e <_raise_r+0x36> lw	s0,24(sp)
1c004040 <_raise_r+0x38> lw	a2,12(sp)
1c004042 <_raise_r+0x3a> lw	ra,28(sp)
1c004044 <_raise_r+0x3c> addi	sp,sp,32
1c004046 <_raise_r+0x3e> j	1c004078 <_kill_r>
1c004048 <_raise_r+0x40> li	a3,1
1c00404a <_raise_r+0x42> li	a0,0
1c00404c <_raise_r+0x44> beq	a4,a3,1c00401c <_raise_r+0x14>
1c004050 <_raise_r+0x48> li	a3,-1
1c004052 <_raise_r+0x4a> bne	a4,a3,1c00405e <_raise_r+0x56>
1c004056 <_raise_r+0x4e> li	a5,22
1c004058 <_raise_r+0x50> sw	a5,0(s0)
1c00405a <_raise_r+0x52> li	a0,1
1c00405c <_raise_r+0x54> j	1c00401c <_raise_r+0x14>
1c00405e <_raise_r+0x56> mv	a0,a1
1c004060 <_raise_r+0x58> sw	zero,0(a5)
1c004064 <_raise_r+0x5c> jalr	a4
1c004066 <_raise_r+0x5e> li	a0,0
1c004068 <_raise_r+0x60> j	1c00401c <_raise_r+0x14>
raise():
1c00406a <raise> lui	a5,0x1c009
1c00406e <raise+0x4> mv	a1,a0
1c004070 <raise+0x6> lw	a0,-956(a5) # 1c008c44 <_impure_ptr>
1c004074 <raise+0xa> j	1c004008 <_raise_r>
_kill_r():
1c004078 <_kill_r> addi	sp,sp,-16
1c00407a <_kill_r+0x2> sw	s0,8(sp)
1c00407c <_kill_r+0x4> sw	s1,4(sp)
1c00407e <_kill_r+0x6> mv	s0,a0
1c004080 <_kill_r+0x8> mv	a0,a1
1c004082 <_kill_r+0xa> mv	a1,a2
1c004084 <_kill_r+0xc> sw	ra,12(sp)
1c004086 <_kill_r+0xe> sw	zero,-576(gp) # 1c00919c <errno>
1c00408a <_kill_r+0x12> jal	ra,1c0029e0 <_kill>
1c00408e <_kill_r+0x16> li	a5,-1
1c004090 <_kill_r+0x18> bne	a0,a5,1c00409c <_kill_r+0x24>
1c004094 <_kill_r+0x1c> lw	a5,-576(gp) # 1c00919c <errno>
1c004098 <_kill_r+0x20> beqz	a5,1c00409c <_kill_r+0x24>
1c00409a <_kill_r+0x22> sw	a5,0(s0)
1c00409c <_kill_r+0x24> lw	ra,12(sp)
1c00409e <_kill_r+0x26> lw	s0,8(sp)
1c0040a0 <_kill_r+0x28> lw	s1,4(sp)
1c0040a2 <_kill_r+0x2a> addi	sp,sp,16
1c0040a4 <_kill_r+0x2c> ret
_getpid_r():
1c0040a6 <_getpid_r> j	1c0029d4 <_getpid>
__swbuf_r():
1c0040aa <__swbuf_r> addi	sp,sp,-32
1c0040ac <__swbuf_r+0x2> sw	s0,24(sp)
1c0040ae <__swbuf_r+0x4> sw	s1,20(sp)
1c0040b0 <__swbuf_r+0x6> sw	s2,16(sp)
1c0040b2 <__swbuf_r+0x8> sw	ra,28(sp)
1c0040b4 <__swbuf_r+0xa> sw	s3,12(sp)
1c0040b6 <__swbuf_r+0xc> mv	s1,a0
1c0040b8 <__swbuf_r+0xe> mv	s2,a1
1c0040ba <__swbuf_r+0x10> mv	s0,a2
1c0040bc <__swbuf_r+0x12> beqz	a0,1c0040c4 <__swbuf_r+0x1a>
1c0040be <__swbuf_r+0x14> lw	a5,24(a0)
1c0040c0 <__swbuf_r+0x16> bnez	a5,1c0040c4 <__swbuf_r+0x1a>
1c0040c2 <__swbuf_r+0x18> jal	1c004624 <__sinit>
1c0040c4 <__swbuf_r+0x1a> lui	a5,0x1c009
1c0040c8 <__swbuf_r+0x1e> addi	a5,a5,-1516 # 1c008a14 <__sf_fake_stdin>
1c0040cc <__swbuf_r+0x22> bne	s0,a5,1c00413e <__swbuf_r+0x94>
1c0040d0 <__swbuf_r+0x26> lw	s0,4(s1)
1c0040d2 <__swbuf_r+0x28> lw	a5,24(s0)
1c0040d4 <__swbuf_r+0x2a> sw	a5,8(s0)
1c0040d6 <__swbuf_r+0x2c> lhu	a5,12(s0)
1c0040da <__swbuf_r+0x30> andi	a5,a5,8
1c0040dc <__swbuf_r+0x32> beqz	a5,1c00415e <__swbuf_r+0xb4>
1c0040de <__swbuf_r+0x34> lw	a5,16(s0)
1c0040e0 <__swbuf_r+0x36> beqz	a5,1c00415e <__swbuf_r+0xb4>
1c0040e2 <__swbuf_r+0x38> lw	a5,16(s0)
1c0040e4 <__swbuf_r+0x3a> lw	a0,0(s0)
1c0040e6 <__swbuf_r+0x3c> andi	s3,s2,255
1c0040ea <__swbuf_r+0x40> andi	s2,s2,255
1c0040ee <__swbuf_r+0x44> sub	a0,a0,a5
1c0040f0 <__swbuf_r+0x46> lw	a5,20(s0)
1c0040f2 <__swbuf_r+0x48> blt	a0,a5,1c0040fe <__swbuf_r+0x54>
1c0040f6 <__swbuf_r+0x4c> mv	a1,s0
1c0040f8 <__swbuf_r+0x4e> mv	a0,s1
1c0040fa <__swbuf_r+0x50> jal	1c004502 <_fflush_r>
1c0040fc <__swbuf_r+0x52> bnez	a0,1c004166 <__swbuf_r+0xbc>
1c0040fe <__swbuf_r+0x54> lw	a5,8(s0)
1c004100 <__swbuf_r+0x56> addi	a0,a0,1
1c004102 <__swbuf_r+0x58> addi	a5,a5,-1
1c004104 <__swbuf_r+0x5a> sw	a5,8(s0)
1c004106 <__swbuf_r+0x5c> lw	a5,0(s0)
1c004108 <__swbuf_r+0x5e> addi	a4,a5,1
1c00410c <__swbuf_r+0x62> sw	a4,0(s0)
1c00410e <__swbuf_r+0x64> sb	s3,0(a5)
1c004112 <__swbuf_r+0x68> lw	a5,20(s0)
1c004114 <__swbuf_r+0x6a> beq	a5,a0,1c004126 <__swbuf_r+0x7c>
1c004118 <__swbuf_r+0x6e> lhu	a5,12(s0)
1c00411c <__swbuf_r+0x72> andi	a5,a5,1
1c00411e <__swbuf_r+0x74> beqz	a5,1c00412e <__swbuf_r+0x84>
1c004120 <__swbuf_r+0x76> li	a5,10
1c004122 <__swbuf_r+0x78> bne	s2,a5,1c00412e <__swbuf_r+0x84>
1c004126 <__swbuf_r+0x7c> mv	a1,s0
1c004128 <__swbuf_r+0x7e> mv	a0,s1
1c00412a <__swbuf_r+0x80> jal	1c004502 <_fflush_r>
1c00412c <__swbuf_r+0x82> bnez	a0,1c004166 <__swbuf_r+0xbc>
1c00412e <__swbuf_r+0x84> lw	ra,28(sp)
1c004130 <__swbuf_r+0x86> lw	s0,24(sp)
1c004132 <__swbuf_r+0x88> lw	s1,20(sp)
1c004134 <__swbuf_r+0x8a> lw	s3,12(sp)
1c004136 <__swbuf_r+0x8c> mv	a0,s2
1c004138 <__swbuf_r+0x8e> lw	s2,16(sp)
1c00413a <__swbuf_r+0x90> addi	sp,sp,32
1c00413c <__swbuf_r+0x92> ret
1c00413e <__swbuf_r+0x94> lui	a5,0x1c009
1c004142 <__swbuf_r+0x98> addi	a5,a5,-1484 # 1c008a34 <__sf_fake_stdout>
1c004146 <__swbuf_r+0x9c> bne	s0,a5,1c00414e <__swbuf_r+0xa4>
1c00414a <__swbuf_r+0xa0> lw	s0,8(s1)
1c00414c <__swbuf_r+0xa2> j	1c0040d2 <__swbuf_r+0x28>
1c00414e <__swbuf_r+0xa4> lui	a5,0x1c009
1c004152 <__swbuf_r+0xa8> addi	a5,a5,-1548 # 1c0089f4 <__sf_fake_stderr>
1c004156 <__swbuf_r+0xac> bne	s0,a5,1c0040d2 <__swbuf_r+0x28>
1c00415a <__swbuf_r+0xb0> lw	s0,12(s1)
1c00415c <__swbuf_r+0xb2> j	1c0040d2 <__swbuf_r+0x28>
1c00415e <__swbuf_r+0xb4> mv	a1,s0
1c004160 <__swbuf_r+0xb6> mv	a0,s1
1c004162 <__swbuf_r+0xb8> jal	1c00416a <__swsetup_r>
1c004164 <__swbuf_r+0xba> beqz	a0,1c0040e2 <__swbuf_r+0x38>
1c004166 <__swbuf_r+0xbc> li	s2,-1
1c004168 <__swbuf_r+0xbe> j	1c00412e <__swbuf_r+0x84>
__swsetup_r():
1c00416a <__swsetup_r> addi	sp,sp,-16
1c00416c <__swsetup_r+0x2> lui	a5,0x1c009
1c004170 <__swsetup_r+0x6> sw	s1,4(sp)
1c004172 <__swsetup_r+0x8> lw	s1,-956(a5) # 1c008c44 <_impure_ptr>
1c004176 <__swsetup_r+0xc> sw	s0,8(sp)
1c004178 <__swsetup_r+0xe> sw	s2,0(sp)
1c00417a <__swsetup_r+0x10> sw	ra,12(sp)
1c00417c <__swsetup_r+0x12> mv	s2,a0
1c00417e <__swsetup_r+0x14> mv	s0,a1
1c004180 <__swsetup_r+0x16> beqz	s1,1c00418a <__swsetup_r+0x20>
1c004182 <__swsetup_r+0x18> lw	a5,24(s1)
1c004184 <__swsetup_r+0x1a> bnez	a5,1c00418a <__swsetup_r+0x20>
1c004186 <__swsetup_r+0x1c> mv	a0,s1
1c004188 <__swsetup_r+0x1e> jal	1c004624 <__sinit>
1c00418a <__swsetup_r+0x20> lui	a5,0x1c009
1c00418e <__swsetup_r+0x24> addi	a5,a5,-1516 # 1c008a14 <__sf_fake_stdin>
1c004192 <__swsetup_r+0x28> bne	s0,a5,1c0041c0 <__swsetup_r+0x56>
1c004196 <__swsetup_r+0x2c> lw	s0,4(s1)
1c004198 <__swsetup_r+0x2e> lh	a5,12(s0)
1c00419c <__swsetup_r+0x32> slli	a4,a5,0x10
1c0041a0 <__swsetup_r+0x36> andi	a3,a5,8
1c0041a4 <__swsetup_r+0x3a> srli	a4,a4,0x10
1c0041a6 <__swsetup_r+0x3c> bnez	a3,1c00421a <__swsetup_r+0xb0>
1c0041a8 <__swsetup_r+0x3e> andi	a3,a4,16
1c0041ac <__swsetup_r+0x42> bnez	a3,1c0041e0 <__swsetup_r+0x76>
1c0041ae <__swsetup_r+0x44> li	a4,9
1c0041b0 <__swsetup_r+0x46> sw	a4,0(s2)
1c0041b4 <__swsetup_r+0x4a> ori	a5,a5,64
1c0041b8 <__swsetup_r+0x4e> sh	a5,12(s0)
1c0041bc <__swsetup_r+0x52> li	a0,-1
1c0041be <__swsetup_r+0x54> j	1c00425c <__swsetup_r+0xf2>
1c0041c0 <__swsetup_r+0x56> lui	a5,0x1c009
1c0041c4 <__swsetup_r+0x5a> addi	a5,a5,-1484 # 1c008a34 <__sf_fake_stdout>
1c0041c8 <__swsetup_r+0x5e> bne	s0,a5,1c0041d0 <__swsetup_r+0x66>
1c0041cc <__swsetup_r+0x62> lw	s0,8(s1)
1c0041ce <__swsetup_r+0x64> j	1c004198 <__swsetup_r+0x2e>
1c0041d0 <__swsetup_r+0x66> lui	a5,0x1c009
1c0041d4 <__swsetup_r+0x6a> addi	a5,a5,-1548 # 1c0089f4 <__sf_fake_stderr>
1c0041d8 <__swsetup_r+0x6e> bne	s0,a5,1c004198 <__swsetup_r+0x2e>
1c0041dc <__swsetup_r+0x72> lw	s0,12(s1)
1c0041de <__swsetup_r+0x74> j	1c004198 <__swsetup_r+0x2e>
1c0041e0 <__swsetup_r+0x76> andi	a4,a4,4
1c0041e2 <__swsetup_r+0x78> beqz	a4,1c00420e <__swsetup_r+0xa4>
1c0041e4 <__swsetup_r+0x7a> lw	a1,52(s0)
1c0041e6 <__swsetup_r+0x7c> beqz	a1,1c0041fa <__swsetup_r+0x90>
1c0041e8 <__swsetup_r+0x7e> addi	a5,s0,68
1c0041ec <__swsetup_r+0x82> beq	a1,a5,1c0041f6 <__swsetup_r+0x8c>
1c0041f0 <__swsetup_r+0x86> mv	a0,s2
1c0041f2 <__swsetup_r+0x88> jal	ra,1c003920 <_free_r>
1c0041f6 <__swsetup_r+0x8c> sw	zero,52(s0)
1c0041fa <__swsetup_r+0x90> lhu	a5,12(s0)
1c0041fe <__swsetup_r+0x94> sw	zero,4(s0)
1c004202 <__swsetup_r+0x98> andi	a5,a5,-37
1c004206 <__swsetup_r+0x9c> sh	a5,12(s0)
1c00420a <__swsetup_r+0xa0> lw	a5,16(s0)
1c00420c <__swsetup_r+0xa2> sw	a5,0(s0)
1c00420e <__swsetup_r+0xa4> lhu	a5,12(s0)
1c004212 <__swsetup_r+0xa8> ori	a5,a5,8
1c004216 <__swsetup_r+0xac> sh	a5,12(s0)
1c00421a <__swsetup_r+0xb0> lw	a5,16(s0)
1c00421c <__swsetup_r+0xb2> bnez	a5,1c004234 <__swsetup_r+0xca>
1c00421e <__swsetup_r+0xb4> lhu	a5,12(s0)
1c004222 <__swsetup_r+0xb8> li	a4,512
1c004226 <__swsetup_r+0xbc> andi	a5,a5,640
1c00422a <__swsetup_r+0xc0> beq	a5,a4,1c004234 <__swsetup_r+0xca>
1c00422e <__swsetup_r+0xc4> mv	a1,s0
1c004230 <__swsetup_r+0xc6> mv	a0,s2
1c004232 <__swsetup_r+0xc8> jal	1c0047fa <__smakebuf_r>
1c004234 <__swsetup_r+0xca> lh	a5,12(s0)
1c004238 <__swsetup_r+0xce> slli	a4,a5,0x10
1c00423c <__swsetup_r+0xd2> andi	a3,a5,1
1c004240 <__swsetup_r+0xd6> srli	a4,a4,0x10
1c004242 <__swsetup_r+0xd8> beqz	a3,1c004268 <__swsetup_r+0xfe>
1c004244 <__swsetup_r+0xda> lw	a3,20(s0)
1c004246 <__swsetup_r+0xdc> sw	zero,8(s0)
1c00424a <__swsetup_r+0xe0> neg	a3,a3
1c00424e <__swsetup_r+0xe4> sw	a3,24(s0)
1c004250 <__swsetup_r+0xe6> lw	a3,16(s0)
1c004252 <__swsetup_r+0xe8> li	a0,0
1c004254 <__swsetup_r+0xea> bnez	a3,1c00425c <__swsetup_r+0xf2>
1c004256 <__swsetup_r+0xec> andi	a4,a4,128
1c00425a <__swsetup_r+0xf0> bnez	a4,1c0041b4 <__swsetup_r+0x4a>
1c00425c <__swsetup_r+0xf2> lw	ra,12(sp)
1c00425e <__swsetup_r+0xf4> lw	s0,8(sp)
1c004260 <__swsetup_r+0xf6> lw	s1,4(sp)
1c004262 <__swsetup_r+0xf8> lw	s2,0(sp)
1c004264 <__swsetup_r+0xfa> addi	sp,sp,16
1c004266 <__swsetup_r+0xfc> ret
1c004268 <__swsetup_r+0xfe> andi	a3,a4,2
1c00426c <__swsetup_r+0x102> li	a2,0
1c00426e <__swsetup_r+0x104> bnez	a3,1c004272 <__swsetup_r+0x108>
1c004270 <__swsetup_r+0x106> lw	a2,20(s0)
1c004272 <__swsetup_r+0x108> sw	a2,8(s0)
1c004274 <__swsetup_r+0x10a> j	1c004250 <__swsetup_r+0xe6>
__register_exitproc():
1c004276 <__register_exitproc> lw	a5,-572(gp) # 1c0091a0 <_global_atexit>
1c00427a <__register_exitproc+0x4> mv	a7,a0
1c00427c <__register_exitproc+0x6> bnez	a5,1c00429e <__register_exitproc+0x28>
1c00427e <__register_exitproc+0x8> addi	a0,gp,-824 # 1c0090a4 <_global_atexit0>
1c004282 <__register_exitproc+0xc> sw	a0,-572(gp) # 1c0091a0 <_global_atexit>
1c004286 <__register_exitproc+0x10> li	t1,0
1c00428a <__register_exitproc+0x14> addi	a5,gp,-824 # 1c0090a4 <_global_atexit0>
1c00428e <__register_exitproc+0x18> beqz	t1,1c00429e <__register_exitproc+0x28>
1c004292 <__register_exitproc+0x1c> lw	a5,0(zero) # 00000000 <__heap_size>
1c004296 <__register_exitproc+0x20> sw	a5,136(a0)
1c00429a <__register_exitproc+0x24> addi	a5,gp,-824 # 1c0090a4 <_global_atexit0>
1c00429e <__register_exitproc+0x28> lw	a4,4(a5)
1c0042a0 <__register_exitproc+0x2a> li	a6,31
1c0042a2 <__register_exitproc+0x2c> li	a0,-1
1c0042a4 <__register_exitproc+0x2e> blt	a6,a4,1c0042f0 <__register_exitproc+0x7a>
1c0042a8 <__register_exitproc+0x32> beqz	a7,1c0042e2 <__register_exitproc+0x6c>
1c0042ac <__register_exitproc+0x36> lw	a6,136(a5)
1c0042b0 <__register_exitproc+0x3a> beqz	a6,1c0042f0 <__register_exitproc+0x7a>
1c0042b4 <__register_exitproc+0x3e> slli	a0,a4,0x2
1c0042b8 <__register_exitproc+0x42> add	a0,a0,a6
1c0042ba <__register_exitproc+0x44> sw	a2,0(a0)
1c0042bc <__register_exitproc+0x46> lw	t1,256(a6)
1c0042c0 <__register_exitproc+0x4a> li	a2,1
1c0042c2 <__register_exitproc+0x4c> sll	a2,a2,a4
1c0042c6 <__register_exitproc+0x50> or	t1,t1,a2
1c0042ca <__register_exitproc+0x54> sw	t1,256(a6)
1c0042ce <__register_exitproc+0x58> sw	a3,128(a0)
1c0042d2 <__register_exitproc+0x5c> li	a3,2
1c0042d4 <__register_exitproc+0x5e> bne	a7,a3,1c0042e2 <__register_exitproc+0x6c>
1c0042d8 <__register_exitproc+0x62> lw	a3,260(a6)
1c0042dc <__register_exitproc+0x66> or	a2,a2,a3
1c0042de <__register_exitproc+0x68> sw	a2,260(a6)
1c0042e2 <__register_exitproc+0x6c> addi	a3,a4,1
1c0042e6 <__register_exitproc+0x70> slli	a4,a4,0x2
1c0042e8 <__register_exitproc+0x72> sw	a3,4(a5)
1c0042ea <__register_exitproc+0x74> add	a5,a5,a4
1c0042ec <__register_exitproc+0x76> sw	a1,8(a5)
1c0042ee <__register_exitproc+0x78> li	a0,0
1c0042f0 <__register_exitproc+0x7a> ret
__call_exitprocs():
1c0042f2 <__call_exitprocs> addi	sp,sp,-48
1c0042f4 <__call_exitprocs+0x2> sw	s5,20(sp)
1c0042f6 <__call_exitprocs+0x4> sw	s6,16(sp)
1c0042f8 <__call_exitprocs+0x6> sw	s7,12(sp)
1c0042fa <__call_exitprocs+0x8> sw	s9,4(sp)
1c0042fc <__call_exitprocs+0xa> sw	ra,44(sp)
1c0042fe <__call_exitprocs+0xc> sw	s0,40(sp)
1c004300 <__call_exitprocs+0xe> sw	s1,36(sp)
1c004302 <__call_exitprocs+0x10> sw	s2,32(sp)
1c004304 <__call_exitprocs+0x12> sw	s3,28(sp)
1c004306 <__call_exitprocs+0x14> sw	s4,24(sp)
1c004308 <__call_exitprocs+0x16> sw	s8,8(sp)
1c00430a <__call_exitprocs+0x18> sw	s10,0(sp)
1c00430c <__call_exitprocs+0x1a> mv	s6,a0
1c00430e <__call_exitprocs+0x1c> mv	s5,a1
1c004310 <__call_exitprocs+0x1e> li	s9,1
1c004312 <__call_exitprocs+0x20> lw	s1,-572(gp) # 1c0091a0 <_global_atexit>
1c004316 <__call_exitprocs+0x24> addi	s8,gp,-572 # 1c0091a0 <_global_atexit>
1c00431a <__call_exitprocs+0x28> beqz	s1,1c004332 <__call_exitprocs+0x40>
1c00431c <__call_exitprocs+0x2a> lw	s0,4(s1)
1c00431e <__call_exitprocs+0x2c> lw	s3,136(s1)
1c004322 <__call_exitprocs+0x30> addi	s2,s0,-1
1c004326 <__call_exitprocs+0x34> slli	s0,s0,0x2
1c004328 <__call_exitprocs+0x36> add	s4,s3,s0
1c00432c <__call_exitprocs+0x3a> add	s0,s0,s1
1c00432e <__call_exitprocs+0x3c> bgez	s2,1c00434e <__call_exitprocs+0x5c>
1c004332 <__call_exitprocs+0x40> lw	ra,44(sp)
1c004334 <__call_exitprocs+0x42> lw	s0,40(sp)
1c004336 <__call_exitprocs+0x44> lw	s1,36(sp)
1c004338 <__call_exitprocs+0x46> lw	s2,32(sp)
1c00433a <__call_exitprocs+0x48> lw	s3,28(sp)
1c00433c <__call_exitprocs+0x4a> lw	s4,24(sp)
1c00433e <__call_exitprocs+0x4c> lw	s5,20(sp)
1c004340 <__call_exitprocs+0x4e> lw	s6,16(sp)
1c004342 <__call_exitprocs+0x50> lw	s7,12(sp)
1c004344 <__call_exitprocs+0x52> lw	s8,8(sp)
1c004346 <__call_exitprocs+0x54> lw	s9,4(sp)
1c004348 <__call_exitprocs+0x56> lw	s10,0(sp)
1c00434a <__call_exitprocs+0x58> addi	sp,sp,48
1c00434c <__call_exitprocs+0x5a> ret
1c00434e <__call_exitprocs+0x5c> beqz	s5,1c004366 <__call_exitprocs+0x74>
1c004352 <__call_exitprocs+0x60> bnez	s3,1c00435e <__call_exitprocs+0x6c>
1c004356 <__call_exitprocs+0x64> addi	s2,s2,-1
1c004358 <__call_exitprocs+0x66> addi	s4,s4,-4
1c00435a <__call_exitprocs+0x68> addi	s0,s0,-4
1c00435c <__call_exitprocs+0x6a> j	1c00432e <__call_exitprocs+0x3c>
1c00435e <__call_exitprocs+0x6c> lw	a5,124(s4)
1c004362 <__call_exitprocs+0x70> bne	a5,s5,1c004356 <__call_exitprocs+0x64>
1c004366 <__call_exitprocs+0x74> lw	a4,4(s1)
1c004368 <__call_exitprocs+0x76> lw	a5,4(s0)
1c00436a <__call_exitprocs+0x78> addi	a4,a4,-1
1c00436c <__call_exitprocs+0x7a> bne	a4,s2,1c00439c <__call_exitprocs+0xaa>
1c004370 <__call_exitprocs+0x7e> sw	s2,4(s1)
1c004374 <__call_exitprocs+0x82> beqz	a5,1c004356 <__call_exitprocs+0x64>
1c004376 <__call_exitprocs+0x84> lw	s10,4(s1)
1c00437a <__call_exitprocs+0x88> beqz	s3,1c00438a <__call_exitprocs+0x98>
1c00437e <__call_exitprocs+0x8c> lw	a3,256(s3)
1c004382 <__call_exitprocs+0x90> sll	a4,s9,s2
1c004386 <__call_exitprocs+0x94> and	a3,a3,a4
1c004388 <__call_exitprocs+0x96> bnez	a3,1c0043a2 <__call_exitprocs+0xb0>
1c00438a <__call_exitprocs+0x98> jalr	a5
1c00438c <__call_exitprocs+0x9a> lw	a4,4(s1)
1c00438e <__call_exitprocs+0x9c> lw	a5,0(s8)
1c004392 <__call_exitprocs+0xa0> bne	a4,s10,1c004312 <__call_exitprocs+0x20>
1c004396 <__call_exitprocs+0xa4> beq	s1,a5,1c004356 <__call_exitprocs+0x64>
1c00439a <__call_exitprocs+0xa8> j	1c004312 <__call_exitprocs+0x20>
1c00439c <__call_exitprocs+0xaa> sw	zero,4(s0)
1c0043a0 <__call_exitprocs+0xae> j	1c004374 <__call_exitprocs+0x82>
1c0043a2 <__call_exitprocs+0xb0> lw	a3,260(s3)
1c0043a6 <__call_exitprocs+0xb4> lw	a1,-4(s4)
1c0043aa <__call_exitprocs+0xb8> and	a4,a4,a3
1c0043ac <__call_exitprocs+0xba> bnez	a4,1c0043b4 <__call_exitprocs+0xc2>
1c0043ae <__call_exitprocs+0xbc> mv	a0,s6
1c0043b0 <__call_exitprocs+0xbe> jalr	a5
1c0043b2 <__call_exitprocs+0xc0> j	1c00438c <__call_exitprocs+0x9a>
1c0043b4 <__call_exitprocs+0xc2> mv	a0,a1
1c0043b6 <__call_exitprocs+0xc4> jalr	a5
1c0043b8 <__call_exitprocs+0xc6> j	1c00438c <__call_exitprocs+0x9a>
__sflush_r():
1c0043ba <__sflush_r> lhu	a5,12(a1)
1c0043be <__sflush_r+0x4> addi	sp,sp,-32
1c0043c0 <__sflush_r+0x6> sw	s0,24(sp)
1c0043c2 <__sflush_r+0x8> sw	s1,20(sp)
1c0043c4 <__sflush_r+0xa> sw	ra,28(sp)
1c0043c6 <__sflush_r+0xc> sw	s2,16(sp)
1c0043c8 <__sflush_r+0xe> sw	s3,12(sp)
1c0043ca <__sflush_r+0x10> andi	a4,a5,8
1c0043ce <__sflush_r+0x14> mv	s1,a0
1c0043d0 <__sflush_r+0x16> mv	s0,a1
1c0043d2 <__sflush_r+0x18> bnez	a4,1c0044b8 <__sflush_r+0xfe>
1c0043d4 <__sflush_r+0x1a> lw	a4,4(a1)
1c0043d6 <__sflush_r+0x1c> bgtz	a4,1c0043e4 <__sflush_r+0x2a>
1c0043da <__sflush_r+0x20> lw	a4,64(a1)
1c0043dc <__sflush_r+0x22> bgtz	a4,1c0043e4 <__sflush_r+0x2a>
1c0043e0 <__sflush_r+0x26> li	a0,0
1c0043e2 <__sflush_r+0x28> j	1c0044a0 <__sflush_r+0xe6>
1c0043e4 <__sflush_r+0x2a> lw	a4,44(s0)
1c0043e6 <__sflush_r+0x2c> beqz	a4,1c0043e0 <__sflush_r+0x26>
1c0043e8 <__sflush_r+0x2e> lui	a3,0x1
1c0043ea <__sflush_r+0x30> lw	s2,0(s1)
1c0043ee <__sflush_r+0x34> and	a5,a5,a3
1c0043f0 <__sflush_r+0x36> sw	zero,0(s1)
1c0043f4 <__sflush_r+0x3a> beqz	a5,1c00446e <__sflush_r+0xb4>
1c0043f6 <__sflush_r+0x3c> lw	a0,84(s0)
1c0043f8 <__sflush_r+0x3e> lhu	a5,12(s0)
1c0043fc <__sflush_r+0x42> andi	a5,a5,4
1c0043fe <__sflush_r+0x44> beqz	a5,1c00440c <__sflush_r+0x52>
1c004400 <__sflush_r+0x46> lw	a5,4(s0)
1c004402 <__sflush_r+0x48> sub	a0,a0,a5
1c004404 <__sflush_r+0x4a> lw	a5,52(s0)
1c004406 <__sflush_r+0x4c> beqz	a5,1c00440c <__sflush_r+0x52>
1c004408 <__sflush_r+0x4e> lw	a5,64(s0)
1c00440a <__sflush_r+0x50> sub	a0,a0,a5
1c00440c <__sflush_r+0x52> lw	a5,44(s0)
1c00440e <__sflush_r+0x54> lw	a1,32(s0)
1c004410 <__sflush_r+0x56> mv	a2,a0
1c004412 <__sflush_r+0x58> li	a3,0
1c004414 <__sflush_r+0x5a> mv	a0,s1
1c004416 <__sflush_r+0x5c> jalr	a5
1c004418 <__sflush_r+0x5e> li	a5,-1
1c00441a <__sflush_r+0x60> lhu	a4,12(s0)
1c00441e <__sflush_r+0x64> bne	a0,a5,1c004438 <__sflush_r+0x7e>
1c004422 <__sflush_r+0x68> lw	a3,0(s1)
1c004424 <__sflush_r+0x6a> li	a5,29
1c004426 <__sflush_r+0x6c> bltu	a5,a3,1c0044ae <__sflush_r+0xf4>
1c00442a <__sflush_r+0x70> lui	a5,0x20400
1c00442e <__sflush_r+0x74> addi	a5,a5,1
1c004430 <__sflush_r+0x76> srl	a5,a5,a3
1c004434 <__sflush_r+0x7a> andi	a5,a5,1
1c004436 <__sflush_r+0x7c> beqz	a5,1c0044ae <__sflush_r+0xf4>
1c004438 <__sflush_r+0x7e> lw	a5,16(s0)
1c00443a <__sflush_r+0x80> sw	zero,4(s0)
1c00443e <__sflush_r+0x84> sw	a5,0(s0)
1c004440 <__sflush_r+0x86> lui	a5,0x1
1c004442 <__sflush_r+0x88> and	a4,a4,a5
1c004444 <__sflush_r+0x8a> beqz	a4,1c004452 <__sflush_r+0x98>
1c004446 <__sflush_r+0x8c> li	a5,-1
1c004448 <__sflush_r+0x8e> bne	a0,a5,1c004450 <__sflush_r+0x96>
1c00444c <__sflush_r+0x92> lw	a5,0(s1)
1c00444e <__sflush_r+0x94> bnez	a5,1c004452 <__sflush_r+0x98>
1c004450 <__sflush_r+0x96> sw	a0,84(s0)
1c004452 <__sflush_r+0x98> lw	a1,52(s0)
1c004454 <__sflush_r+0x9a> sw	s2,0(s1)
1c004458 <__sflush_r+0x9e> beqz	a1,1c0043e0 <__sflush_r+0x26>
1c00445a <__sflush_r+0xa0> addi	a5,s0,68
1c00445e <__sflush_r+0xa4> beq	a1,a5,1c004468 <__sflush_r+0xae>
1c004462 <__sflush_r+0xa8> mv	a0,s1
1c004464 <__sflush_r+0xaa> jal	ra,1c003920 <_free_r>
1c004468 <__sflush_r+0xae> sw	zero,52(s0)
1c00446c <__sflush_r+0xb2> j	1c0043e0 <__sflush_r+0x26>
1c00446e <__sflush_r+0xb4> lw	a1,32(s0)
1c004470 <__sflush_r+0xb6> li	a3,1
1c004472 <__sflush_r+0xb8> li	a2,0
1c004474 <__sflush_r+0xba> mv	a0,s1
1c004476 <__sflush_r+0xbc> jalr	a4
1c004478 <__sflush_r+0xbe> li	a5,-1
1c00447a <__sflush_r+0xc0> bne	a0,a5,1c0043f8 <__sflush_r+0x3e>
1c00447e <__sflush_r+0xc4> lw	a5,0(s1)
1c004480 <__sflush_r+0xc6> beqz	a5,1c0043f8 <__sflush_r+0x3e>
1c004482 <__sflush_r+0xc8> li	a4,29
1c004484 <__sflush_r+0xca> beq	a5,a4,1c00448e <__sflush_r+0xd4>
1c004488 <__sflush_r+0xce> li	a4,22
1c00448a <__sflush_r+0xd0> bne	a5,a4,1c004494 <__sflush_r+0xda>
1c00448e <__sflush_r+0xd4> sw	s2,0(s1)
1c004492 <__sflush_r+0xd8> j	1c0043e0 <__sflush_r+0x26>
1c004494 <__sflush_r+0xda> lhu	a5,12(s0)
1c004498 <__sflush_r+0xde> ori	a5,a5,64
1c00449c <__sflush_r+0xe2> sh	a5,12(s0)
1c0044a0 <__sflush_r+0xe6> lw	ra,28(sp)
1c0044a2 <__sflush_r+0xe8> lw	s0,24(sp)
1c0044a4 <__sflush_r+0xea> lw	s1,20(sp)
1c0044a6 <__sflush_r+0xec> lw	s2,16(sp)
1c0044a8 <__sflush_r+0xee> lw	s3,12(sp)
1c0044aa <__sflush_r+0xf0> addi	sp,sp,32
1c0044ac <__sflush_r+0xf2> ret
1c0044ae <__sflush_r+0xf4> ori	a4,a4,64
1c0044b2 <__sflush_r+0xf8> sh	a4,12(s0)
1c0044b6 <__sflush_r+0xfc> j	1c0044a0 <__sflush_r+0xe6>
1c0044b8 <__sflush_r+0xfe> lw	s3,16(a1)
1c0044bc <__sflush_r+0x102> beqz	s3,1c0043e0 <__sflush_r+0x26>
1c0044c0 <__sflush_r+0x106> lw	s2,0(a1)
1c0044c4 <__sflush_r+0x10a> andi	a5,a5,3
1c0044c6 <__sflush_r+0x10c> sw	s3,0(a1)
1c0044ca <__sflush_r+0x110> sub	s2,s2,s3
1c0044ce <__sflush_r+0x114> li	a4,0
1c0044d0 <__sflush_r+0x116> bnez	a5,1c0044d4 <__sflush_r+0x11a>
1c0044d2 <__sflush_r+0x118> lw	a4,20(a1)
1c0044d4 <__sflush_r+0x11a> sw	a4,8(s0)
1c0044d6 <__sflush_r+0x11c> blez	s2,1c0043e0 <__sflush_r+0x26>
1c0044da <__sflush_r+0x120> lw	a5,40(s0)
1c0044dc <__sflush_r+0x122> lw	a1,32(s0)
1c0044de <__sflush_r+0x124> mv	a3,s2
1c0044e0 <__sflush_r+0x126> mv	a2,s3
1c0044e2 <__sflush_r+0x128> mv	a0,s1
1c0044e4 <__sflush_r+0x12a> jalr	a5
1c0044e6 <__sflush_r+0x12c> bgtz	a0,1c0044fa <__sflush_r+0x140>
1c0044ea <__sflush_r+0x130> lhu	a5,12(s0)
1c0044ee <__sflush_r+0x134> li	a0,-1
1c0044f0 <__sflush_r+0x136> ori	a5,a5,64
1c0044f4 <__sflush_r+0x13a> sh	a5,12(s0)
1c0044f8 <__sflush_r+0x13e> j	1c0044a0 <__sflush_r+0xe6>
1c0044fa <__sflush_r+0x140> add	s3,s3,a0
1c0044fc <__sflush_r+0x142> sub	s2,s2,a0
1c004500 <__sflush_r+0x146> j	1c0044d6 <__sflush_r+0x11c>
_fflush_r():
1c004502 <_fflush_r> lw	a5,16(a1)
1c004504 <_fflush_r+0x2> beqz	a5,1c004564 <_fflush_r+0x62>
1c004506 <_fflush_r+0x4> addi	sp,sp,-32
1c004508 <_fflush_r+0x6> sw	s0,24(sp)
1c00450a <_fflush_r+0x8> sw	ra,28(sp)
1c00450c <_fflush_r+0xa> mv	s0,a0
1c00450e <_fflush_r+0xc> beqz	a0,1c00451a <_fflush_r+0x18>
1c004510 <_fflush_r+0xe> lw	a5,24(a0)
1c004512 <_fflush_r+0x10> bnez	a5,1c00451a <_fflush_r+0x18>
1c004514 <_fflush_r+0x12> sw	a1,12(sp)
1c004516 <_fflush_r+0x14> jal	1c004624 <__sinit>
1c004518 <_fflush_r+0x16> lw	a1,12(sp)
1c00451a <_fflush_r+0x18> lui	a5,0x1c009
1c00451e <_fflush_r+0x1c> addi	a5,a5,-1516 # 1c008a14 <__sf_fake_stdin>
1c004522 <_fflush_r+0x20> bne	a1,a5,1c00453a <_fflush_r+0x38>
1c004526 <_fflush_r+0x24> lw	a1,4(s0)
1c004528 <_fflush_r+0x26> lh	a5,12(a1)
1c00452c <_fflush_r+0x2a> beqz	a5,1c00455a <_fflush_r+0x58>
1c00452e <_fflush_r+0x2c> mv	a0,s0
1c004530 <_fflush_r+0x2e> lw	s0,24(sp)
1c004532 <_fflush_r+0x30> lw	ra,28(sp)
1c004534 <_fflush_r+0x32> addi	sp,sp,32
1c004536 <_fflush_r+0x34> j	1c0043ba <__sflush_r>
1c00453a <_fflush_r+0x38> lui	a5,0x1c009
1c00453e <_fflush_r+0x3c> addi	a5,a5,-1484 # 1c008a34 <__sf_fake_stdout>
1c004542 <_fflush_r+0x40> bne	a1,a5,1c00454a <_fflush_r+0x48>
1c004546 <_fflush_r+0x44> lw	a1,8(s0)
1c004548 <_fflush_r+0x46> j	1c004528 <_fflush_r+0x26>
1c00454a <_fflush_r+0x48> lui	a5,0x1c009
1c00454e <_fflush_r+0x4c> addi	a5,a5,-1548 # 1c0089f4 <__sf_fake_stderr>
1c004552 <_fflush_r+0x50> bne	a1,a5,1c004528 <_fflush_r+0x26>
1c004556 <_fflush_r+0x54> lw	a1,12(s0)
1c004558 <_fflush_r+0x56> j	1c004528 <_fflush_r+0x26>
1c00455a <_fflush_r+0x58> lw	ra,28(sp)
1c00455c <_fflush_r+0x5a> lw	s0,24(sp)
1c00455e <_fflush_r+0x5c> li	a0,0
1c004560 <_fflush_r+0x5e> addi	sp,sp,32
1c004562 <_fflush_r+0x60> ret
1c004564 <_fflush_r+0x62> li	a0,0
1c004566 <_fflush_r+0x64> ret
std():
1c004568 <std> addi	sp,sp,-16
1c00456a <std+0x2> sw	s0,8(sp)
1c00456c <std+0x4> sw	ra,12(sp)
1c00456e <std+0x6> mv	s0,a0
1c004570 <std+0x8> sh	a1,12(a0)
1c004574 <std+0xc> sh	a2,14(a0)
1c004578 <std+0x10> sw	zero,0(a0)
1c00457c <std+0x14> sw	zero,4(a0)
1c004580 <std+0x18> sw	zero,8(a0)
1c004584 <std+0x1c> sw	zero,100(a0)
1c004588 <std+0x20> sw	zero,16(a0)
1c00458c <std+0x24> sw	zero,20(a0)
1c004590 <std+0x28> sw	zero,24(a0)
1c004594 <std+0x2c> li	a2,8
1c004596 <std+0x2e> li	a1,0
1c004598 <std+0x30> addi	a0,a0,92
1c00459c <std+0x34> jal	ra,1c000e7a <memset>
1c0045a0 <std+0x38> lui	a5,0x1c005
1c0045a4 <std+0x3c> addi	a5,a5,-978 # 1c004c2e <__sread>
1c0045a8 <std+0x40> sw	a5,36(s0)
1c0045aa <std+0x42> lui	a5,0x1c005
1c0045ae <std+0x46> addi	a5,a5,-930 # 1c004c5e <__swrite>
1c0045b2 <std+0x4a> sw	a5,40(s0)
1c0045b4 <std+0x4c> lui	a5,0x1c005
1c0045b8 <std+0x50> addi	a5,a5,-852 # 1c004cac <__sseek>
1c0045bc <std+0x54> sw	a5,44(s0)
1c0045be <std+0x56> lui	a5,0x1c005
1c0045c2 <std+0x5a> addi	a5,a5,-798 # 1c004ce2 <__sclose>
1c0045c6 <std+0x5e> lw	ra,12(sp)
1c0045c8 <std+0x60> sw	s0,32(s0)
1c0045ca <std+0x62> sw	a5,48(s0)
1c0045cc <std+0x64> lw	s0,8(sp)
1c0045ce <std+0x66> addi	sp,sp,16
1c0045d0 <std+0x68> ret
_cleanup_r():
1c0045d2 <_cleanup_r> lui	a1,0x1c004
1c0045d6 <_cleanup_r+0x4> addi	a1,a1,1282 # 1c004502 <_fflush_r>
1c0045da <_cleanup_r+0x8> j	1c004736 <_fwalk_reent>
__sfmoreglue():
1c0045dc <__sfmoreglue> addi	sp,sp,-16
1c0045de <__sfmoreglue+0x2> sw	s1,4(sp)
1c0045e0 <__sfmoreglue+0x4> li	a2,104
1c0045e4 <__sfmoreglue+0x8> addi	s1,a1,-1
1c0045e8 <__sfmoreglue+0xc> mul	s1,s1,a2
1c0045ec <__sfmoreglue+0x10> sw	s2,0(sp)
1c0045ee <__sfmoreglue+0x12> mv	s2,a1
1c0045f0 <__sfmoreglue+0x14> sw	s0,8(sp)
1c0045f2 <__sfmoreglue+0x16> sw	ra,12(sp)
1c0045f4 <__sfmoreglue+0x18> addi	a1,s1,116
1c0045f8 <__sfmoreglue+0x1c> jal	ra,1c0039c8 <_malloc_r>
1c0045fc <__sfmoreglue+0x20> mv	s0,a0
1c0045fe <__sfmoreglue+0x22> beqz	a0,1c004616 <__sfmoreglue+0x3a>
1c004600 <__sfmoreglue+0x24> sw	zero,0(a0)
1c004604 <__sfmoreglue+0x28> sw	s2,4(a0)
1c004608 <__sfmoreglue+0x2c> addi	a0,a0,12
1c00460a <__sfmoreglue+0x2e> sw	a0,8(s0)
1c00460c <__sfmoreglue+0x30> addi	a2,s1,104
1c004610 <__sfmoreglue+0x34> li	a1,0
1c004612 <__sfmoreglue+0x36> jal	ra,1c000e7a <memset>
1c004616 <__sfmoreglue+0x3a> lw	ra,12(sp)
1c004618 <__sfmoreglue+0x3c> mv	a0,s0
1c00461a <__sfmoreglue+0x3e> lw	s0,8(sp)
1c00461c <__sfmoreglue+0x40> lw	s1,4(sp)
1c00461e <__sfmoreglue+0x42> lw	s2,0(sp)
1c004620 <__sfmoreglue+0x44> addi	sp,sp,16
1c004622 <__sfmoreglue+0x46> ret
__sinit():
1c004624 <__sinit> lw	a5,24(a0)
1c004626 <__sinit+0x2> bnez	a5,1c004692 <__sinit+0x6e>
1c004628 <__sinit+0x4> addi	sp,sp,-16
1c00462a <__sinit+0x6> lui	a5,0x1c004
1c00462e <__sinit+0xa> sw	s0,8(sp)
1c004630 <__sinit+0xc> sw	ra,12(sp)
1c004632 <__sinit+0xe> addi	a5,a5,1490 # 1c0045d2 <_cleanup_r>
1c004636 <__sinit+0x12> sw	a5,40(a0)
1c004638 <__sinit+0x14> lui	a5,0x1c009
1c00463c <__sinit+0x18> lw	a5,-1064(a5) # 1c008bd8 <_global_impure_ptr>
1c004640 <__sinit+0x1c> sw	zero,72(a0)
1c004644 <__sinit+0x20> sw	zero,76(a0)
1c004648 <__sinit+0x24> sw	zero,80(a0)
1c00464c <__sinit+0x28> mv	s0,a0
1c00464e <__sinit+0x2a> bne	a0,a5,1c004656 <__sinit+0x32>
1c004652 <__sinit+0x2e> li	a5,1
1c004654 <__sinit+0x30> sw	a5,24(a0)
1c004656 <__sinit+0x32> mv	a0,s0
1c004658 <__sinit+0x34> jal	1c004694 <__sfp>
1c00465a <__sinit+0x36> sw	a0,4(s0)
1c00465c <__sinit+0x38> mv	a0,s0
1c00465e <__sinit+0x3a> jal	1c004694 <__sfp>
1c004660 <__sinit+0x3c> sw	a0,8(s0)
1c004662 <__sinit+0x3e> mv	a0,s0
1c004664 <__sinit+0x40> jal	1c004694 <__sfp>
1c004666 <__sinit+0x42> sw	a0,12(s0)
1c004668 <__sinit+0x44> lw	a0,4(s0)
1c00466a <__sinit+0x46> li	a2,0
1c00466c <__sinit+0x48> li	a1,4
1c00466e <__sinit+0x4a> jal	ra,1c004568 <std>
1c004672 <__sinit+0x4e> lw	a0,8(s0)
1c004674 <__sinit+0x50> li	a2,1
1c004676 <__sinit+0x52> li	a1,9
1c004678 <__sinit+0x54> jal	ra,1c004568 <std>
1c00467c <__sinit+0x58> lw	a0,12(s0)
1c00467e <__sinit+0x5a> li	a2,2
1c004680 <__sinit+0x5c> li	a1,18
1c004682 <__sinit+0x5e> jal	ra,1c004568 <std>
1c004686 <__sinit+0x62> li	a5,1
1c004688 <__sinit+0x64> lw	ra,12(sp)
1c00468a <__sinit+0x66> sw	a5,24(s0)
1c00468c <__sinit+0x68> lw	s0,8(sp)
1c00468e <__sinit+0x6a> addi	sp,sp,16
1c004690 <__sinit+0x6c> ret
1c004692 <__sinit+0x6e> ret
__sfp():
1c004694 <__sfp> addi	sp,sp,-16
1c004696 <__sfp+0x2> lui	a5,0x1c009
1c00469a <__sfp+0x6> sw	s1,4(sp)
1c00469c <__sfp+0x8> lw	s1,-1064(a5) # 1c008bd8 <_global_impure_ptr>
1c0046a0 <__sfp+0xc> sw	s2,0(sp)
1c0046a2 <__sfp+0xe> sw	ra,12(sp)
1c0046a4 <__sfp+0x10> lw	a5,24(s1)
1c0046a6 <__sfp+0x12> sw	s0,8(sp)
1c0046a8 <__sfp+0x14> mv	s2,a0
1c0046aa <__sfp+0x16> bnez	a5,1c0046b2 <__sfp+0x1e>
1c0046ac <__sfp+0x18> mv	a0,s1
1c0046ae <__sfp+0x1a> jal	ra,1c004624 <__sinit>
1c0046b2 <__sfp+0x1e> addi	s1,s1,72
1c0046b6 <__sfp+0x22> lw	s0,8(s1)
1c0046b8 <__sfp+0x24> lw	a5,4(s1)
1c0046ba <__sfp+0x26> addi	a5,a5,-1
1c0046bc <__sfp+0x28> bgez	a5,1c0046c8 <__sfp+0x34>
1c0046c0 <__sfp+0x2c> lw	a5,0(s1)
1c0046c2 <__sfp+0x2e> beqz	a5,1c004720 <__sfp+0x8c>
1c0046c4 <__sfp+0x30> lw	s1,0(s1)
1c0046c6 <__sfp+0x32> j	1c0046b6 <__sfp+0x22>
1c0046c8 <__sfp+0x34> lh	a4,12(s0)
1c0046cc <__sfp+0x38> bnez	a4,1c00471a <__sfp+0x86>
1c0046ce <__sfp+0x3a> lui	a5,0xffff0
1c0046d0 <__sfp+0x3c> addi	a5,a5,1
1c0046d2 <__sfp+0x3e> sw	zero,100(s0)
1c0046d6 <__sfp+0x42> sw	zero,0(s0)
1c0046da <__sfp+0x46> sw	zero,4(s0)
1c0046de <__sfp+0x4a> sw	zero,8(s0)
1c0046e2 <__sfp+0x4e> sw	a5,12(s0)
1c0046e4 <__sfp+0x50> sw	zero,16(s0)
1c0046e8 <__sfp+0x54> sw	zero,20(s0)
1c0046ec <__sfp+0x58> sw	zero,24(s0)
1c0046f0 <__sfp+0x5c> li	a2,8
1c0046f2 <__sfp+0x5e> li	a1,0
1c0046f4 <__sfp+0x60> addi	a0,s0,92
1c0046f8 <__sfp+0x64> jal	ra,1c000e7a <memset>
1c0046fc <__sfp+0x68> sw	zero,52(s0)
1c004700 <__sfp+0x6c> sw	zero,56(s0)
1c004704 <__sfp+0x70> sw	zero,72(s0)
1c004708 <__sfp+0x74> sw	zero,76(s0)
1c00470c <__sfp+0x78> lw	ra,12(sp)
1c00470e <__sfp+0x7a> mv	a0,s0
1c004710 <__sfp+0x7c> lw	s0,8(sp)
1c004712 <__sfp+0x7e> lw	s1,4(sp)
1c004714 <__sfp+0x80> lw	s2,0(sp)
1c004716 <__sfp+0x82> addi	sp,sp,16
1c004718 <__sfp+0x84> ret
1c00471a <__sfp+0x86> addi	s0,s0,104
1c00471e <__sfp+0x8a> j	1c0046ba <__sfp+0x26>
1c004720 <__sfp+0x8c> li	a1,4
1c004722 <__sfp+0x8e> mv	a0,s2
1c004724 <__sfp+0x90> jal	ra,1c0045dc <__sfmoreglue>
1c004728 <__sfp+0x94> sw	a0,0(s1)
1c00472a <__sfp+0x96> mv	s0,a0
1c00472c <__sfp+0x98> bnez	a0,1c0046c4 <__sfp+0x30>
1c00472e <__sfp+0x9a> li	a5,12
1c004730 <__sfp+0x9c> sw	a5,0(s2)
1c004734 <__sfp+0xa0> j	1c00470c <__sfp+0x78>
_fwalk_reent():
1c004736 <_fwalk_reent> addi	sp,sp,-48
1c004738 <_fwalk_reent+0x2> sw	s0,40(sp)
1c00473a <_fwalk_reent+0x4> sw	s2,32(sp)
1c00473c <_fwalk_reent+0x6> sw	s3,28(sp)
1c00473e <_fwalk_reent+0x8> sw	s4,24(sp)
1c004740 <_fwalk_reent+0xa> sw	s6,16(sp)
1c004742 <_fwalk_reent+0xc> sw	s7,12(sp)
1c004744 <_fwalk_reent+0xe> sw	ra,44(sp)
1c004746 <_fwalk_reent+0x10> sw	s1,36(sp)
1c004748 <_fwalk_reent+0x12> sw	s5,20(sp)
1c00474a <_fwalk_reent+0x14> mv	s2,a0
1c00474c <_fwalk_reent+0x16> mv	s4,a1
1c00474e <_fwalk_reent+0x18> addi	s0,a0,72
1c004752 <_fwalk_reent+0x1c> li	s3,0
1c004754 <_fwalk_reent+0x1e> li	s6,1
1c004756 <_fwalk_reent+0x20> li	s7,-1
1c004758 <_fwalk_reent+0x22> lw	s1,8(s0)
1c00475a <_fwalk_reent+0x24> lw	s5,4(s0)
1c00475e <_fwalk_reent+0x28> addi	s5,s5,-1
1c004760 <_fwalk_reent+0x2a> bgez	s5,1c004780 <_fwalk_reent+0x4a>
1c004764 <_fwalk_reent+0x2e> lw	s0,0(s0)
1c004766 <_fwalk_reent+0x30> bnez	s0,1c004758 <_fwalk_reent+0x22>
1c004768 <_fwalk_reent+0x32> lw	ra,44(sp)
1c00476a <_fwalk_reent+0x34> lw	s0,40(sp)
1c00476c <_fwalk_reent+0x36> lw	s1,36(sp)
1c00476e <_fwalk_reent+0x38> lw	s2,32(sp)
1c004770 <_fwalk_reent+0x3a> lw	s4,24(sp)
1c004772 <_fwalk_reent+0x3c> lw	s5,20(sp)
1c004774 <_fwalk_reent+0x3e> lw	s6,16(sp)
1c004776 <_fwalk_reent+0x40> lw	s7,12(sp)
1c004778 <_fwalk_reent+0x42> mv	a0,s3
1c00477a <_fwalk_reent+0x44> lw	s3,28(sp)
1c00477c <_fwalk_reent+0x46> addi	sp,sp,48
1c00477e <_fwalk_reent+0x48> ret
1c004780 <_fwalk_reent+0x4a> lhu	a5,12(s1)
1c004784 <_fwalk_reent+0x4e> bgeu	s6,a5,1c00479a <_fwalk_reent+0x64>
1c004788 <_fwalk_reent+0x52> lh	a5,14(s1)
1c00478c <_fwalk_reent+0x56> beq	a5,s7,1c00479a <_fwalk_reent+0x64>
1c004790 <_fwalk_reent+0x5a> mv	a1,s1
1c004792 <_fwalk_reent+0x5c> mv	a0,s2
1c004794 <_fwalk_reent+0x5e> jalr	s4
1c004796 <_fwalk_reent+0x60> or	s3,s3,a0
1c00479a <_fwalk_reent+0x64> addi	s1,s1,104
1c00479e <_fwalk_reent+0x68> j	1c00475e <_fwalk_reent+0x28>
__swhatbuf_r():
1c0047a0 <__swhatbuf_r> addi	sp,sp,-112
1c0047a2 <__swhatbuf_r+0x2> sw	s2,96(sp)
1c0047a4 <__swhatbuf_r+0x4> mv	s2,a1
1c0047a6 <__swhatbuf_r+0x6> lh	a1,14(a1)
1c0047aa <__swhatbuf_r+0xa> sw	s0,104(sp)
1c0047ac <__swhatbuf_r+0xc> sw	s1,100(sp)
1c0047ae <__swhatbuf_r+0xe> sw	ra,108(sp)
1c0047b0 <__swhatbuf_r+0x10> mv	s0,a2
1c0047b2 <__swhatbuf_r+0x12> mv	s1,a3
1c0047b4 <__swhatbuf_r+0x14> bgez	a1,1c0047cc <__swhatbuf_r+0x2c>
1c0047b8 <__swhatbuf_r+0x18> lh	a5,12(s2)
1c0047bc <__swhatbuf_r+0x1c> sw	zero,0(s1)
1c0047c0 <__swhatbuf_r+0x20> andi	a5,a5,128
1c0047c4 <__swhatbuf_r+0x24> bnez	a5,1c0047e6 <__swhatbuf_r+0x46>
1c0047c6 <__swhatbuf_r+0x26> li	a5,1024
1c0047ca <__swhatbuf_r+0x2a> j	1c0047ea <__swhatbuf_r+0x4a>
1c0047cc <__swhatbuf_r+0x2c> addi	a2,sp,8
1c0047ce <__swhatbuf_r+0x2e> jal	1c004d44 <_fstat_r>
1c0047d0 <__swhatbuf_r+0x30> bltz	a0,1c0047b8 <__swhatbuf_r+0x18>
1c0047d4 <__swhatbuf_r+0x34> lw	a4,12(sp)
1c0047d6 <__swhatbuf_r+0x36> lui	a5,0xf
1c0047d8 <__swhatbuf_r+0x38> and	a5,a5,a4
1c0047da <__swhatbuf_r+0x3a> lui	a4,0xffffe
1c0047dc <__swhatbuf_r+0x3c> add	a5,a5,a4
1c0047de <__swhatbuf_r+0x3e> seqz	a5,a5
1c0047e2 <__swhatbuf_r+0x42> sw	a5,0(s1)
1c0047e4 <__swhatbuf_r+0x44> j	1c0047c6 <__swhatbuf_r+0x26>
1c0047e6 <__swhatbuf_r+0x46> li	a5,64
1c0047ea <__swhatbuf_r+0x4a> lw	ra,108(sp)
1c0047ec <__swhatbuf_r+0x4c> sw	a5,0(s0)
1c0047ee <__swhatbuf_r+0x4e> lw	s0,104(sp)
1c0047f0 <__swhatbuf_r+0x50> lw	s1,100(sp)
1c0047f2 <__swhatbuf_r+0x52> lw	s2,96(sp)
1c0047f4 <__swhatbuf_r+0x54> li	a0,0
1c0047f6 <__swhatbuf_r+0x56> addi	sp,sp,112
1c0047f8 <__swhatbuf_r+0x58> ret
__smakebuf_r():
1c0047fa <__smakebuf_r> lhu	a5,12(a1)
1c0047fe <__smakebuf_r+0x4> addi	sp,sp,-32
1c004800 <__smakebuf_r+0x6> sw	s0,24(sp)
1c004802 <__smakebuf_r+0x8> sw	ra,28(sp)
1c004804 <__smakebuf_r+0xa> sw	s1,20(sp)
1c004806 <__smakebuf_r+0xc> sw	s2,16(sp)
1c004808 <__smakebuf_r+0xe> andi	a5,a5,2
1c00480a <__smakebuf_r+0x10> mv	s0,a1
1c00480c <__smakebuf_r+0x12> beqz	a5,1c004826 <__smakebuf_r+0x2c>
1c00480e <__smakebuf_r+0x14> addi	a5,s0,71
1c004812 <__smakebuf_r+0x18> sw	a5,0(s0)
1c004814 <__smakebuf_r+0x1a> sw	a5,16(s0)
1c004816 <__smakebuf_r+0x1c> li	a5,1
1c004818 <__smakebuf_r+0x1e> sw	a5,20(s0)
1c00481a <__smakebuf_r+0x20> lw	ra,28(sp)
1c00481c <__smakebuf_r+0x22> lw	s0,24(sp)
1c00481e <__smakebuf_r+0x24> lw	s1,20(sp)
1c004820 <__smakebuf_r+0x26> lw	s2,16(sp)
1c004822 <__smakebuf_r+0x28> addi	sp,sp,32
1c004824 <__smakebuf_r+0x2a> ret
1c004826 <__smakebuf_r+0x2c> addi	a3,sp,12
1c004828 <__smakebuf_r+0x2e> addi	a2,sp,8
1c00482a <__smakebuf_r+0x30> mv	s2,a0
1c00482c <__smakebuf_r+0x32> jal	ra,1c0047a0 <__swhatbuf_r>
1c004830 <__smakebuf_r+0x36> lw	a1,8(sp)
1c004832 <__smakebuf_r+0x38> mv	s1,a0
1c004834 <__smakebuf_r+0x3a> mv	a0,s2
1c004836 <__smakebuf_r+0x3c> jal	ra,1c0039c8 <_malloc_r>
1c00483a <__smakebuf_r+0x40> bnez	a0,1c004852 <__smakebuf_r+0x58>
1c00483c <__smakebuf_r+0x42> lh	a5,12(s0)
1c004840 <__smakebuf_r+0x46> andi	a4,a5,512
1c004844 <__smakebuf_r+0x4a> bnez	a4,1c00481a <__smakebuf_r+0x20>
1c004846 <__smakebuf_r+0x4c> andi	a5,a5,-4
1c004848 <__smakebuf_r+0x4e> ori	a5,a5,2
1c00484c <__smakebuf_r+0x52> sh	a5,12(s0)
1c004850 <__smakebuf_r+0x56> j	1c00480e <__smakebuf_r+0x14>
1c004852 <__smakebuf_r+0x58> lui	a5,0x1c004
1c004856 <__smakebuf_r+0x5c> addi	a5,a5,1490 # 1c0045d2 <_cleanup_r>
1c00485a <__smakebuf_r+0x60> sw	a5,40(s2)
1c00485e <__smakebuf_r+0x64> lhu	a5,12(s0)
1c004862 <__smakebuf_r+0x68> sw	a0,0(s0)
1c004864 <__smakebuf_r+0x6a> sw	a0,16(s0)
1c004866 <__smakebuf_r+0x6c> ori	a5,a5,128
1c00486a <__smakebuf_r+0x70> sh	a5,12(s0)
1c00486e <__smakebuf_r+0x74> lw	a5,8(sp)
1c004870 <__smakebuf_r+0x76> sw	a5,20(s0)
1c004872 <__smakebuf_r+0x78> lw	a5,12(sp)
1c004874 <__smakebuf_r+0x7a> beqz	a5,1c00488e <__smakebuf_r+0x94>
1c004876 <__smakebuf_r+0x7c> lh	a1,14(s0)
1c00487a <__smakebuf_r+0x80> mv	a0,s2
1c00487c <__smakebuf_r+0x82> jal	1c004d72 <_isatty_r>
1c00487e <__smakebuf_r+0x84> beqz	a0,1c00488e <__smakebuf_r+0x94>
1c004880 <__smakebuf_r+0x86> lhu	a5,12(s0)
1c004884 <__smakebuf_r+0x8a> andi	a5,a5,-4
1c004886 <__smakebuf_r+0x8c> ori	a5,a5,1
1c00488a <__smakebuf_r+0x90> sh	a5,12(s0)
1c00488e <__smakebuf_r+0x94> lhu	a0,12(s0)
1c004892 <__smakebuf_r+0x98> or	s1,s1,a0
1c004894 <__smakebuf_r+0x9a> sh	s1,12(s0)
1c004898 <__smakebuf_r+0x9e> j	1c00481a <__smakebuf_r+0x20>
memchr():
1c00489a <memchr> andi	a1,a1,255
1c00489e <memchr+0x4> add	a2,a2,a0
1c0048a0 <memchr+0x6> bne	a0,a2,1c0048a8 <memchr+0xe>
1c0048a4 <memchr+0xa> li	a0,0
1c0048a6 <memchr+0xc> ret
1c0048a8 <memchr+0xe> lbu	a5,0(a0)
1c0048ac <memchr+0x12> beq	a5,a1,1c0048a6 <memchr+0xc>
1c0048b0 <memchr+0x16> addi	a0,a0,1
1c0048b2 <memchr+0x18> j	1c0048a0 <memchr+0x6>
_printf_common():
1c0048b4 <_printf_common> addi	sp,sp,-48
1c0048b6 <_printf_common+0x2> sw	s4,24(sp)
1c0048b8 <_printf_common+0x4> lw	a5,16(a1)
1c0048ba <_printf_common+0x6> mv	s4,a4
1c0048bc <_printf_common+0x8> lw	a4,8(a1)
1c0048be <_printf_common+0xa> sw	s0,40(sp)
1c0048c0 <_printf_common+0xc> sw	s1,36(sp)
1c0048c2 <_printf_common+0xe> sw	s3,28(sp)
1c0048c4 <_printf_common+0x10> sw	s5,20(sp)
1c0048c6 <_printf_common+0x12> sw	ra,44(sp)
1c0048c8 <_printf_common+0x14> sw	s2,32(sp)
1c0048ca <_printf_common+0x16> sw	s6,16(sp)
1c0048cc <_printf_common+0x18> sw	s7,12(sp)
1c0048ce <_printf_common+0x1a> mv	s3,a0
1c0048d0 <_printf_common+0x1c> mv	s0,a1
1c0048d2 <_printf_common+0x1e> mv	s1,a2
1c0048d4 <_printf_common+0x20> mv	s5,a3
1c0048d6 <_printf_common+0x22> bge	a5,a4,1c0048dc <_printf_common+0x28>
1c0048da <_printf_common+0x26> mv	a5,a4
1c0048dc <_printf_common+0x28> sw	a5,0(s1)
1c0048de <_printf_common+0x2a> lbu	a4,67(s0)
1c0048e2 <_printf_common+0x2e> beqz	a4,1c0048e8 <_printf_common+0x34>
1c0048e4 <_printf_common+0x30> addi	a5,a5,1
1c0048e6 <_printf_common+0x32> sw	a5,0(s1)
1c0048e8 <_printf_common+0x34> lw	a5,0(s0)
1c0048ea <_printf_common+0x36> andi	a5,a5,32
1c0048ee <_printf_common+0x3a> beqz	a5,1c0048f6 <_printf_common+0x42>
1c0048f0 <_printf_common+0x3c> lw	a5,0(s1)
1c0048f2 <_printf_common+0x3e> addi	a5,a5,2
1c0048f4 <_printf_common+0x40> sw	a5,0(s1)
1c0048f6 <_printf_common+0x42> lw	s2,0(s0)
1c0048fa <_printf_common+0x46> andi	s2,s2,6
1c0048fe <_printf_common+0x4a> bnez	s2,1c004912 <_printf_common+0x5e>
1c004902 <_printf_common+0x4e> addi	s6,s0,25
1c004906 <_printf_common+0x52> li	s7,-1
1c004908 <_printf_common+0x54> lw	a5,12(s0)
1c00490a <_printf_common+0x56> lw	a4,0(s1)
1c00490c <_printf_common+0x58> sub	a5,a5,a4
1c00490e <_printf_common+0x5a> blt	s2,a5,1c004966 <_printf_common+0xb2>
1c004912 <_printf_common+0x5e> lbu	a5,67(s0)
1c004916 <_printf_common+0x62> snez	a3,a5
1c00491a <_printf_common+0x66> lw	a5,0(s0)
1c00491c <_printf_common+0x68> andi	a5,a5,32
1c004920 <_printf_common+0x6c> bnez	a5,1c004990 <_printf_common+0xdc>
1c004922 <_printf_common+0x6e> addi	a2,s0,67
1c004926 <_printf_common+0x72> mv	a1,s5
1c004928 <_printf_common+0x74> mv	a0,s3
1c00492a <_printf_common+0x76> jalr	s4
1c00492c <_printf_common+0x78> li	a5,-1
1c00492e <_printf_common+0x7a> beq	a0,a5,1c004974 <_printf_common+0xc0>
1c004932 <_printf_common+0x7e> lw	a5,0(s0)
1c004934 <_printf_common+0x80> li	a2,4
1c004936 <_printf_common+0x82> lw	a4,0(s1)
1c004938 <_printf_common+0x84> andi	a5,a5,6
1c00493a <_printf_common+0x86> lw	a3,12(s0)
1c00493c <_printf_common+0x88> li	s1,0
1c00493e <_printf_common+0x8a> bne	a5,a2,1c00494c <_printf_common+0x98>
1c004942 <_printf_common+0x8e> sub	s1,a3,a4
1c004946 <_printf_common+0x92> bgez	s1,1c00494c <_printf_common+0x98>
1c00494a <_printf_common+0x96> li	s1,0
1c00494c <_printf_common+0x98> lw	a5,8(s0)
1c00494e <_printf_common+0x9a> lw	a4,16(s0)
1c004950 <_printf_common+0x9c> bge	a4,a5,1c004958 <_printf_common+0xa4>
1c004954 <_printf_common+0xa0> sub	a5,a5,a4
1c004956 <_printf_common+0xa2> add	s1,s1,a5
1c004958 <_printf_common+0xa4> li	s2,0
1c00495a <_printf_common+0xa6> addi	s0,s0,26
1c00495c <_printf_common+0xa8> li	s6,-1
1c00495e <_printf_common+0xaa> bne	s1,s2,1c0049ae <_printf_common+0xfa>
1c004962 <_printf_common+0xae> li	a0,0
1c004964 <_printf_common+0xb0> j	1c004976 <_printf_common+0xc2>
1c004966 <_printf_common+0xb2> li	a3,1
1c004968 <_printf_common+0xb4> mv	a2,s6
1c00496a <_printf_common+0xb6> mv	a1,s5
1c00496c <_printf_common+0xb8> mv	a0,s3
1c00496e <_printf_common+0xba> jalr	s4
1c004970 <_printf_common+0xbc> bne	a0,s7,1c00498c <_printf_common+0xd8>
1c004974 <_printf_common+0xc0> li	a0,-1
1c004976 <_printf_common+0xc2> lw	ra,44(sp)
1c004978 <_printf_common+0xc4> lw	s0,40(sp)
1c00497a <_printf_common+0xc6> lw	s1,36(sp)
1c00497c <_printf_common+0xc8> lw	s2,32(sp)
1c00497e <_printf_common+0xca> lw	s3,28(sp)
1c004980 <_printf_common+0xcc> lw	s4,24(sp)
1c004982 <_printf_common+0xce> lw	s5,20(sp)
1c004984 <_printf_common+0xd0> lw	s6,16(sp)
1c004986 <_printf_common+0xd2> lw	s7,12(sp)
1c004988 <_printf_common+0xd4> addi	sp,sp,48
1c00498a <_printf_common+0xd6> ret
1c00498c <_printf_common+0xd8> addi	s2,s2,1
1c00498e <_printf_common+0xda> j	1c004908 <_printf_common+0x54>
1c004990 <_printf_common+0xdc> add	a4,s0,a3
1c004994 <_printf_common+0xe0> li	a2,48
1c004998 <_printf_common+0xe4> sb	a2,67(a4) # ffffe043 <__heap_l2_shared_start+0xe3fe4673>
1c00499c <_printf_common+0xe8> lbu	a4,69(s0)
1c0049a0 <_printf_common+0xec> addi	a5,a3,1 # 00001001 <__stack_size+0x801>
1c0049a4 <_printf_common+0xf0> add	a5,a5,s0
1c0049a6 <_printf_common+0xf2> addi	a3,a3,2
1c0049a8 <_printf_common+0xf4> sb	a4,67(a5)
1c0049ac <_printf_common+0xf8> j	1c004922 <_printf_common+0x6e>
1c0049ae <_printf_common+0xfa> li	a3,1
1c0049b0 <_printf_common+0xfc> mv	a2,s0
1c0049b2 <_printf_common+0xfe> mv	a1,s5
1c0049b4 <_printf_common+0x100> mv	a0,s3
1c0049b6 <_printf_common+0x102> jalr	s4
1c0049b8 <_printf_common+0x104> beq	a0,s6,1c004974 <_printf_common+0xc0>
1c0049bc <_printf_common+0x108> addi	s2,s2,1
1c0049be <_printf_common+0x10a> j	1c00495e <_printf_common+0xaa>
_printf_i():
1c0049c0 <_printf_i> addi	sp,sp,-48
1c0049c2 <_printf_i+0x2> sw	s0,40(sp)
1c0049c4 <_printf_i+0x4> sw	s1,36(sp)
1c0049c6 <_printf_i+0x6> sw	s2,32(sp)
1c0049c8 <_printf_i+0x8> sw	s3,28(sp)
1c0049ca <_printf_i+0xa> sw	ra,44(sp)
1c0049cc <_printf_i+0xc> sw	s4,24(sp)
1c0049ce <_printf_i+0xe> sw	s5,20(sp)
1c0049d0 <_printf_i+0x10> sw	s6,16(sp)
1c0049d2 <_printf_i+0x12> lbu	a7,24(a1)
1c0049d6 <_printf_i+0x16> li	a5,120
1c0049da <_printf_i+0x1a> mv	s1,a0
1c0049dc <_printf_i+0x1c> mv	s0,a1
1c0049de <_printf_i+0x1e> mv	s2,a2
1c0049e0 <_printf_i+0x20> mv	s3,a3
1c0049e2 <_printf_i+0x22> bltu	a5,a7,1c0049fe <_printf_i+0x3e>
1c0049e6 <_printf_i+0x26> li	a5,98
1c0049ea <_printf_i+0x2a> addi	a3,a1,67
1c0049ee <_printf_i+0x2e> bltu	a5,a7,1c004a08 <_printf_i+0x48>
1c0049f2 <_printf_i+0x32> beqz	a7,1c004bb8 <_printf_i+0x1f8>
1c0049f6 <_printf_i+0x36> li	a5,88
1c0049fa <_printf_i+0x3a> beq	a7,a5,1c004b2e <_printf_i+0x16e>
1c0049fe <_printf_i+0x3e> addi	s5,s0,66
1c004a02 <_printf_i+0x42> sb	a7,66(s0)
1c004a06 <_printf_i+0x46> j	1c004a38 <_printf_i+0x78>
1c004a08 <_printf_i+0x48> addi	a5,a7,-99
1c004a0c <_printf_i+0x4c> andi	a5,a5,255
1c004a10 <_printf_i+0x50> li	a2,21
1c004a12 <_printf_i+0x52> bltu	a2,a5,1c0049fe <_printf_i+0x3e>
1c004a16 <_printf_i+0x56> lui	a2,0x1c009
1c004a1a <_printf_i+0x5a> slli	a5,a5,0x2
1c004a1c <_printf_i+0x5c> addi	a2,a2,-1412 # 1c008a7c <__sf_fake_stdout+0x48>
1c004a20 <_printf_i+0x60> add	a5,a5,a2
1c004a22 <_printf_i+0x62> lw	a5,0(a5)
1c004a24 <_printf_i+0x64> jr	a5
1c004a26 <_printf_i+0x66> lw	a5,0(a4)
1c004a28 <_printf_i+0x68> addi	s5,a1,66
1c004a2c <_printf_i+0x6c> addi	a3,a5,4
1c004a30 <_printf_i+0x70> lw	a5,0(a5)
1c004a32 <_printf_i+0x72> sw	a3,0(a4)
1c004a34 <_printf_i+0x74> sb	a5,66(a1)
1c004a38 <_printf_i+0x78> li	a5,1
1c004a3a <_printf_i+0x7a> j	1c004be0 <_printf_i+0x220>
1c004a3c <_printf_i+0x7c> lw	a5,0(a1)
1c004a3e <_printf_i+0x7e> lw	a0,0(a4)
1c004a40 <_printf_i+0x80> andi	a2,a5,128
1c004a44 <_printf_i+0x84> addi	a1,a0,4
1c004a48 <_printf_i+0x88> beqz	a2,1c004a6a <_printf_i+0xaa>
1c004a4a <_printf_i+0x8a> lw	a5,0(a0)
1c004a4c <_printf_i+0x8c> sw	a1,0(a4)
1c004a4e <_printf_i+0x8e> lui	a6,0x1c009
1c004a52 <_printf_i+0x92> bgez	a5,1c004a62 <_printf_i+0xa2>
1c004a56 <_printf_i+0x96> li	a4,45
1c004a5a <_printf_i+0x9a> neg	a5,a5
1c004a5e <_printf_i+0x9e> sb	a4,67(s0)
1c004a62 <_printf_i+0xa2> addi	a6,a6,-1452 # 1c008a54 <__sf_fake_stdout+0x20>
1c004a66 <_printf_i+0xa6> li	a4,10
1c004a68 <_printf_i+0xa8> j	1c004ab0 <_printf_i+0xf0>
1c004a6a <_printf_i+0xaa> andi	a2,a5,64
1c004a6e <_printf_i+0xae> lw	a5,0(a0)
1c004a70 <_printf_i+0xb0> sw	a1,0(a4)
1c004a72 <_printf_i+0xb2> beqz	a2,1c004a4e <_printf_i+0x8e>
1c004a74 <_printf_i+0xb4> slli	a5,a5,0x10
1c004a76 <_printf_i+0xb6> srai	a5,a5,0x10
1c004a78 <_printf_i+0xb8> j	1c004a4e <_printf_i+0x8e>
1c004a7a <_printf_i+0xba> lw	a2,0(a1)
1c004a7c <_printf_i+0xbc> lw	a5,0(a4)
1c004a7e <_printf_i+0xbe> andi	a0,a2,128
1c004a82 <_printf_i+0xc2> addi	a1,a5,4
1c004a86 <_printf_i+0xc6> beqz	a0,1c004a8e <_printf_i+0xce>
1c004a88 <_printf_i+0xc8> sw	a1,0(a4)
1c004a8a <_printf_i+0xca> lw	a5,0(a5)
1c004a8c <_printf_i+0xcc> j	1c004a9a <_printf_i+0xda>
1c004a8e <_printf_i+0xce> andi	a2,a2,64
1c004a92 <_printf_i+0xd2> sw	a1,0(a4)
1c004a94 <_printf_i+0xd4> beqz	a2,1c004a8a <_printf_i+0xca>
1c004a96 <_printf_i+0xd6> lhu	a5,0(a5)
1c004a9a <_printf_i+0xda> lui	a6,0x1c009
1c004a9e <_printf_i+0xde> li	a4,111
1c004aa2 <_printf_i+0xe2> addi	a6,a6,-1452 # 1c008a54 <__sf_fake_stdout+0x20>
1c004aa6 <_printf_i+0xe6> beq	a7,a4,1c004b8c <_printf_i+0x1cc>
1c004aaa <_printf_i+0xea> li	a4,10
1c004aac <_printf_i+0xec> sb	zero,67(s0)
1c004ab0 <_printf_i+0xf0> lw	a2,4(s0)
1c004ab2 <_printf_i+0xf2> sw	a2,8(s0)
1c004ab4 <_printf_i+0xf4> bltz	a2,1c004abe <_printf_i+0xfe>
1c004ab8 <_printf_i+0xf8> lw	a1,0(s0)
1c004aba <_printf_i+0xfa> andi	a1,a1,-5
1c004abc <_printf_i+0xfc> sw	a1,0(s0)
1c004abe <_printf_i+0xfe> bnez	a5,1c004ac4 <_printf_i+0x104>
1c004ac0 <_printf_i+0x100> mv	s5,a3
1c004ac2 <_printf_i+0x102> beqz	a2,1c004ae0 <_printf_i+0x120>
1c004ac4 <_printf_i+0x104> mv	s5,a3
1c004ac6 <_printf_i+0x106> remu	a2,a5,a4
1c004aca <_printf_i+0x10a> addi	s5,s5,-1
1c004acc <_printf_i+0x10c> add	a2,a2,a6
1c004ace <_printf_i+0x10e> lbu	a2,0(a2)
1c004ad2 <_printf_i+0x112> sb	a2,0(s5)
1c004ad6 <_printf_i+0x116> mv	a2,a5
1c004ad8 <_printf_i+0x118> divu	a5,a5,a4
1c004adc <_printf_i+0x11c> bgeu	a2,a4,1c004ac6 <_printf_i+0x106>
1c004ae0 <_printf_i+0x120> li	a5,8
1c004ae2 <_printf_i+0x122> bne	a4,a5,1c004afe <_printf_i+0x13e>
1c004ae6 <_printf_i+0x126> lw	a5,0(s0)
1c004ae8 <_printf_i+0x128> andi	a5,a5,1
1c004aea <_printf_i+0x12a> beqz	a5,1c004afe <_printf_i+0x13e>
1c004aec <_printf_i+0x12c> lw	a4,4(s0)
1c004aee <_printf_i+0x12e> lw	a5,16(s0)
1c004af0 <_printf_i+0x130> blt	a5,a4,1c004afe <_printf_i+0x13e>
1c004af4 <_printf_i+0x134> li	a5,48
1c004af8 <_printf_i+0x138> sb	a5,-1(s5)
1c004afc <_printf_i+0x13c> addi	s5,s5,-1
1c004afe <_printf_i+0x13e> sub	a3,a3,s5
1c004b02 <_printf_i+0x142> sw	a3,16(s0)
1c004b04 <_printf_i+0x144> mv	a4,s3
1c004b06 <_printf_i+0x146> mv	a3,s2
1c004b08 <_printf_i+0x148> addi	a2,sp,12
1c004b0a <_printf_i+0x14a> mv	a1,s0
1c004b0c <_printf_i+0x14c> mv	a0,s1
1c004b0e <_printf_i+0x14e> jal	ra,1c0048b4 <_printf_common>
1c004b12 <_printf_i+0x152> li	s4,-1
1c004b14 <_printf_i+0x154> bne	a0,s4,1c004be8 <_printf_i+0x228>
1c004b18 <_printf_i+0x158> li	a0,-1
1c004b1a <_printf_i+0x15a> lw	ra,44(sp)
1c004b1c <_printf_i+0x15c> lw	s0,40(sp)
1c004b1e <_printf_i+0x15e> lw	s1,36(sp)
1c004b20 <_printf_i+0x160> lw	s2,32(sp)
1c004b22 <_printf_i+0x162> lw	s3,28(sp)
1c004b24 <_printf_i+0x164> lw	s4,24(sp)
1c004b26 <_printf_i+0x166> lw	s5,20(sp)
1c004b28 <_printf_i+0x168> lw	s6,16(sp)
1c004b2a <_printf_i+0x16a> addi	sp,sp,48
1c004b2c <_printf_i+0x16c> ret
1c004b2e <_printf_i+0x16e> lui	a6,0x1c009
1c004b32 <_printf_i+0x172> sb	a7,69(a1)
1c004b36 <_printf_i+0x176> addi	a6,a6,-1452 # 1c008a54 <__sf_fake_stdout+0x20>
1c004b3a <_printf_i+0x17a> lw	a2,0(s0)
1c004b3c <_printf_i+0x17c> lw	a1,0(a4)
1c004b3e <_printf_i+0x17e> andi	a0,a2,128
1c004b42 <_printf_i+0x182> lw	a5,0(a1)
1c004b44 <_printf_i+0x184> addi	a1,a1,4
1c004b46 <_printf_i+0x186> beqz	a0,1c004b7e <_printf_i+0x1be>
1c004b48 <_printf_i+0x188> sw	a1,0(a4)
1c004b4a <_printf_i+0x18a> andi	a4,a2,1
1c004b4e <_printf_i+0x18e> beqz	a4,1c004b56 <_printf_i+0x196>
1c004b50 <_printf_i+0x190> ori	a2,a2,32
1c004b54 <_printf_i+0x194> sw	a2,0(s0)
1c004b56 <_printf_i+0x196> li	a4,16
1c004b58 <_printf_i+0x198> bnez	a5,1c004aac <_printf_i+0xec>
1c004b5a <_printf_i+0x19a> lw	a2,0(s0)
1c004b5c <_printf_i+0x19c> andi	a2,a2,-33
1c004b60 <_printf_i+0x1a0> sw	a2,0(s0)
1c004b62 <_printf_i+0x1a2> j	1c004aac <_printf_i+0xec>
1c004b64 <_printf_i+0x1a4> lw	a5,0(a1)
1c004b66 <_printf_i+0x1a6> ori	a5,a5,32
1c004b6a <_printf_i+0x1aa> sw	a5,0(a1)
1c004b6c <_printf_i+0x1ac> li	a5,120
1c004b70 <_printf_i+0x1b0> lui	a6,0x1c009
1c004b74 <_printf_i+0x1b4> sb	a5,69(s0)
1c004b78 <_printf_i+0x1b8> addi	a6,a6,-1432 # 1c008a68 <__sf_fake_stdout+0x34>
1c004b7c <_printf_i+0x1bc> j	1c004b3a <_printf_i+0x17a>
1c004b7e <_printf_i+0x1be> andi	a0,a2,64
1c004b82 <_printf_i+0x1c2> sw	a1,0(a4)
1c004b84 <_printf_i+0x1c4> beqz	a0,1c004b4a <_printf_i+0x18a>
1c004b86 <_printf_i+0x1c6> slli	a5,a5,0x10
1c004b88 <_printf_i+0x1c8> srli	a5,a5,0x10
1c004b8a <_printf_i+0x1ca> j	1c004b4a <_printf_i+0x18a>
1c004b8c <_printf_i+0x1cc> li	a4,8
1c004b8e <_printf_i+0x1ce> j	1c004aac <_printf_i+0xec>
1c004b90 <_printf_i+0x1d0> lw	a2,0(a1)
1c004b92 <_printf_i+0x1d2> lw	a5,0(a4)
1c004b94 <_printf_i+0x1d4> lw	a1,20(a1)
1c004b96 <_printf_i+0x1d6> andi	a6,a2,128
1c004b9a <_printf_i+0x1da> addi	a0,a5,4
1c004b9e <_printf_i+0x1de> beqz	a6,1c004baa <_printf_i+0x1ea>
1c004ba2 <_printf_i+0x1e2> sw	a0,0(a4)
1c004ba4 <_printf_i+0x1e4> lw	a5,0(a5)
1c004ba6 <_printf_i+0x1e6> sw	a1,0(a5)
1c004ba8 <_printf_i+0x1e8> j	1c004bb8 <_printf_i+0x1f8>
1c004baa <_printf_i+0x1ea> sw	a0,0(a4)
1c004bac <_printf_i+0x1ec> andi	a2,a2,64
1c004bb0 <_printf_i+0x1f0> lw	a5,0(a5)
1c004bb2 <_printf_i+0x1f2> beqz	a2,1c004ba6 <_printf_i+0x1e6>
1c004bb4 <_printf_i+0x1f4> sh	a1,0(a5)
1c004bb8 <_printf_i+0x1f8> sw	zero,16(s0)
1c004bbc <_printf_i+0x1fc> mv	s5,a3
1c004bbe <_printf_i+0x1fe> j	1c004b04 <_printf_i+0x144>
1c004bc0 <_printf_i+0x200> lw	a5,0(a4)
1c004bc2 <_printf_i+0x202> lw	a2,4(a1)
1c004bc4 <_printf_i+0x204> li	a1,0
1c004bc6 <_printf_i+0x206> addi	a3,a5,4
1c004bca <_printf_i+0x20a> sw	a3,0(a4)
1c004bcc <_printf_i+0x20c> lw	s5,0(a5)
1c004bd0 <_printf_i+0x210> mv	a0,s5
1c004bd2 <_printf_i+0x212> jal	ra,1c00489a <memchr>
1c004bd6 <_printf_i+0x216> beqz	a0,1c004bde <_printf_i+0x21e>
1c004bd8 <_printf_i+0x218> sub	a0,a0,s5
1c004bdc <_printf_i+0x21c> sw	a0,4(s0)
1c004bde <_printf_i+0x21e> lw	a5,4(s0)
1c004be0 <_printf_i+0x220> sw	a5,16(s0)
1c004be2 <_printf_i+0x222> sb	zero,67(s0)
1c004be6 <_printf_i+0x226> j	1c004b04 <_printf_i+0x144>
1c004be8 <_printf_i+0x228> lw	a3,16(s0)
1c004bea <_printf_i+0x22a> mv	a2,s5
1c004bec <_printf_i+0x22c> mv	a1,s2
1c004bee <_printf_i+0x22e> mv	a0,s1
1c004bf0 <_printf_i+0x230> jalr	s3
1c004bf2 <_printf_i+0x232> beq	a0,s4,1c004b18 <_printf_i+0x158>
1c004bf6 <_printf_i+0x236> lw	a5,0(s0)
1c004bf8 <_printf_i+0x238> andi	a5,a5,2
1c004bfa <_printf_i+0x23a> bnez	a5,1c004c24 <_printf_i+0x264>
1c004bfc <_printf_i+0x23c> lw	a5,12(sp)
1c004bfe <_printf_i+0x23e> lw	a0,12(s0)
1c004c00 <_printf_i+0x240> bge	a0,a5,1c004b1a <_printf_i+0x15a>
1c004c04 <_printf_i+0x244> mv	a0,a5
1c004c06 <_printf_i+0x246> j	1c004b1a <_printf_i+0x15a>
1c004c08 <_printf_i+0x248> li	a3,1
1c004c0a <_printf_i+0x24a> mv	a2,s5
1c004c0c <_printf_i+0x24c> mv	a1,s2
1c004c0e <_printf_i+0x24e> mv	a0,s1
1c004c10 <_printf_i+0x250> jalr	s3
1c004c12 <_printf_i+0x252> beq	a0,s6,1c004b18 <_printf_i+0x158>
1c004c16 <_printf_i+0x256> addi	s4,s4,1
1c004c18 <_printf_i+0x258> lw	a5,12(s0)
1c004c1a <_printf_i+0x25a> lw	a4,12(sp)
1c004c1c <_printf_i+0x25c> sub	a5,a5,a4
1c004c1e <_printf_i+0x25e> blt	s4,a5,1c004c08 <_printf_i+0x248>
1c004c22 <_printf_i+0x262> j	1c004bfc <_printf_i+0x23c>
1c004c24 <_printf_i+0x264> li	s4,0
1c004c26 <_printf_i+0x266> addi	s5,s0,25
1c004c2a <_printf_i+0x26a> li	s6,-1
1c004c2c <_printf_i+0x26c> j	1c004c18 <_printf_i+0x258>
__sread():
1c004c2e <__sread> addi	sp,sp,-16
1c004c30 <__sread+0x2> sw	s0,8(sp)
1c004c32 <__sread+0x4> mv	s0,a1
1c004c34 <__sread+0x6> lh	a1,14(a1)
1c004c38 <__sread+0xa> sw	ra,12(sp)
1c004c3a <__sread+0xc> jal	1c004dce <_read_r>
1c004c3c <__sread+0xe> bltz	a0,1c004c4e <__sread+0x20>
1c004c40 <__sread+0x12> lw	a5,84(s0)
1c004c42 <__sread+0x14> add	a5,a5,a0
1c004c44 <__sread+0x16> sw	a5,84(s0)
1c004c46 <__sread+0x18> lw	ra,12(sp)
1c004c48 <__sread+0x1a> lw	s0,8(sp)
1c004c4a <__sread+0x1c> addi	sp,sp,16
1c004c4c <__sread+0x1e> ret
1c004c4e <__sread+0x20> lhu	a5,12(s0)
1c004c52 <__sread+0x24> lui	a4,0xfffff
1c004c54 <__sread+0x26> addi	a4,a4,-1
1c004c56 <__sread+0x28> and	a5,a5,a4
1c004c58 <__sread+0x2a> sh	a5,12(s0)
1c004c5c <__sread+0x2e> j	1c004c46 <__sread+0x18>
__swrite():
1c004c5e <__swrite> lhu	a5,12(a1)
1c004c62 <__swrite+0x4> addi	sp,sp,-32
1c004c64 <__swrite+0x6> sw	s0,24(sp)
1c004c66 <__swrite+0x8> sw	s1,20(sp)
1c004c68 <__swrite+0xa> sw	s2,16(sp)
1c004c6a <__swrite+0xc> sw	s3,12(sp)
1c004c6c <__swrite+0xe> sw	ra,28(sp)
1c004c6e <__swrite+0x10> andi	a5,a5,256
1c004c72 <__swrite+0x14> mv	s1,a0
1c004c74 <__swrite+0x16> mv	s0,a1
1c004c76 <__swrite+0x18> mv	s2,a2
1c004c78 <__swrite+0x1a> mv	s3,a3
1c004c7a <__swrite+0x1c> beqz	a5,1c004c86 <__swrite+0x28>
1c004c7c <__swrite+0x1e> lh	a1,14(a1)
1c004c80 <__swrite+0x22> li	a3,2
1c004c82 <__swrite+0x24> li	a2,0
1c004c84 <__swrite+0x26> jal	1c004d9e <_lseek_r>
1c004c86 <__swrite+0x28> lhu	a5,12(s0)
1c004c8a <__swrite+0x2c> lui	a4,0xfffff
1c004c8c <__swrite+0x2e> addi	a4,a4,-1
1c004c8e <__swrite+0x30> and	a5,a5,a4
1c004c90 <__swrite+0x32> lh	a1,14(s0)
1c004c94 <__swrite+0x36> sh	a5,12(s0)
1c004c98 <__swrite+0x3a> lw	s0,24(sp)
1c004c9a <__swrite+0x3c> lw	ra,28(sp)
1c004c9c <__swrite+0x3e> mv	a3,s3
1c004c9e <__swrite+0x40> mv	a2,s2
1c004ca0 <__swrite+0x42> lw	s3,12(sp)
1c004ca2 <__swrite+0x44> lw	s2,16(sp)
1c004ca4 <__swrite+0x46> mv	a0,s1
1c004ca6 <__swrite+0x48> lw	s1,20(sp)
1c004ca8 <__swrite+0x4a> addi	sp,sp,32
1c004caa <__swrite+0x4c> j	1c004ce8 <_write_r>
__sseek():
1c004cac <__sseek> addi	sp,sp,-16
1c004cae <__sseek+0x2> sw	s0,8(sp)
1c004cb0 <__sseek+0x4> mv	s0,a1
1c004cb2 <__sseek+0x6> lh	a1,14(a1)
1c004cb6 <__sseek+0xa> sw	ra,12(sp)
1c004cb8 <__sseek+0xc> jal	1c004d9e <_lseek_r>
1c004cba <__sseek+0xe> li	a5,-1
1c004cbc <__sseek+0x10> lhu	a4,12(s0)
1c004cc0 <__sseek+0x14> bne	a0,a5,1c004cd6 <__sseek+0x2a>
1c004cc4 <__sseek+0x18> lui	a5,0xfffff
1c004cc6 <__sseek+0x1a> addi	a5,a5,-1
1c004cc8 <__sseek+0x1c> and	a5,a5,a4
1c004cca <__sseek+0x1e> sh	a5,12(s0)
1c004cce <__sseek+0x22> lw	ra,12(sp)
1c004cd0 <__sseek+0x24> lw	s0,8(sp)
1c004cd2 <__sseek+0x26> addi	sp,sp,16
1c004cd4 <__sseek+0x28> ret
1c004cd6 <__sseek+0x2a> lui	a5,0x1
1c004cd8 <__sseek+0x2c> or	a5,a5,a4
1c004cda <__sseek+0x2e> sh	a5,12(s0)
1c004cde <__sseek+0x32> sw	a0,84(s0)
1c004ce0 <__sseek+0x34> j	1c004cce <__sseek+0x22>
__sclose():
1c004ce2 <__sclose> lh	a1,14(a1)
1c004ce6 <__sclose+0x4> j	1c004d18 <_close_r>
_write_r():
1c004ce8 <_write_r> addi	sp,sp,-16
1c004cea <_write_r+0x2> sw	s0,8(sp)
1c004cec <_write_r+0x4> sw	s1,4(sp)
1c004cee <_write_r+0x6> mv	s0,a0
1c004cf0 <_write_r+0x8> mv	a0,a1
1c004cf2 <_write_r+0xa> mv	a1,a2
1c004cf4 <_write_r+0xc> mv	a2,a3
1c004cf6 <_write_r+0xe> sw	ra,12(sp)
1c004cf8 <_write_r+0x10> sw	zero,-576(gp) # 1c00919c <errno>
1c004cfc <_write_r+0x14> jal	ra,1c0029f2 <_write>
1c004d00 <_write_r+0x18> li	a5,-1
1c004d02 <_write_r+0x1a> bne	a0,a5,1c004d0e <_write_r+0x26>
1c004d06 <_write_r+0x1e> lw	a5,-576(gp) # 1c00919c <errno>
1c004d0a <_write_r+0x22> beqz	a5,1c004d0e <_write_r+0x26>
1c004d0c <_write_r+0x24> sw	a5,0(s0)
1c004d0e <_write_r+0x26> lw	ra,12(sp)
1c004d10 <_write_r+0x28> lw	s0,8(sp)
1c004d12 <_write_r+0x2a> lw	s1,4(sp)
1c004d14 <_write_r+0x2c> addi	sp,sp,16
1c004d16 <_write_r+0x2e> ret
_close_r():
1c004d18 <_close_r> addi	sp,sp,-16
1c004d1a <_close_r+0x2> sw	s0,8(sp)
1c004d1c <_close_r+0x4> sw	s1,4(sp)
1c004d1e <_close_r+0x6> mv	s0,a0
1c004d20 <_close_r+0x8> mv	a0,a1
1c004d22 <_close_r+0xa> sw	ra,12(sp)
1c004d24 <_close_r+0xc> sw	zero,-576(gp) # 1c00919c <errno>
1c004d28 <_close_r+0x10> jal	ra,1c0029b2 <_close>
1c004d2c <_close_r+0x14> li	a5,-1
1c004d2e <_close_r+0x16> bne	a0,a5,1c004d3a <_close_r+0x22>
1c004d32 <_close_r+0x1a> lw	a5,-576(gp) # 1c00919c <errno>
1c004d36 <_close_r+0x1e> beqz	a5,1c004d3a <_close_r+0x22>
1c004d38 <_close_r+0x20> sw	a5,0(s0)
1c004d3a <_close_r+0x22> lw	ra,12(sp)
1c004d3c <_close_r+0x24> lw	s0,8(sp)
1c004d3e <_close_r+0x26> lw	s1,4(sp)
1c004d40 <_close_r+0x28> addi	sp,sp,16
1c004d42 <_close_r+0x2a> ret
_fstat_r():
1c004d44 <_fstat_r> addi	sp,sp,-16
1c004d46 <_fstat_r+0x2> sw	s0,8(sp)
1c004d48 <_fstat_r+0x4> sw	s1,4(sp)
1c004d4a <_fstat_r+0x6> mv	s0,a0
1c004d4c <_fstat_r+0x8> mv	a0,a1
1c004d4e <_fstat_r+0xa> mv	a1,a2
1c004d50 <_fstat_r+0xc> sw	ra,12(sp)
1c004d52 <_fstat_r+0xe> sw	zero,-576(gp) # 1c00919c <errno>
1c004d56 <_fstat_r+0x12> jal	ra,1c0029cc <_fstat>
1c004d5a <_fstat_r+0x16> li	a5,-1
1c004d5c <_fstat_r+0x18> bne	a0,a5,1c004d68 <_fstat_r+0x24>
1c004d60 <_fstat_r+0x1c> lw	a5,-576(gp) # 1c00919c <errno>
1c004d64 <_fstat_r+0x20> beqz	a5,1c004d68 <_fstat_r+0x24>
1c004d66 <_fstat_r+0x22> sw	a5,0(s0)
1c004d68 <_fstat_r+0x24> lw	ra,12(sp)
1c004d6a <_fstat_r+0x26> lw	s0,8(sp)
1c004d6c <_fstat_r+0x28> lw	s1,4(sp)
1c004d6e <_fstat_r+0x2a> addi	sp,sp,16
1c004d70 <_fstat_r+0x2c> ret
_isatty_r():
1c004d72 <_isatty_r> addi	sp,sp,-16
1c004d74 <_isatty_r+0x2> sw	s0,8(sp)
1c004d76 <_isatty_r+0x4> sw	s1,4(sp)
1c004d78 <_isatty_r+0x6> mv	s0,a0
1c004d7a <_isatty_r+0x8> mv	a0,a1
1c004d7c <_isatty_r+0xa> sw	ra,12(sp)
1c004d7e <_isatty_r+0xc> sw	zero,-576(gp) # 1c00919c <errno>
1c004d82 <_isatty_r+0x10> jal	ra,1c0029d8 <_isatty>
1c004d86 <_isatty_r+0x14> li	a5,-1
1c004d88 <_isatty_r+0x16> bne	a0,a5,1c004d94 <_isatty_r+0x22>
1c004d8c <_isatty_r+0x1a> lw	a5,-576(gp) # 1c00919c <errno>
1c004d90 <_isatty_r+0x1e> beqz	a5,1c004d94 <_isatty_r+0x22>
1c004d92 <_isatty_r+0x20> sw	a5,0(s0)
1c004d94 <_isatty_r+0x22> lw	ra,12(sp)
1c004d96 <_isatty_r+0x24> lw	s0,8(sp)
1c004d98 <_isatty_r+0x26> lw	s1,4(sp)
1c004d9a <_isatty_r+0x28> addi	sp,sp,16
1c004d9c <_isatty_r+0x2a> ret
_lseek_r():
1c004d9e <_lseek_r> addi	sp,sp,-16
1c004da0 <_lseek_r+0x2> sw	s0,8(sp)
1c004da2 <_lseek_r+0x4> sw	s1,4(sp)
1c004da4 <_lseek_r+0x6> mv	s0,a0
1c004da6 <_lseek_r+0x8> mv	a0,a1
1c004da8 <_lseek_r+0xa> mv	a1,a2
1c004daa <_lseek_r+0xc> mv	a2,a3
1c004dac <_lseek_r+0xe> sw	ra,12(sp)
1c004dae <_lseek_r+0x10> sw	zero,-576(gp) # 1c00919c <errno>
1c004db2 <_lseek_r+0x14> jal	ra,1c0029ea <_lseek>
1c004db6 <_lseek_r+0x18> li	a5,-1
1c004db8 <_lseek_r+0x1a> bne	a0,a5,1c004dc4 <_lseek_r+0x26>
1c004dbc <_lseek_r+0x1e> lw	a5,-576(gp) # 1c00919c <errno>
1c004dc0 <_lseek_r+0x22> beqz	a5,1c004dc4 <_lseek_r+0x26>
1c004dc2 <_lseek_r+0x24> sw	a5,0(s0)
1c004dc4 <_lseek_r+0x26> lw	ra,12(sp)
1c004dc6 <_lseek_r+0x28> lw	s0,8(sp)
1c004dc8 <_lseek_r+0x2a> lw	s1,4(sp)
1c004dca <_lseek_r+0x2c> addi	sp,sp,16
1c004dcc <_lseek_r+0x2e> ret
_read_r():
1c004dce <_read_r> addi	sp,sp,-16
1c004dd0 <_read_r+0x2> sw	s0,8(sp)
1c004dd2 <_read_r+0x4> sw	s1,4(sp)
1c004dd4 <_read_r+0x6> mv	s0,a0
1c004dd6 <_read_r+0x8> mv	a0,a1
1c004dd8 <_read_r+0xa> mv	a1,a2
1c004dda <_read_r+0xc> mv	a2,a3
1c004ddc <_read_r+0xe> sw	ra,12(sp)
1c004dde <_read_r+0x10> sw	zero,-576(gp) # 1c00919c <errno>
1c004de2 <_read_r+0x14> jal	ra,1c0029ee <_read>
1c004de6 <_read_r+0x18> li	a5,-1
1c004de8 <_read_r+0x1a> bne	a0,a5,1c004df4 <_read_r+0x26>
1c004dec <_read_r+0x1e> lw	a5,-576(gp) # 1c00919c <errno>
1c004df0 <_read_r+0x22> beqz	a5,1c004df4 <_read_r+0x26>
1c004df2 <_read_r+0x24> sw	a5,0(s0)
1c004df4 <_read_r+0x26> lw	ra,12(sp)
1c004df6 <_read_r+0x28> lw	s0,8(sp)
1c004df8 <_read_r+0x2a> lw	s1,4(sp)
1c004dfa <_read_r+0x2c> addi	sp,sp,16
1c004dfc <_read_r+0x2e> ret
	...
